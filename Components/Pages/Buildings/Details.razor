@page "/buildings/{id:guid}"
@using Microsoft.EntityFrameworkCore
@inject ModelContext ModelContext
@inject UserManager<ArchiBaseUser> UserManager


@if (building != null)
{
    <RadzenText TextStyle="TextStyle.H4">@(building.Location.Name + ", " + String.Join(" / ",
    building.ActualCard?.StreetAddresses.Select(a => $"{a.Street.Name}, {a.HouseNumber}") ?? []))</RadzenText>
    <RadzenLink Text="Edit" Icon="edit" Path=@($"buildings/{building.Id}/edit") />
    <RadzenRow>
        <RadzenColumn>
            <RadzenText TextStyle="TextStyle.H6">Timeline</RadzenText>
            <RadzenCard>
                <RadzenTimeline>
                    <Items>
                        @foreach (var ev in building.Events.OrderBy(ev => ev.Date.Date))
                        {
                            <RadzenTimelineItem PointStyle="GetPointStyleByEventType(ev.Type)">
                                <LabelContent>
                                    <RadzenText TextStyle="TextStyle.H5" Class="@(GetTextStyleByEventType(ev.Type))">@(ev.Date)
                                    </RadzenText>
                                </LabelContent>
                                <ChildContent>
                                    <RadzenText Class="@(GetTextStyleByEventType(ev.Type))">@(ev.Type)</RadzenText>
                                </ChildContent>
                            </RadzenTimelineItem>
                        }
                    </Items>
                </RadzenTimeline>
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenText TextStyle="TextStyle.H6">Map</RadzenText>
            <RadzenCard>
                <OpenStreetMap Style="height:300px; width:300px"
                    Center="new Coordinate(building.Longitude, building.Latitude)" Zoom="15">
                    <Features>
                        <Marker Type="OpenLayers.Blazor.MarkerType.MarkerPin"
                            Coordinate="new Coordinate(building.Longitude, building.Latitude)">
                        </Marker>
                    </Features>
                </OpenStreetMap>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
    <RadzenText TextStyle="TextStyle.H6">Details</RadzenText>
    <RadzenRow>
        <RadzenText>@((MarkupString)building.Description)</RadzenText>
    </RadzenRow>
    <RadzenTabs>
        <Tabs>
            @foreach (var (card, index) in building.Cards.OrderBy(c => c.ActualFrom.Date)
           .Select((item, index) => (item, index + 1)))
            {
                <RadzenTabsItem Text=@($"Card #{index} actual from {card.ActualFrom}")>
                    <RadzenCard>
                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline">Design</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@(card.Design.Name)</b>
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2"><i>@(String.Join(" Â· ",
                                card.Design.CatalogueEntries.OrderBy(e => (e.Catalogue.Id,
                                e.Code)).Select(e
                                => e.Formatted)))</i></RadzenText>
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline">Floor count</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@(card.FloorCount)</b>
                                </RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline">Building name</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@(card.Name)</b></RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenCard>
                </RadzenTabsItem>
            }
        </Tabs>
    </RadzenTabs>
    <RadzenText TextStyle="TextStyle.H6">Photos (@(photos.Count))</RadzenText>
    <RadzenDataGrid Data="photos">
        <Columns>
            <RadzenDataGridColumn Title="Photo">
                <Template Context="photo">
                    <RadzenLink Path="@($"/photos/{photo.Id}")" Text="Photo" Target="_blank">
                        <RadzenImage Path=@(photo.PhotoLink)
                            Style="display:block;margin:auto;max-height:200px;max-width:400px;height:auto;width:auto;"
                            AlternateText="Photo not available" />
                    </RadzenLink>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Details">
                <Template Context="photo">
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(photo.ShootingDate)</b></RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline">
                        @(photo.NonAuthor ? "Sent" : "Author"):
                        @(UserManager.Users.FirstOrDefault(u => u.Id == photo.AuthorId)?.UserName)
                    </RadzenText>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    <CommentView EntityId="building.Id" />
}

@code
{
    [Parameter]
    public Guid Id { get; set; }

    Building? building;
    String? authorName;

    List<Photo> photos = [];

    protected override void OnParametersSet()
    {
        building = ModelContext.Buildings.Include(b => b.Events)
        .Include(b => b.Location)
        .Include(b => b.Cards)
        .ThenInclude(c => c.StreetAddresses)
        .ThenInclude(a => a.Street)
        .Include(b => b.Cards)
        .ThenInclude(c => c.Design)
        .ThenInclude(d => d.CatalogueEntries)
        .ThenInclude(e => e.Catalogue).FirstOrDefault(b => b.Id == Id);
        photos = ModelContext.BuildingBinds.Where(b => b.Building == building)
        .Select(b => b.Photo).OrderByDescending(p => p.ShootingDate.Date).ToList();
    }

    public PointStyle GetPointStyleByEventType(BuildingEventType eventType) => eventType switch
    {
        BuildingEventType.ConstructionStarted => PointStyle.Success,
        BuildingEventType.ConstructionFinished => PointStyle.Success,
        BuildingEventType.RebuildingStarted => PointStyle.Warning,
        BuildingEventType.RebuildingFinished => PointStyle.Warning,
        BuildingEventType.Abandoned => PointStyle.Dark,
        BuildingEventType.Demolished => PointStyle.Danger,
        _ => PointStyle.Info
    };

    public string GetTextStyleByEventType(BuildingEventType eventType) => eventType switch
    {
        BuildingEventType.ConstructionStarted => "rz-color-success",
        BuildingEventType.ConstructionFinished => "rz-color-success",
        BuildingEventType.RebuildingStarted => "rz-color-warning",
        BuildingEventType.RebuildingFinished => "rz-color-warning",
        BuildingEventType.Abandoned => "rz-color-dark",
        BuildingEventType.Demolished => "rz-color-danger",
        _ => "rz-color-info"
    };
}
