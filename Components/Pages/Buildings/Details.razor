@page "/buildings/{id:guid}"
@using Microsoft.EntityFrameworkCore
@using SmartFormat
@inject ModelContext ModelContext
@inject UserManager<ArchiBaseUser> UserManager
@inject IStringLocalizer<Details> Loc
@inject IStringLocalizer<BuildingEvent> ELoc
@inject Archibase.Utils.CadastreRecordService Cadastre


@if (building != null)
{
    <ArchibasePageTitle Title=@buildingDisplayString />
    <RadzenText TextStyle="TextStyle.H4">@buildingDisplayString</RadzenText>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="18" Wrap="FlexWrap.Wrap">
        @foreach (var sa in building.ActualCard?.StreetAddresses ?? [])
        {
            <RadzenLink Text=@($"{sa.Street.Name}") Path=@($"buildings/by-street/{sa.Street.Id}") />
        }
        </RadzenStack>
    <RadzenLink Text="Edit" Icon="edit" Path=@($"buildings/{building.Id}/edit") />
    <RadzenRow>
        <RadzenColumn>
            <RadzenText TextStyle="TextStyle.H6">@Loc["Timeline"]</RadzenText>
            <RadzenCard>
                <RadzenTimeline>
                    <Items>
                        @foreach (var ev in building.Events.OrderBy(ev => ev.Date.Date))
                        {
                            <RadzenTimelineItem PointStyle="GetPointStyleByEventType(ev.Type)">
                                <LabelContent>
                                    <RadzenText TextStyle="TextStyle.H5" Class="@(GetTextStyleByEventType(ev.Type))">
                                        <ImpreciseDateDisplay Value="ev.Date" />
                                    </RadzenText>
                                </LabelContent>
                                <ChildContent>
                                    <RadzenText Class="@(GetTextStyleByEventType(ev.Type))">@(ELoc[ev.Type.GetDisplayName()])
                                    </RadzenText>
                                </ChildContent>
                            </RadzenTimelineItem>
                        }
                    </Items>
                </RadzenTimeline>
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenText TextStyle="TextStyle.H6">@Loc["Building on map"]</RadzenText>
            <RadzenCard>
                <OpenStreetMap Style="height:300px; width:300px"
                    Center="new Coordinate(building.Longitude, building.Latitude)" Zoom="15">
                    <Features>
                        <Marker Type="OpenLayers.Blazor.MarkerType.MarkerPin"
                            Coordinate="new Coordinate(building.Longitude, building.Latitude)">
                        </Marker>
                    </Features>
                </OpenStreetMap>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
    <RadzenText TextStyle="TextStyle.H6">@Loc["Details"]</RadzenText>
    @if (building.CadastreRecordNumber is not null)
    {
        <RadzenText />
        <RadzenRow>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.Overline">@Loc["Cadastre record number"]</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1">
                    <RadzenLink Path=@(cadastreLink)>
                        <b>@(building.CadastreRecordNumber)</b>
                    </RadzenLink>
                </RadzenText>
            </RadzenColumn>
        </RadzenRow>
    }
    <RadzenRow>
        <RadzenText>@((MarkupString)building.Description)</RadzenText>
    </RadzenRow>
    <RadzenTabs>
        <Tabs>
            @foreach (var (card, index) in building.Cards.OrderBy(c => c.ActualFrom.Date)
           .Select((item, index) => (item, index + 1)))
            {
                <RadzenTabsItem Text=@( card.ActualFrom.Precision == DatePrecision.None ? Smart.Format(Loc["Card #{Index}"], new
            { Index = index}) : Smart.Format(Loc["Card #{Index} actual from {ActualFrom}"], new { Index = index,
            ActualFrom = card.ActualFrom}))>
                    <RadzenCard>
                        <RadzenRow>
                            @if (card.Parts.Any())
                            {
                                <RadzenColumn>

                                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Design"]</RadzenText>
                                    <RadzenRow>
                                        @foreach (var part in card.Parts.OrderBy(p => p.Name))
                                        {
                                            <RadzenColumn>
                                                <RadzenText TextStyle="TextStyle.Body1">
                                                    @if (part.Name is not null)
                                                    {
                                                        <i>@(part.Name):</i>
                                                    }
                                                    <b>
                                                        <RadzenLink Text=@(part.Design.Name) Path=@($"/series/{part.Design.Id}") />
                                                    </b>
                                                </RadzenText>
                                                <RadzenText TextStyle="TextStyle.Body2"><i>@(String.Join(" Â· ",
                                        part.Design.CatalogueEntries.OrderBy(e => (e.Catalogue.Id, e.Code)).Select(e =>
                                        e.Formatted)))</i>
                                                </RadzenText>
                                            </RadzenColumn>
                                        }
                                    </RadzenRow>
                                </RadzenColumn>
                            }
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline">@Loc["Address"]</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1">
                                    <b>@(String.Join(" / ",
                                             card.StreetAddresses
                                             .OrderByDescending(a => a.HouseNumber,
                                             StringComparison.OrdinalIgnoreCase.WithNaturalSort())
                                             .Select(a => $"{a.Street.Name}, {a.HouseNumber}") ?? []))</b>
                                </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline">@Loc["Floor count"]</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1">
                                    <b>@(String.Join("; ", card.FloorCount))</b>
                                </RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline">@Loc["Name"]</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@((MarkupString)(card?.Name ?? ""))</b></RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                        @if (card.Architects.Count > 0)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Architects"]</RadzenText>
                                    <RadzenStack Orientation="Orientation.Horizontal">
                                        @foreach (var architect in card.Architects)
                                        {
                                            <RadzenLink Path=@($"/architects/{architect.Id}")>
                                                <b>@(architect.AbbreviatedName)</b>
                                            </RadzenLink>
                                        }
                                    </RadzenStack>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (card.Style is not null)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Style"]</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@(card.Style.Name)</b></RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline">@Loc["Categories"]</RadzenText>
                                <RadzenStack Orientation="Orientation.Horizontal">
                                    @foreach (var cat in card.Categories)
                                    {
                                        <RadzenLink Path=@($"/categories/{cat.Id}")>
                                            <RadzenBadge Text=@(cat.Name) BadgeStyle="BadgeStyle.Info" Shade="Shade.Darker" />
                                        </RadzenLink>
                                    }
                                    @foreach (var cat in card.CategoriesOfDesigns)
                                    {
                                        <RadzenLink Path=@($"/categories/{cat.Id}")>
                                            <RadzenBadge Text=@(cat.Name) BadgeStyle="BadgeStyle.Info" Shade="Shade.Lighter" />
                                        </RadzenLink>
                                    }
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenCard>
                </RadzenTabsItem>
            }
        </Tabs>
    </RadzenTabs>
    <RadzenText TextStyle="TextStyle.H6">@Loc["Photos"] (@(photos.Count))</RadzenText>
    <RadzenDataGrid Data="photos">
        <Columns>
            <RadzenDataGridColumn Title=@Loc["Photo"]>
                <Template Context="photo">
                    <RadzenLink Path="@($"/photos/{photo.Id}")" Text="Photo" Target="_blank">
                        <RadzenImage Path=@(photo.PhotoLink)
                            Style="display:block;margin:auto;max-height:200px;max-width:400px;height:auto;width:auto;"
                            AlternateText="Photo not available" onerror="this.src='/images/unavailable.png'" />
                    </RadzenLink>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Details"]>
                <Template Context="photo">
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(photo.ShootingDate)</b></RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline">
                        @(photo.NonAuthor ? @Loc["Sent by"] : @Loc["Author"]):
                        @(UserManager.Users.FirstOrDefault(u => u.Id == photo.AuthorId)?.UserName)
                    </RadzenText>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    <CommentView EntityId="building.Id" EntityType="Building" />
}

@code
{
    [Parameter]
    public Guid Id { get; set; }

    Building? building;

    string buildingDisplayString = "";

    string? cadastreLink = "";

    List<Photo> photos = [];

    protected override void OnParametersSet()
    {
        building = ModelContext.Buildings.Include(b => b.Events)
        .Include(b => b.Location)
        .Include(b => b.Cards)
        .ThenInclude(c => c.Categories)
        .Include(b => b.Cards)
        .ThenInclude(c => c.StreetAddresses)
        .ThenInclude(a => a.Street)
        .Include(b => b.Cards)
        .ThenInclude(c => c.Architects)
        .Include(b => b.Cards)
        .ThenInclude(c => c.Style)
        .Include(b => b.Cards)
        .ThenInclude(c => c.Parts)
        .ThenInclude(p => p.Design)
        .ThenInclude(d => d.Categories)
        .Include(b => b.Cards)
        .ThenInclude(c => c.Parts)
        .ThenInclude(p => p.Design)
        .ThenInclude(d => d.CatalogueEntries)
        .ThenInclude(e => e.Catalogue).AsSplitQuery().FirstOrDefault(b => b.Id == Id);
        photos = ModelContext.BuildingBinds.Where(b => b.Building == building)
        .Select(b => b.Photo).Where(p => ModelContext.ActivePhotos.Contains(p))
        .OrderByDescending(p => p.ShootingDate.Date).ToList();

        if (building is not null)
        {
            buildingDisplayString = building.Location.Name + ", " + String.Join(" / ",
            building.ActualCard?.StreetAddresses
            .OrderByDescending(a => a.HouseNumber, StringComparison.OrdinalIgnoreCase.WithNaturalSort())
            .Select(a => $"{a.Street.Name}, {a.HouseNumber}") ?? []);
        }
        if (building.CadastreRecordNumber is not null)
        {
            cadastreLink = Cadastre.GetLink(building);
        }

    }

    public PointStyle GetPointStyleByEventType(BuildingEventType eventType) => eventType switch
    {
        BuildingEventType.ConstructionStarted => PointStyle.Success,
        BuildingEventType.ConstructionFinished => PointStyle.Success,
        BuildingEventType.RebuildingStarted => PointStyle.Warning,
        BuildingEventType.RebuildingFinished => PointStyle.Warning,
        BuildingEventType.Abandoned => PointStyle.Dark,
        BuildingEventType.Demolished => PointStyle.Danger,
        _ => PointStyle.Info
    };

    public string GetTextStyleByEventType(BuildingEventType eventType) => eventType switch
    {
        BuildingEventType.ConstructionStarted => "rz-color-success",
        BuildingEventType.ConstructionFinished => "rz-color-success",
        BuildingEventType.RebuildingStarted => "rz-color-warning",
        BuildingEventType.RebuildingFinished => "rz-color-warning",
        BuildingEventType.Abandoned => "rz-color-dark",
        BuildingEventType.Demolished => "rz-color-danger",
        _ => "rz-color-info"
    };
}
