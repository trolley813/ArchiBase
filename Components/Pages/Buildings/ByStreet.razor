@page "/buildings/by-street/{id:guid}"
@using Microsoft.EntityFrameworkCore
@inject ModelContext ModelContext
@inject IStringLocalizer<ByStreet> Loc

@if (street != null)
{
    <ArchibasePageTitle Title=@($"{Loc["List of buildings at the street"]}: {street.Name}") />
    <RadzenText TextStyle="TextStyle.H4">@Loc["List of buildings at the street"]: @(street.Name)</RadzenText>

    <RadzenLink Text="@(street.Location.Name)" Path=@($"locations/{street.Location.Id}") />

    <RadzenCheckBox @bind-Value=@showPhotos Name="ShowPhotos" />
    <RadzenLabel Text=@Loc["Show photos"] Component="ShowPhotos" />

    <RadzenDataGrid Data="buildings" AllowPaging="true" AllowSorting="true" PageSize="100" CellRender="@CellRender">
        <Columns>
            @if (showPhotos)
            {
                <RadzenDataGridColumn Title=@Loc["Photo"] Sortable=false>
                    <Template Context="building">
                        <RadzenImage Path=@(GetPhotoLink(building.Building))
                            Style="display:block;margin:auto;max-height:150px;max-width:300px;height:auto;width:auto;"
                            AlternateText=@Loc["Photo not available"] />
                    </Template>
                </RadzenDataGridColumn>
            }
            <RadzenDataGridColumn Title=@Loc["Address"] Property="HouseNumber" SortOrder="SortOrder.Ascending">
                <Template Context="building">
                    <RadzenLink style="white-space: pre-wrap" Text="@(String.Join(" / ", building.Addresses
                    .OrderBy(a => a.Street != street)
                    .ThenByDescending(a => a.HouseNumber, StringComparison.OrdinalIgnoreCase.WithNaturalSort())
                        .Select(a => $"{a.Street?.Name}, {a.HouseNumber}") ?? []))"
                        Path=@($"buildings/{building.Building.Id}")>

                    </RadzenLink>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Design"] Sortable=false Width="30%">
                <Template Context="building">
                    <RadzenText>
                        @(String.Join(" â‹… ", building.Building.ActualCard?.Parts?.Select(p => p.Design.Name).Distinct() ??
                        []))
                    </RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                        @foreach (var c in building.Building.ActualCard?.Categories ?? [])
                        {
                            <RadzenBadge Text=@(c.Name) Shade="Shade.Darker" BadgeStyle="BadgeStyle.Info" />
                        }
                        @foreach (var c in building.Building.ActualCard?.CategoriesOfDesigns ?? [])
                        {
                            <RadzenBadge Text=@(c.Name) Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Info" />
                        }
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Floor count"] Property="FloorCount" Width="10%">
                <Template Context="building">
                    <RadzenText>@(building.FloorCount)</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Name"] Property="Name">
                <Template Context="building">
                    <RadzenText Style="white-space: normal">@((MarkupString)building.Name)</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Built"] Property="Built" Width="10%">
                <Template Context="building">
                    <RadzenText>@(building.Building.GetDateOfStatus(BuildingEventType.ConstructionFinished))</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Demolished"] Property="Demolished" Width="10%">
                <Template Context="building">
                    <RadzenText>@(building.Building.GetDateOfStatus(BuildingEventType.Demolished))</RadzenText>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{

}

@code
{
    [Parameter]
    public Guid Id { get; set; }

    Street? street = null;

    List<BuildingInfo> buildings = [];

    class BuildingInfo
    {
        public Building Building { get; set; }
        public NaturalString HouseNumber { get; set; }
        public NaturalString FloorCount { get; set; }
        public string Name { get; set; }
        public ImpreciseDate? Built { get; set; }
        public ImpreciseDate? Demolished { get; set; }

        public List<StreetAddress> Addresses { get; set; }
    }

    bool showPhotos;

    protected override void OnParametersSet()
    {
        street = ModelContext.Streets.Include(s => s.Location).FirstOrDefault(s => s.Id == Id);
        if (street != null)
        {
            buildings = ModelContext.Buildings
            .Include(b => b.Events)
            .Include(b => b.Cards)
            .ThenInclude(c => c.StreetAddresses)
            .ThenInclude(a => a.Street)
            .Include(b => b.Cards)
            .ThenInclude(c => c.Categories)
            .Include(b => b.Cards)
            .ThenInclude(c => c.Parts)
            .ThenInclude(p => p.Design)
            .ThenInclude(d => d.Categories)
            .Where(b => b.Cards.Any(c => c.StreetAddresses.Any(a => a.Street == street)))
            .AsSplitQuery()
            .ToList()
            .Select(
            b => new BuildingInfo
                {
                    Building = b,
                    HouseNumber = b.Cards.SelectMany(c => c.StreetAddresses).First(c => c.Street == street).HouseNumber,
                    FloorCount = String.Join("; ", b.ActualCard?.FloorCount ?? []),
                    Name = b.ActualCard?.Name ?? "",
                    Built = b.GetDateOfStatus(BuildingEventType.ConstructionFinished),
                    Demolished = b.GetDateOfStatus(BuildingEventType.Demolished),
                    Addresses = b.ActualCard?.StreetAddresses ?? []
                }
            ).ToList();
        }
    }

    string? GetPhotoLink(Building building)
    {
        return ModelContext.Photos
        .Include(p => p.BuildingBinds)
        .Where(p => p.BuildingBinds.Any(b => b.Building == building))
        .OrderByDescending(p => p.ShootingDate.Date)
        .FirstOrDefault()?.PhotoLink;
    }

    void CellRender(DataGridCellRenderEventArgs<BuildingInfo> args)
    {
        var actualAddress = args.Data.Building.ActualCard?.StreetAddresses.Any(a => a.Street == street) ?? false;
        var color = args.Data.Building.Events.OrderBy(e => (e.Date.Date)).ThenBy(e => e.Type).LastOrDefault()?.Type switch
        {
            BuildingEventType.ConstructionStarted => "--rz-success-lighter",
            BuildingEventType.RebuildingStarted => "--rz-warning-lighter",
            BuildingEventType.Abandoned => "--rz-base",
            BuildingEventType.Demolished => "--rz-danger-lighter",
            _ => "--rz-base-background-color"
        };
        if (!actualAddress) color = "--rz-info-lighter";
        args.Attributes.Add("style", $"background-color: var({color});");
    }
}