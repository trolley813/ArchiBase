@page "/buildings/by-street/{id:guid}"
@using ArchiBase.Components.Pages.Utils
@using Microsoft.EntityFrameworkCore
@using SmartFormat
@inject IJSRuntime JSRuntime
@inject ModelContext ModelContext
@inject IStringLocalizer<ByStreet> Loc

@if (street != null)
{
    <ArchibasePageTitle Title=@($"{Loc["List of buildings at the street"]}: {street.Name}") />
    <RadzenText TextStyle="TextStyle.H4">@Loc["List of buildings at the street"]: @(street.Name)</RadzenText>
    <RadzenLink Text="@(street.Location.Name)" Path=@($"locations/{street.Location.Id}") />

    <RadzenRow>
        <RadzenLink Path=@($"streets/{Id}/edit") Text=@Loc["Edit"] Icon="edit" />
        <RadzenLink Path=@($"streets/{Id}/delete") Text=@Loc["Delete"] Icon="delete" />
    </RadzenRow>
    @if (street.From is null && street.To is not null)
    {
        <RadzenText>
    <b>@(Smart.Format(Loc["Until {ToDate}"], new { ToDate = street.To })) </b>
</RadzenText>
    }
    @if (street.From is not null && street.To is null)
    {
        <RadzenText>
    <b>@(Smart.Format(Loc["Since {FromDate}"], new { FromDate = street.From })) </b>
</RadzenText>
    }
    @if (street.From is not null && street.To is not null)
    {
        <RadzenText>
    <b>@(Smart.Format(Loc["{FromDate} — {ToDate}"], new { FromDate = street.From, ToDate = street.To })) </b>
</RadzenText>
    }

    <RadzenRow>
        <RadzenText>
            @((MarkupString)(street.Description ?? Loc["(no description)"]))
        </RadzenText>
    </RadzenRow>

    <RadzenCheckBox @bind-Value=@showPhotos Name="ShowPhotos" />
    <RadzenLabel Text=@Loc["Show photos"] Component="ShowPhotos" />

    <OpenStreetMap @ref="map" Style="width: 80%; height: 80%" OnMarkerClick="args => OnMarkerClick(args)">

    </OpenStreetMap>

    <RadzenDataGrid Data="buildings" AllowPaging="true" AllowSorting="true" PageSize="100" CellRender="@CellRender" Responsive=true>
        <Columns>
            <RadzenDataGridColumn Title=@Loc["Photo"] Sortable=false Visible="showPhotos">
                <Template Context="building">
                    <RadzenImage Path=@(photoLinks.GetValueOrDefault(building.Building.Id, "/images/unavailable.png"))
                        Style="display:block;margin:auto;max-height:150px;max-width:300px;height:auto;width:auto;"
                        AlternateText=@Loc["Photo not available"] onerror="this.src='/images/unavailable.png'" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Address"] Property="HouseNumber" SortOrder="SortOrder.Ascending">
                <Template Context="building">
                    <RadzenLink Style="white-space: pre-wrap" Text="@(String.Join(" / ", building.LastCardWithAddress.StreetAddresses
                    .OrderBy(a => a.Street != street)
                    .ThenByDescending(a => a.HouseNumber, StringComparison.OrdinalIgnoreCase.WithNaturalSort())
                        .Select(a => $"{a.Street?.Name}, {a.HouseNumber}") ?? []))"
                        Path=@($"buildings/{building.Building.Id}")>
                    </RadzenLink>
                    @if (building.ActualCard != building.LastCardWithAddress)
                    {
                        <RadzenText Style="white-space: pre-wrap" TextStyle="TextStyle.Body2">
                            @(Loc["Current address"] + ": " + String.Join(" / ", building.Addresses
                            .OrderBy(a => a.Street != street)
                            .ThenByDescending(a => a.HouseNumber, StringComparison.OrdinalIgnoreCase.WithNaturalSort())
                            .Select(a => $"{a.Street?.Name}, {a.HouseNumber}") ?? []))
                        </RadzenText>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Design"] Sortable=false Width="30%">
                <Template Context="building">
                    <RadzenText Style="white-space: pre-wrap">
                        @(String.Join(" ⋅ ", building.Building.ActualCard?.Parts?.Select(p => p.Design.Name).Distinct()
                        ??
                        []))
                    </RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                        @foreach (var c in building.Building.ActualCard?.Categories ?? [])
                        {
                            <RadzenLink Path=@($"/categories/{c.Id}")>
                                <RadzenBadge Style="white-space: normal;" Text=@(c.Name) Shade="Shade.Darker" BadgeStyle="BadgeStyle.Info" />
                            </RadzenLink>
                        }
                        @foreach (var c in building.Building.ActualCard?.CategoriesOfDesigns ?? [])
                        {
                            <RadzenLink Path=@($"/categories/{c.Id}")>
                                <RadzenBadge Style="white-space: normal;" Text=@(c.Name) Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Info" />
                            </RadzenLink>
                        }
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Floor count"] Property="FloorCount" Width="10%">
                <Template Context="building">
                    <RadzenText>@(building.FloorCount)</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Name"] Property="Name">
                <Template Context="building">
                    <RadzenText Style="white-space: normal">@((MarkupString)building.Name)</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Built"] Property="Built" Width="10%" Visible=@(buildings.Any(b => b.Built != null))>
                <Template Context="building">
                    <ImpreciseDateDisplay Value="@(building.Built)"/>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Demolished"] Property="Demolished" Width="10%" Visible=@(buildings.Any(b => b.Demolished != null))>
                <Template Context="building">
                    <ImpreciseDateDisplay Value="@(building.Demolished)"/>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{

}


@code
{
    [Parameter]
    public Guid Id { get; set; }

    Street? street = null;

    List<BuildingInfo> buildings = [];

    bool showPhotos;

    Dictionary<Guid, string> photoLinks = [];

    OpenStreetMap map;

    protected override void OnParametersSet()
    {
        street = ModelContext.Streets.Include(s => s.Location).FirstOrDefault(s => s.Id == Id);
        if (street != null)
        {
            buildings = ModelContext.Buildings
            .Include(b => b.Events)
            .Include(b => b.Cards)
            .ThenInclude(c => c.StreetAddresses)
            .ThenInclude(a => a.Street)
            .Include(b => b.Cards)
            .ThenInclude(c => c.Categories)
            .Include(b => b.Cards)
            .ThenInclude(c => c.Parts)
            .ThenInclude(p => p.Design)
            .ThenInclude(d => d.Categories)
            .Where(b => b.Cards.Any(c => c.StreetAddresses.Any(a => a.Street == street)))
            .AsSplitQuery()
            .ToList()
            .Select(
            b => new BuildingInfo
                {
                    Building = b,
                    HouseNumber = b.Cards.SelectMany(c => c.StreetAddresses).First(c => c.Street == street).HouseNumber,
                    FloorCount = String.Join("; ", b.ActualCard?.FloorCount ?? []),
                    Name = b.ActualCard?.Name ?? "",
                    Built = b.GetDateOfStatus(BuildingEventType.ConstructionFinished),
                    Demolished = b.GetDateOfStatus(BuildingEventType.Demolished),
                    Addresses = b.ActualCard?.StreetAddresses ?? [],
                    ActualCard = b.ActualCard,
                    LastCardWithAddress = b.Cards.OrderBy(c => c.ActualFrom).Last(c => c.StreetAddresses.Any(a => a.Street == street))
                }
            ).ToList();
            photoLinks = ModelContext
            .BuildingBinds
            .Include(b => b.Photo)
            .Include(b => b.Building)
            .ThenInclude(b => b.Cards)
            .ThenInclude(c => c.StreetAddresses)
            .ThenInclude(a => a.Street)
            .Where(b => b.Building.Cards.Any(c => c.StreetAddresses.Any(a => a.Street == street)))
            .ToList()
            .GroupBy(b => b.Building)
            .Select(g => g.MaxBy(p => p.Photo.PublicationDate))
            .ToDictionary(b => b.Building.Id, b => b.Photo.PhotoLink);
        }
    }

    void CellRender(DataGridCellRenderEventArgs<BuildingInfo> args)
    {
        var actualAddress = args.Data.ActualCard == args.Data.LastCardWithAddress;
        var color = args.Data.Building.Events.OrderBy(e => (e.Date.Date)).ThenBy(e => e.Type).LastOrDefault()?.Type switch
        {
            BuildingEventType.ConstructionStarted => "--rz-success-lighter",
            BuildingEventType.RebuildingStarted => "--rz-warning-lighter",
            BuildingEventType.Abandoned => "--rz-base",
            BuildingEventType.Demolished => "--rz-danger-lighter",
            _ => "--rz-base-background-color"
        };
        if (!actualAddress) color = "--rz-info-lighter";
        string style = $"background-color: var({color});";
        if (args.Column.Property == "HouseNumber" && photoLinks.ContainsKey(args.Data.Building.Id)) style += "font-weight: bold;";
        args.Attributes.Add("style", style);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            double avgLat = 0.0, avgLon = 0.0;
            foreach (var b in buildings)
            {
                var marker = new Marker(
                OpenLayers.Blazor.MarkerType.MarkerFlag,
                new Coordinate(b.Building.Longitude, b.Building.Latitude),
                String.Join("/", b.Addresses.OrderBy(a => a.Street != street).Select(a => a.HouseNumber)));
                marker.Fill = b.Building.Events.OrderBy(e => (e.Date.Date)).ThenBy(e => e.Type).LastOrDefault()?.Type switch
                {
                    BuildingEventType.ConstructionStarted => "limegreen",
                    BuildingEventType.RebuildingStarted => "gold",
                    BuildingEventType.Abandoned => "grey",
                    BuildingEventType.Demolished => "crimson",
                    _ => "black"
                };
                if (photoLinks.ContainsKey(b.Building.Id)) marker.TextColor = "orange";
                map.MarkersList.Add(marker);
                avgLat += b.Building.Latitude;
                avgLon += b.Building.Longitude;
            }
            if (buildings.Count != 0)
            {
                avgLat /= buildings.Count;
                avgLon /= buildings.Count;
                map.Center = new Coordinate(avgLon, avgLat);
            }
            else
            {
                map.Center = new Coordinate(street.Location.Longitude, street.Location.Latitude);
            }
            map.Zoom = 15;
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    async void OnMarkerClick(Marker marker)
    {
        var lat = marker.Coordinate.Latitude;
        var lon = marker.Coordinate.Longitude;
        Guid? buildingId = buildings
        .FirstOrDefault(b => b.Building.Latitude == lat && b.Building.Longitude == lon)?.Building.Id;
        if (buildingId is not null)
        {
            await JSRuntime.InvokeVoidAsync("open", $"/buildings/{buildingId}", "_blank");
        }
    }
}