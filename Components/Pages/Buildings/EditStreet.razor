@page "/streets/{id:guid}/edit"
@inject ModelContext ModelContext
@inject IStringLocalizer<EditStreet> Loc
@inject NotificationService NotificationService
@using Microsoft.EntityFrameworkCore

<LoadingScreen Loaded=@loaded>
    <RadzenText></RadzenText>
    @if (street is not null && location is not null)
    {
        <EditorOnly Location=@(location.Id) ShowAlert=false>
            <RadzenText TextStyle="TextStyle.H3">@Loc["Edit street"]</RadzenText>

            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenFormField Text="Name">
                    <RadzenTextBox @bind-Value="@model.Name" />
                </RadzenFormField>
                <RadzenFormField Text="Description">
                    <RadzenHtmlEditor @bind-Value="@model.Description" />
                </RadzenFormField>
                <RadzenFormField Text="Actual street (optional)">
                    <RadzenDropDown @bind-Value="@model.ActualStreet" Data="streets" TextProperty="Name" AllowFiltering=true
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear=true>
                    </RadzenDropDown>
                </RadzenFormField>
                <RadzenFormField Text="From (optional)">
                    <Start>
                        <RadzenLabel For="SetFrom" Text=@Loc["Enable"] />
                        <RadzenCheckBox Name="SetFrom" @bind-Value="@model.FromDateSet" />
                    </Start>
                    <ChildContent>
                        <ImpreciseDateInput @bind-Value="@model.From" />
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="To (optional)">
                    <Start>
                        <RadzenLabel For="SetTo" Text=@Loc["Enable"] />
                        <RadzenCheckBox Name="SetTo" @bind-Value="@model.ToDateSet" />
                    </Start>
                    <ChildContent>
                        <ImpreciseDateInput @bind-Value="@model.To" />
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField>
                    <RadzenButton Text="Save" Icon="save" Click="@Save" />
                </RadzenFormField>
            </RadzenStack>
        </EditorOnly>
    }

</LoadingScreen>

@code
{
    [Parameter]
    public Guid Id { get; set; }

    bool loaded;

    Street? street;
    Location? location;

    List<Street> streets;

    class StreetInputModel
    {
        public string Name { get; set; }
        public string Description { get; set; }

        public Street? ActualStreet { get; set; }
        public ImpreciseDate From { get; set; } = new();

        public bool FromDateSet { get; set; }
        public ImpreciseDate To { get; set; } = new();
        public bool ToDateSet { get; set; }
    }

    StreetInputModel model = new();

    protected override async Task OnInitializedAsync()
    {
        loaded = false;
        await Task.Yield();
        street = ModelContext.Streets.Include(s => s.Location).FirstOrDefault(s => s.Id == Id);
        location = street?.Location;
        streets = ModelContext.Streets.Include(s => s.Location).Where(s => s.Location == location).ToList();
        model.Name = street.Name;
        model.Description = street.Description;
        model.ActualStreet = street.ActualStreet;
        model.FromDateSet = street.From is not null;
        if (street.From is not null)
        {
            model.From = street.From;
        }
        model.ToDateSet = street.To is not null;
        if (street.To is not null)
        {
            model.To = street.To;
        }
        loaded = true;
    }

    public void Save()
    {
        try
        {
            street.Name = model.Name;
            street.Description = model.Description;
            street.ActualStreet = model.ActualStreet;
            street.From = model.FromDateSet ? model.From : null;
            street.To = model.ToDateSet ? model.To : null;
            ModelContext.SaveChanges();
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Street saved",
                    Detail = $"ID: {street.Id}"
                });
        }
        catch (Exception e)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"{e.Message}"
                });
        }
    }
}
