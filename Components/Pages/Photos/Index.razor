@page "/photos"
@using Microsoft.EntityFrameworkCore
@inject ModelContext ModelContext
@inject IStringLocalizer<Index> Loc

<ArchibasePageTitle Title=@Loc["Photos"] />


<RadzenText TextStyle="TextStyle.H4">@Loc["Photos"]</RadzenText>

<LoadingScreen Loaded="loaded">
    <RadzenDataGrid AllowPaging=true PageSize=20 PagerAlwaysVisible=true ShowPagingSummary=true Data="photos"
        AllowSorting=true AllowFiltering=true>
        <Columns>
            <RadzenDataGridColumn Title=@Loc["Photo"] Sortable=false Filterable=false>
                <Template Context="photo">
                    <RadzenLink Path=@($"/photos/{photo.Id}")>
                        <RadzenImage Path=@(photo.PhotoLink)
                            Style="display:block;margin:auto;max-height:150px;max-width:300px;height:auto;width:auto;"
                            AlternateText=@Loc["Photo not available"] onerror="this.src='/images/unavailable.png'" />
                    </RadzenLink>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Published"] Property="PublicationDate">
                <Template Context="photo">
                    <LocalTime DateTime="photo.PublicationDate" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Shooting date"] Property="ShootingDate.Date">
                <Template Context="photo">
                    <ImpreciseDateDisplay Value="photo.ShootingDate"></ImpreciseDateDisplay>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Buildings"] Sortable=false Filterable=false>
                <Template Context="photo">
                    <RadzenStack>
                    @foreach (var b in photo.BuildingBinds)
                    {
                        
                        <RadzenLink Path=@($"/buildings/{b.Building.Id}") 
                        Text=@($"{b.Building.Location.Name}, {String.Join(" / ", b.Building.ActualCard.StreetAddresses)}") />
                    }
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</LoadingScreen>

@code
{
    List<Photo> photos;

    bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        photos = await ModelContext.ActivePhotos
        .Include(p => p.BuildingBinds)
        .ThenInclude(b => b.Building)
        .ThenInclude(b => b.Location)
        .Include(p => p.BuildingBinds)
        .ThenInclude(b => b.Building)
        .ThenInclude(b => b.Cards)
        .ThenInclude(c => c.StreetAddresses)
        .ThenInclude(a => a.Street)
        .AsSplitQuery()
        .OrderByDescending(p => p.PublicationDate).ToListAsync();
        loaded = true;
        this.StateHasChanged();
    }
}
