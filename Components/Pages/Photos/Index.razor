@page "/photos"
@using Microsoft.EntityFrameworkCore
@using System.Linq.Dynamic.Core
@using SmartFormat
@inject ModelContext ModelContext
@inject UsersContext UsersContext
@inject UserManager<ArchiBaseUser> UserManager
@inject IStringLocalizer<Index> Loc

<ArchibasePageTitle Title=@Loc["Photos"] />

@if(selectedAuthor is not null)
{
    <RadzenText TextStyle="TextStyle.H4">@(Smart.Format(Loc["Photos uploaded by {User}"], new { User = selectedAuthor.UserName }))</RadzenText>
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenLink Path=@($"/users/{selectedAuthor.Id}") Text=@Loc["To user's page"] Target="blank" />
        <RadzenLink Path="/photos" Text=@Loc["Show all"] Target="blank" />
    </RadzenStack>
}
else
{
    <RadzenText TextStyle="TextStyle.H4">@Loc["Photos"]</RadzenText>
}


<RadzenDataGrid @ref="grid" AllowPaging=true PageSize=20 PagerAlwaysVisible=true ShowPagingSummary=true Data="photos" Count="count" Responsive=true
    AllowSorting=true AllowFiltering=true LoadData="@LoadData" IsLoading=@(!loaded) FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
    <Columns>
        <RadzenDataGridColumn Title=@Loc["Photo"] Sortable=false Filterable=false>
            <Template Context="photo">
                <RadzenLink Path=@($"/photos/{photo.Photo.Id}")>
                    <RadzenImage Path=@(photo.Photo.PhotoLink)
                        Style="display:block;margin:auto;max-height:150px;max-width:300px;height:auto;width:auto;"
                        AlternateText=@Loc["Photo not available"] onerror="this.src='/images/unavailable.png'" />
                </RadzenLink>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title=@Loc["Published"] Filterable=false Property="PublicationDateSort" SortOrder="SortOrder.Descending">
            <Template Context="photo">
                <RadzenText TextStyle="TextStyle.Body1">
                    <b><LocalTime DateTime="photo.Photo.PublicationDate" /></b>
                </RadzenText>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title=@Loc["Shooting date"] Property="ShootingDateSort">
            <Template Context="photo">
                <RadzenText TextStyle="TextStyle.Body1">
                    <b><ImpreciseDateDisplay Value="photo.Photo.ShootingDate"></ImpreciseDateDisplay></b>
                </RadzenText>
            </Template>
        </RadzenDataGridColumn>
        @if(selectedAuthor is null)
        {
            <RadzenDataGridColumn Title=@Loc["Author"] Property="AuthorName">
                <Template Context="photo">
                    @if (photo.Photo.NonAuthor)
                    {
                        <RadzenText TextStyle="TextStyle.Overline">@Loc["Sent by"]</RadzenText>
                    }
                    else
                    {
                        <RadzenText TextStyle="TextStyle.Overline">@Loc["Author"]</RadzenText>
                    }

                    <RadzenText TextStyle="TextStyle.Body1">
                        <RadzenLink Path=@($"/users/{photo.Photo.AuthorId}")>
                            <b>@(photo.AuthorName)</b>
                        </RadzenLink>
                    </RadzenText>
                </Template>
            </RadzenDataGridColumn>
        }
        <RadzenDataGridColumn Title=@Loc["Buildings and galleries"] Sortable=false Filterable=false>
            <Template Context="photo">
                <RadzenStack>
                @foreach (var b in photo.Photo.BuildingBinds)
                {
                    <RadzenText TextStyle="TextStyle.Body1" Style="white-space: pre-line;">
                    <RadzenLink Path=@($"/buildings/{b.Building.Id}") 
                    Text=@($"{b.Building.Location.Name}, {String.Join(" / ", b.Building.ActualCard.StreetAddresses)}") />
                    </RadzenText>
                }
                </RadzenStack>
                <RadzenStack>
                @foreach (var g in photo.Photo.Galleries)
                {
                    <RadzenText TextStyle="TextStyle.Body1">
                    <RadzenLink Path=@($"/galleries/{g.Id}") Text=@(g.Name) />
                    </RadzenText>
                }
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code
{
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? AuthorId { get; set; }

    class PhotoWithAuthor
    {
        public Photo Photo { get; set; }
        public DateTime ShootingDateSort { get; set; }
        public DateTime PublicationDateSort { get; set; }
        public string AuthorName { get; set; }
    }

    List<PhotoWithAuthor> photos;

    List<ArchiBaseUser> users;

    ArchiBaseUser? selectedAuthor;

    bool loaded;
    int count;

    RadzenDataGrid<PhotoWithAuthor> grid;

    override protected void OnInitialized()
    {
        users = UsersContext.Users.ToList();
        selectedAuthor = users.FirstOrDefault(u => u.Id == AuthorId);
    }

    async Task LoadData(LoadDataArgs args)
    {
        loaded = false;

        await Task.Yield();

        var query = ModelContext.ActivePhotos
        .Include(p => p.BuildingBinds)
        .ThenInclude(b => b.Building)
        .ThenInclude(b => b.Location)
        .Include(p => p.BuildingBinds)
        .ThenInclude(b => b.Building)
        .ThenInclude(b => b.Cards)
        .ThenInclude(c => c.StreetAddresses)
        .ThenInclude(a => a.Street)
        .Join(ModelContext.PhotoAuthorMappings, p => p.Id, a => a.PhotoId, (p, a) => new { 
            Photo = p, 
            ShootingDateSort = p.ShootingDate.Date,
            PublicationDateSort = p.PublicationDate,
            AuthorName = a.AuthorName
            })
        .AsQueryable();
        if(selectedAuthor is not null)
        {
            query = query.Where(x => x.AuthorName == selectedAuthor.UserName);
        }

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }
        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }
        // Important!!! Make sure the Count property of RadzenDataGrid is set.
        count = query.Count();
        photos = query.Skip(args.Skip ?? 0).Take(args.Top ?? 20).ToList()
        .Select(x => new PhotoWithAuthor
        { 
            Photo = x.Photo, 
            PublicationDateSort = x.PublicationDateSort, 
            ShootingDateSort = x.ShootingDateSort, 
            AuthorName = x.AuthorName
        }).ToList();
        loaded = true;
    }
}
