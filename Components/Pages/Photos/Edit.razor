@page "/photos/{id:guid}/edit"
@using Microsoft.EntityFrameworkCore
@inject ModelContext ModelContext
@inject IWebHostEnvironment WebHostEnvironment
@inject NotificationService NotificationService
@inject IStringLocalizer<Edit> Loc

@if (photo is not null)
{
    <EditorOnly>
        <LoadingScreen Loaded=loaded>
            <RadzenText TextStyle="TextStyle.H4">@Loc["Edit photo"]</RadzenText>
            <RadzenStack>
                <RadzenImage Path=@(photo.PhotoLink)
                Style="max-width: 100%; height: auto; display: block; margin-left: auto; margin-right: auto; padding-bottom: 30px;"
                AlternateText=@Loc["Photo not available"] onerror="this.src='/images/unavailable.png'" />
                <RadzenFieldset Text=@Loc["Buildings"]>
                    <RadzenRow>
                        <RadzenText>
                            @(location?.Name) &emsp;
                            @if(suggestedLocation)
                            {
                                <RadzenBadge Text=@Loc["Suggested"] BadgeStyle="BadgeStyle.Info" Style="vertical-align: middle" />
                            }
                        </RadzenText>
                    </RadzenRow>
                    <RadzenRow RowGap="10">
                        <RadzenButton Icon="add" Text=@Loc["Bind a building"] Size="ButtonSize.Small" Click="AddBuilding" />
                    </RadzenRow>
                    @for (int index = 0; index < photo.BuildingBinds.Count; index++)
                    {
                        int i = index;
                        <div draggable="true" ondragover="event.preventDefault()" 
                                @ondragstart="() => DragStart(i)" @ondrop="() => Drop(i)">
                            <RadzenRow>
                                <RadzenColumn Size="6">
                                    <RadzenDropDown Data="filteredBuildings[i]" Value=@(photo.BuildingBinds[i].Building.Id) TValue="Guid"
                                    Change="args => SetBind(i, args)"
                                    Style="width: 100%" @bind-SearchText="searchTexts[i]" ValueProperty="Building.Id" LoadData=@(args
                                => LoadData(i, args)) Placeholder=@Loc["Select a building"] FilterPlaceholder=@Loc["Address"]
                                    AllowFiltering=true FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                                        <Template Context="building">
                                            <RadzenText>@(string.Join(" / ", building.Addresses))</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Overline">
                                                @if (building.Building is not null)
                                                {
                                                    var b = building.Building as Building;
                                                    var text = String.Join(" • ", b?.ActualCard?.Parts.Select(p => p.Design.Name) ?? []);
                                                    if (text.Length == 0)
                                                    {
                                                        text = String.Join(" • ", b?.ActualCard?.Categories.Select(c => c.Name) ?? []);
                                                    }
                                                    @(text)
                                                }
                                            </RadzenText>
                                        </Template>
                                    </RadzenDropDown>
                                </RadzenColumn>
                                <RadzenColumn Size="1">
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Text" Icon="close"
                                    Click="args => RemoveBuilding(i)" />
                                    <RadzenCheckBox @bind-Value=@(photo.BuildingBinds[i].IsMain) Name=@($"IsMain{i}") />
                                    <RadzenLabel Text=@Loc["Main"] Component=@($"IsMain{i}") />
                                </RadzenColumn>
                                <RadzenColumn Size="5">
                                    <RadzenText>
                                        @if (photo.BuildingBinds[i].Building is not null)
                                        {
                                            var text = String.Join(" • ", photo.BuildingBinds[i].Building.ActualCard?.Parts.Select(p =>
                                            p.Design.Name) ?? []);
                                            if (text.Length == 0)
                                            {
                                                text = String.Join(" • ", photo.BuildingBinds[i].Building.ActualCard?.Categories.Select(c =>
                                                c.Name) ?? []);
                                            }
                                            @(text)
                                        }
                                    </RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        </div>
                    }
                </RadzenFieldset>
                <RadzenFieldset Text=@Loc["EXIF Data"]>
                    <RadzenStack>
                        <RadzenRow>
                            <RadzenLabel>@Loc["Shooting date"]</RadzenLabel>
                            <ImpreciseDateInput Value="photo.ShootingDate"/>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenFormField Text=@Loc["Latitude"]>
                                <RadzenNumeric ShowUpDown="false" @bind-Value="photo.Latitude" />
                            </RadzenFormField>
                            <RadzenFormField Text=@Loc["Longitude"]>
                                <RadzenNumeric ShowUpDown="false" @bind-Value="photo.Longitude" />
                            </RadzenFormField>
                            <RadzenFormField Text=@Loc["Direction"]>
                                <RadzenNumeric Name="Dir" Min="1" Max="360" @bind-Value="photo.Direction" Format="0 °" />
                            </RadzenFormField>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenButton Text=@Loc["Re-read from file"] Icon="replay" Click="RereadExifData" />
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenCheckBox Name="reread-exif" @bind-Value="rereadExif" />
                            <RadzenLabel Component="reread-exif">@Loc["EXIF Data"]</RadzenLabel>
                            <RadzenCheckBox Name="reread-date" @bind-Value="rereadDate" />
                            <RadzenLabel Component="reread-date">@Loc["Shooting date"]</RadzenLabel>
                            <RadzenCheckBox Name="reread-coords" @bind-Value="rereadCoordinates" />
                            <RadzenLabel Component="reread-coords">@Loc["Coordinates"]</RadzenLabel>
                        </RadzenRow>

                        <ExifDisplay ExifData="photo.Exif" />
                    </RadzenStack>
                </RadzenFieldset>
                <RadzenButton Text=@Loc["Save"] Icon="save" Click="Save" />
            </RadzenStack>
        </LoadingScreen>

    </EditorOnly>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }
    Photo? photo;

    class BuildingWithAddress : IEquatable<BuildingWithAddress>
    {
        public Building Building { get; set; }
        public List<NamedStreetAddress> Addresses { get; set; }

        public bool Equals(BuildingWithAddress? other) => other?.Building.Id == this.Building.Id;
    }

    List<List<BuildingWithAddress>> filteredBuildings = [];

    List<string> searchTexts;


    IQueryable<BuildingWithAddress> buildings;

    Location? location;

    bool loaded = false;

    bool suggestedLocation = false;

    int maxListSize = 20;

    bool rereadExif = true, rereadCoordinates = false, rereadDate = false;

    int dragStartIndex = -1;

    protected override async Task OnInitializedAsync()
    {
        loaded = false;
        await Task.Yield();
        photo = await ModelContext.Photos
        .Include(p => p.BuildingBinds).ThenInclude(b => b.Building).ThenInclude(b => b.Location)
        .Include(p => p.BuildingBinds).ThenInclude(b => b.Building).ThenInclude(b => b.Events)
        .Include(p => p.BuildingBinds).ThenInclude(b => b.Building).ThenInclude(b => b.Cards).ThenInclude(c =>
        c.StreetAddresses).ThenInclude(a => a.Street)
        .Include(p => p.BuildingBinds).ThenInclude(b => b.Building).ThenInclude(b => b.Cards).ThenInclude(c =>
        c.Parts).ThenInclude(p => p.Design).ThenInclude(d => d.Categories)
        .Include(p => p.BuildingBinds).ThenInclude(b => b.Building).ThenInclude(b => b.Cards).ThenInclude(c =>
        c.Categories)
        .Include(p => p.License)
        .Include(p => p.Galleries)
        .AsSplitQuery()
        .FirstOrDefaultAsync(p => p.Id == Id);

        if (photo.BuildingBinds.Count > 0)
        {
            location = photo.BuildingBinds.First()?.Building?.Location;
        }
        else
        {
            location = ModelContext.Buildings
            .Include(b => b.Location)
            .OrderBy(b => (photo.Latitude - b.Latitude) * (photo.Latitude - b.Latitude) + (photo.Longitude - b.Longitude) * (photo.Longitude - b.Longitude))
            .First().Location;
            suggestedLocation = true;
        }

        buildings = ModelContext.Buildings.Where(b => b.Location == location)
        .AsNoTracking()
        .Include(b => b.ActualCard)
        .ThenInclude(c => c.Categories)
        .Include(b => b.ActualCard)
        .ThenInclude(c => c.StreetAddresses)
        .ThenInclude(a => a.Street)
        .Include(b => b.ActualCard)
        .ThenInclude(c => c.Parts)
        .ThenInclude(p => p.Design)
        .Join(ModelContext.CardAddressMappings, b => b.ActualCard.Id, m => m.BuildingCardId,
            (b, m) => new BuildingWithAddress
            {
                Building = b,
                Addresses = m.Addresses
            }
        );
;

        searchTexts = Enumerable.Repeat("", photo.BuildingBinds.Count).ToList();
        photo.BuildingBinds.Sort((BuildingBind b1, BuildingBind b2) => b1.Order.CompareTo(b2.Order));
        filteredBuildings = photo.BuildingBinds.Select(b => buildings.Where(bb => bb.Building == b.Building).ToList()).ToList();

        loaded = true;
    }

    public void AddBuilding()
    {
        photo.BuildingBinds.Add(new() { Order = photo.BuildingBinds.Count + 1, Building = new() { Id = Guid.Empty } });
        searchTexts.Add("");
        filteredBuildings.Add([]);
    }

    public void RemoveBuilding(int index)
    {
        photo.BuildingBinds.RemoveAt(index);
        searchTexts.RemoveAt(index);
        filteredBuildings.RemoveAt(index);
    }

    void LoadData(int index, LoadDataArgs args)
    {
        var query = buildings;
        if (!string.IsNullOrEmpty(args.Filter))
        {
            var filters = args.Filter.Split(" ", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .Select(f => f.ToLower()).ToArray();
            query = query.Where(
                b => filters.All(
                    f => b.Addresses.Any(
                        a => a.StreetName.ToLower().Contains(f) ||
                             a.HouseNumber.ToLower().Contains(f)
                    )
                )
            );
        }
        filteredBuildings[index] = query.Take(maxListSize).ToList();
        InvokeAsync(StateHasChanged);
    }

    void RereadExifData()
    {
        var wwwroot = WebHostEnvironment.WebRootPath;
        var filePath = wwwroot + photo.PhotoLink;
        if (photo is not null && File.Exists(filePath))
        {
            byte[] bytes = File.ReadAllBytes(filePath);
            var (exif, shootingDate, latitude, longitude) = PhotoExifReader.ReadExif(bytes);
            if (rereadExif)
            {
                photo.Exif = exif;
            }
            if (rereadDate)
            {
                if (shootingDate.Precision != 0)
                {
                    photo.ShootingDate = shootingDate;
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = Loc["No date present"],
                        Detail = Loc["The photo does not contain date/time information"]
                    });
                }
            }
            if (rereadCoordinates)
            {
                if (latitude != 0 || longitude != 0)
                {
                    photo.Latitude = latitude;
                    photo.Longitude = longitude;

                }
                else
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = Loc["No GPS data"],
                        Detail = Loc["The photo does not contain GPS tags"]
                    });
                }
            }
        }
        this.StateHasChanged();

    }

    void SetBind(int index, object value)
    {
        if (value is null) return;
        var id = value as Guid?;
        if (id is not null)
        {
            photo.BuildingBinds[index].Building = ModelContext.Buildings.FirstOrDefault(b => b.Id == id);
        }

    }

    void Save()
    {
        try
        {
            for (int i = 0; i < photo.BuildingBinds.Count; i++)
            {
                photo.BuildingBinds[i].Order = i + 1;
            }
            ModelContext.SaveChanges();
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Photo saved",
                Detail = $"ID: {photo.Id}"
            });
        }
        catch(Exception e)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"{e.Message}"
                });
        }
    }

    void DragStart(int index)
    {
        dragStartIndex = index;
    }

    void Drop(int index)
    {
        int count = photo.BuildingBinds.Count;
        if (0 <= dragStartIndex && dragStartIndex < count && 0 <= index && index < count)
        {
            var t1 = photo.BuildingBinds[index];
            photo.BuildingBinds[index] = photo.BuildingBinds[dragStartIndex];
            photo.BuildingBinds[dragStartIndex] = t1;
            var t2 = searchTexts[index];
            searchTexts[index] = searchTexts[dragStartIndex];
            searchTexts[dragStartIndex] = t2;
            var t3 = filteredBuildings[index];
            filteredBuildings[index] = filteredBuildings[dragStartIndex];
            filteredBuildings[dragStartIndex] = t3;
            StateHasChanged();
        }
    }

}