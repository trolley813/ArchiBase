@page "/photos/{id:guid}"
@using Humanizer
@using Microsoft.EntityFrameworkCore
@inject ModelContext ModelContext
@inject UserManager<ArchiBaseUser> UserManager
@inject UserResolverService UserResolverService
@inject IStringLocalizer<Details> Loc
@inject IStringLocalizer<BuildingEvent> ELoc

<ArchibasePageTitle Title=@Loc["Photo"] />

@if (photo is not null)
{
        <RadzenRow Style="margin: auto; padding: 10px; width: 90%">
        <RadzenColumn Width="12">
                <RadzenText TextStyle="TextStyle.H5">@Loc["Photo"]</RadzenText>
                <RadzenImage Path=@(photo.PhotoLink)
                    Style="max-width: 100%; height: auto; display: block; margin-left: auto; margin-right: auto; padding-bottom: 30px;"
                    AlternateText=@Loc["Photo not available"] onerror="this.src='/images/unavailable.png'" />
                @if (photo.IsLost ?? false)
                {
                        <RadzenAlert AllowClose="false" Title=@Loc["Photo is lost"] AlertStyle="AlertStyle.Dark" Shade="Shade.Default" Icon="no_photography">
                        @Loc["This photo is lost and needs to be restored."]
                        @if(user?.Id == photo.AuthorId || isAdmin)
                        {
                            <RadzenLink Text=@Loc["Restore"] Icon="restore" Path=@($"photos/{photo.Id}/restore") />
                        }
                        </RadzenAlert>
                }
                @if (photo.Status == PhotoStatus.Pending)
                {
                        <RadzenAlert AllowClose="false" Title=@Loc["Pending publication"] AlertStyle="AlertStyle.Warning" Shade="Shade.Lighter">
                        @Loc["This photo is pending publication and was not checked by moderators. It may be published or rejected later."]
                        </RadzenAlert>
                }
                @if (photo.Status == PhotoStatus.Rejected)
                {
                        <RadzenAlert AllowClose="false" Title=@Loc["Rejected"] AlertStyle="AlertStyle.Danger" Shade="Shade.Lighter">
                        @Loc["This photo was rejected since it does not meets the quality guidelines and/or violates the terms of service."]
                        </RadzenAlert>
                }
                
                @foreach (var g in photo.BuildingBinds.OrderBy(b => b.Order).GroupBy(b => b.Building.Location))
                {
                    var lastBind = g.Last();
                    <RadzenText TextStyle="TextStyle.Body1">
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="10" Wrap="FlexWrap.Wrap">
                        <RadzenLink Text="@(g.Key.Name)" Path=@($"/locations/{g.Key.Id}") /> 
                        <RadzenText> —  </RadzenText>
                    
                    @foreach (var b in g)
                    {
                        <RadzenLink
                                Text="@(String.Join(" / ",
                    b.Building.ActualCard?.StreetAddresses.Select(a => $"{a.Street?.Name}, {a.HouseNumber}") ?? []))"
                                            Path=@($"/buildings/{b.Building.Id}") style=@(b.IsMain ? "font-weight:bold" :
                    "font-style:italic") />
                        if (b != lastBind)
                        {
                            <RadzenText> • </RadzenText>
                        }
                    }
                        </RadzenStack>
                    </RadzenText>
                }
                    <RadzenRow>
                        <RadzenColumn>
                            <RadzenText TextStyle="TextStyle.Overline">@Loc["Shooting date"]</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>
                                    <ImpreciseDateDisplay Value=@(photo.ShootingDate) />
                                </b>
                            </RadzenText>
                        </RadzenColumn>
                        <RadzenColumn>
                        @if (photo.NonAuthor)
                        {
                                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Sent by"]</RadzenText>
                        }
                        else
                        {
                                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Author"]</RadzenText>
                        }

                            <RadzenText TextStyle="TextStyle.Body1">
                                @if(photo.Status == PhotoStatus.Published)
                                {
                                    <RadzenLink Path=@($"/users/{photo.AuthorId}")>
                                        <b>@author</b>
                                    </RadzenLink>
                                }
                                else
                                {
                                    <RadzenText>@Loc["(author hidden)"]</RadzenText>
                                }
                            </RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenMediaQuery Query="(max-width: 768px)" Change="args => useVerticalTimelines = args" />
                    <RadzenAccordion Multiple=true>
                        <Items>
                        @foreach (var b in photo.BuildingBinds.OrderBy(b => b.Order))
                        {
                            var currentEvent = b.Building.ActualEventToDate(photo.ShootingDate.Date);
                            var card = b.Building.ActualToDate(photo.ShootingDate.Date);
                            var address = String.Join(" / ", card?.StreetAddresses.Select(a => $"{a.Street?.Name}, {a.HouseNumber}") ?? []);
                            var name = card?.Name;
                            var designs = String.Join(" • ", card?.Parts.Select(p => p.Design.Name) ?? []);
                            var collapsedText = address;
                            if (name != "") collapsedText += $" —  {name}";
                            if (designs != "") collapsedText += $" ({designs})";
                            <RadzenAccordionItem Text=@collapsedText>
                                <RadzenTimeline Orientation="useVerticalTimelines ? Orientation.Vertical : Orientation.Horizontal" 
                                LinePosition="LinePosition.Start" Wrap="FlexWrap.Wrap">
                                    <Items>

                                    @foreach (var ev in b.Building.Events.OrderBy(ev => ev.Date.Date))
                                    {
                                        <RadzenTimelineItem PointStyle="GetPointStyleByEventType(ev.Type)" PointVariant="Variant.Outlined" PointShadow="0" PointSize="PointSize.Large">
                                            <PointContent>
                                                <RadzenIcon Icon="@(GetIconByEventType(ev.Type))" />
                                            </PointContent>
                                            <ChildContent>
                                                <RadzenText TextStyle="TextStyle.H5" Class="@(GetTextStyleByEventType(ev.Type))">
                                                    <ImpreciseDateDisplay Value="ev.Date" />
                                                </RadzenText>
                                                <RadzenText Class="@(GetTextStyleByEventType(ev.Type))">@(ELoc[ev.Type.GetDisplayName()])
                                                </RadzenText>
                                            </ChildContent>
                                        </RadzenTimelineItem>
                                        if (ev == currentEvent)
                                        {
                                            <RadzenTimelineItem PointStyle="PointStyle.Info" PointVariant="Variant.Outlined" PointShadow="0" PointSize="PointSize.Large">
                                                <PointContent>
                                                    <RadzenIcon Icon="photo_camera" />
                                                </PointContent>
                                                <ChildContent>
                                                    <RadzenText TextStyle="TextStyle.H5" Class="rz-color-info">
                                                        <ImpreciseDateDisplay Value="photo.ShootingDate" />
                                                    </RadzenText>
                                                    <RadzenText Class="rz-color-info">@(Loc["Shooting date"])
                                                    </RadzenText>
                                                </ChildContent>
                                            </RadzenTimelineItem>
                                        }
                                    }
                                    @if (!b.Building.Events.Any())
                                    {
                                        <RadzenTimelineItem PointStyle="PointStyle.Info" PointVariant="Variant.Outlined" PointShadow="0" PointSize="PointSize.Large">
                                            <PointContent>
                                                <RadzenIcon Icon="photo_camera" />
                                            </PointContent>
                                            <ChildContent>
                                                <RadzenText TextStyle="TextStyle.H5" Class="rz-color-info">
                                                    <ImpreciseDateDisplay Value="photo.ShootingDate" />
                                                </RadzenText>
                                                <RadzenText Class="rz-color-info">@(Loc["Shooting date"])
                                                </RadzenText>
                                            </ChildContent>
                                        </RadzenTimelineItem>
                                    }
                                    </Items>
                                </RadzenTimeline>
                                <RadzenRow>                                   
                                    @if(card?.Parts.Any() ?? false)
                                    {
                                        <RadzenColumn>
                                            <RadzenText TextStyle="TextStyle.Overline">@Loc["Design"]</RadzenText>
                                            <RadzenStack>
                                            @foreach(var part in card?.Parts)
                                            {
                                                <RadzenLink Path=@($"/series/{part.Design.Id}")>
                                                    <b>@(part.Design.Name)</b>
                                                </RadzenLink>
                                            }
                                            </RadzenStack>
                                        </RadzenColumn>
                                    }                                    
                                    @if((card?.Categories.Any() ?? false) || (card?.CategoriesOfDesigns.Any() ?? false))
                                    {
                                        <RadzenColumn>
                                            <RadzenText TextStyle="TextStyle.Overline">@Loc["Categories"]</RadzenText>
                                            <RadzenStack Orientation="Orientation.Horizontal">
                                                @foreach (var cat in card.Categories)
                                                {
                                                    <RadzenLink Path=@($"/categories/{cat.Id}")>
                                                        <RadzenBadge Text=@(cat.Name) Style="white-space: normal;" BadgeStyle="BadgeStyle.Info" Shade="Shade.Darker" />
                                                    </RadzenLink>
                                                }
                                                @foreach (var cat in card.CategoriesOfDesigns)
                                                {
                                                    <RadzenLink Path=@($"/categories/{cat.Id}")>
                                                        <RadzenBadge Text=@(cat.Name) Style="white-space: normal;" BadgeStyle="BadgeStyle.Info" Shade="Shade.Lighter" />
                                                    </RadzenLink>
                                                }
                                            </RadzenStack>
                                        </RadzenColumn>
                                    }
                                </RadzenRow>
                            </RadzenAccordionItem>
                        }
                        </Items>
                    </RadzenAccordion>
                    <EditorOnly ShowAlert=false>
                        <RadzenLink Path=@($"/photos/{photo.Id}/edit") Text=@Loc["Edit photo"] Icon="edit" />
                    </EditorOnly>
                    <RadzenRow>
                        <RadzenText TextStyle="TextStyle.Body1" Style="margin: auto">@((MarkupString)photo.Description)</RadzenText>
                    </RadzenRow>
                @if (photo.Galleries.Any())
                {
                            <RadzenRow>
                                <RadzenText TextStyle="TextStyle.Overline">@Loc["Galleries"]</RadzenText>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenStack Orientation="Orientation.Horizontal">
                            @foreach (var gallery in photo.Galleries)
                            {
                                            <RadzenLink Text="@(gallery.Name)" Path=@($"/galleries/{gallery.Id}") />
                            }
                                </RadzenStack>
                            </RadzenRow>
                }

            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Style="margin: auto; padding: 10px; width: 90%; min-height: 30%;">
            <RadzenColumn Width="6">
                <RadzenPanel AllowCollapse=true Collapsed=true>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H5">@Loc["Details"]</RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline">@Loc["Published"]</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1">
                                    <b>
                                        <LocalTime DateTime="photo.PublicationDate" />
                                    </b>
                                </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline">@Loc["License"]</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1">
                                    <RadzenLink Text=@(photo.License.Name) Path=@(photo.License.Link) />
                                </RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline">@Loc["Coordinates and shooting direction"]</RadzenText>
                                <RadzenStack Orientation="Orientation.Horizontal">
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <b>
                                        @(photo.Latitude.ToLatitudeDMS())
                                        </b>
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <b>
                                        @(photo.Longitude.ToLongitudeDMS())
                                        </b>
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <b>
                                        @(photo.Direction)° (@(((double)photo.Direction).ToHeading()))
                                        </b>
                                    </RadzenText>
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenColumn>
                                <ExifDisplay ExifData="photo.Exif" />
                            </RadzenColumn>
                        </RadzenRow>
                    </ChildContent>
                    <SummaryTemplate>
                        <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenText>
                            @Loc["Published"] <b><LocalTime DateTime="photo.PublicationDate" /></b>
                        </RadzenText>
                        <RadzenText>@(photo.License.Name)</RadzenText>
                        </RadzenStack>
                    </SummaryTemplate>
                </RadzenPanel>
            </RadzenColumn>
            <RadzenColumn Width="6">
                <RadzenPanel AllowCollapse=true Collapsed=true>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H5">@Loc["Votes"]</RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                    @if (canVote)
                    {
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Style="width: 100%">
                                    <RadzenButton Icon="thumb_up" ButtonStyle="ButtonStyle.Success" Disabled="!CanUpvote()" Click="Upvote"/>
                                    <RadzenButton Icon="thumb_down" ButtonStyle="ButtonStyle.Danger" Disabled="!CanDownvote()" Click="Downvote"/>
                                </RadzenStack>
                    }
                    @foreach (var kv in votes)
                    {
                                <RadzenRow>
                                    <RadzenColumn Width="10">
                                        <RadzenText>@(kv.Key)</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Width="2">
                                        <RadzenText>@($"{kv.Value:+;-;+}{kv.Value:#;#;0}")</RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                    }
                    </ChildContent>
                    <SummaryTemplate>
                        <RadzenText TextStyle="TextStyle.H5">
                            <span class="rz-color-success"><b>+@(photo.Votes.Upvotes)</b></span>
                            /
                            <span class="rz-color-danger"><b>-@(photo.Votes.Downvotes)</b></span>
                        </RadzenText>
                    </SummaryTemplate>
                </RadzenPanel>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Style="margin: auto; padding: 5px; width: 90%; height: 50%;">
            <RadzenColumn>
                <LeafletMap @ref="map" Style="width: 100%; height: 100%" Center="(photo.Latitude, photo.Longitude)" Zoom=17 CameraMarker="new CameraMarker(photo)"
                BuildingMarkers="photo.BuildingBinds.Select(b => new BuildingMarker(b.Building) { HasPhotos = true }).ToList()">
                </LeafletMap>
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow Style="margin: auto; padding: 5px; width: 100%">
            <CommentView EntityId="photo.Id" EntityType="Photo" />
        </RadzenRow>
}
else
{
        <RadzenAlert Title=@Loc["Photo not found"] AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
        @Loc["Photo with this ID does not exist"]
    </RadzenAlert>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }
    Photo? photo;

    ArchiBaseUser? author;
    ArchiBaseUser? user;

    Dictionary<string, int> votes;

    LeafletMap? map;

    bool canVote = false;

    bool isAdmin = false;

    bool useVerticalTimelines = false;

    protected override async Task OnInitializedAsync()
    {
        user = UserManager.Users.FirstOrDefault(u => u.Id == UserResolverService.GetUser());
        photo = await ModelContext.Photos
        .Include(p => p.BuildingBinds).ThenInclude(b => b.Building).ThenInclude(b => b.Location)
        .Include(p => p.BuildingBinds).ThenInclude(b => b.Building).ThenInclude(b => b.Events)
        .Include(p => p.BuildingBinds).ThenInclude(b => b.Building).ThenInclude(b => b.Cards).ThenInclude(c =>
        c.StreetAddresses).ThenInclude(a => a.Street)
        .Include(p => p.BuildingBinds).ThenInclude(b => b.Building).ThenInclude(b => b.Cards).ThenInclude(c => 
        c.Parts).ThenInclude(p => p.Design).ThenInclude(d => d.Categories)
        .Include(p => p.BuildingBinds).ThenInclude(b => b.Building).ThenInclude(b => b.Cards).ThenInclude(c => 
        c.Categories)
        .Include(p => p.License)
        .Include(p => p.Galleries)
        .AsSplitQuery()
        .FirstOrDefaultAsync(p => p.Id == Id);
        author = await UserManager.FindByIdAsync(photo?.AuthorId.ToString());
        if (user is not null) isAdmin = await UserManager.IsInRoleAsync(user, "Admin");
        if (photo is not null)
        {
            UpdateVoteData();
            canVote = await CanVoteForPhoto();
        }
    }

    void UpdateVoteData()
    {
        var authorIds = photo.Votes?.Values?.Select(v => v.Author) ?? [];
        votes = UserManager.Users
        .Where(u =>
        authorIds.Contains(u.Id)).ToList()
        .ToDictionary(
            u => u.UserName ?? Loc["(unknown)"],
            u => photo.Votes?.Values?.FirstOrDefault(v => v.Author == u.Id)?.VoteValue ?? 0
        );
    }

    async Task<bool> CanVoteForPhoto() => photo?.Status switch
    {
        PhotoStatus.Rejected => false,
        PhotoStatus.Published => ModelContext.ActivePhotos.Where(p => p.AuthorId == UserResolverService.GetUser()).Count() >= 10,
        PhotoStatus.Pending =>
        (await UserManager.GetRolesAsync(await UserManager.FindByIdAsync(UserResolverService.GetUser().ToString())))
        .Any(r => r == "Admin" || r == "Photo Moderator"),
        _ => false
    };

    bool CanUpvote()
    {
        if (user is null) return false;
        var userId = user.Id;
        if (photo is null) return false;
        if (photo.AuthorId == userId) return false;
        if (photo.Votes?.Values?.Any(v => v.Author == userId && v.VoteValue > 0) ?? false) return false;
        return true;
    }

    bool CanDownvote()
    {
        if (user is null) return false;
        var userId = user.Id;
        if (photo is null) return false;
        if (photo.AuthorId == userId) return false;
        if (photo.Votes?.Values?.Any(v => v.Author == userId && v.VoteValue < 0) ?? false) return false;
        return true;
    }

    void Upvote()
    {
        if (user is not null && photo is not null)
        {
            Console.WriteLine("Upvoting...");
            photo.Votes.Values ??= [];
            if (!photo.Votes.Values.Any(v => v.Author == user.Id))
                photo.Votes.Values.Add(new Vote { Author = user.Id, VoteValue = +1 });
            else
                photo.Votes.Values.RemoveAll(v => v.Author == user.Id);
            ModelContext.SaveChanges();
            UpdateVoteData();
            StateHasChanged();
        }
    }

    void Downvote()
    {
        if (user is not null && photo is not null)
        {
            Console.WriteLine("Downvoting...");
            photo.Votes.Values ??= [];
            if (!photo.Votes.Values.Any(v => v.Author == user.Id))
                photo.Votes.Values.Add(new Vote { Author = user.Id, VoteValue = -1 });
            else
                photo.Votes.Values.RemoveAll(v => v.Author == user.Id);
            ModelContext.SaveChanges();
            UpdateVoteData();
            StateHasChanged();
        }
    }

    public PointStyle GetPointStyleByEventType(BuildingEventType eventType) => eventType switch
    {
        BuildingEventType.ConstructionStarted => PointStyle.Success,
        BuildingEventType.ConstructionFinished => PointStyle.Success,
        BuildingEventType.RebuildingStarted => PointStyle.Warning,
        BuildingEventType.RebuildingFinished => PointStyle.Warning,
        BuildingEventType.Abandoned => PointStyle.Dark,
        BuildingEventType.Demolished => PointStyle.Danger,
        _ => PointStyle.Info
    };

    public string GetTextStyleByEventType(BuildingEventType eventType) => eventType switch
    {
        BuildingEventType.ConstructionStarted => "rz-color-success",
        BuildingEventType.ConstructionFinished => "rz-color-success",
        BuildingEventType.RebuildingStarted => "rz-color-warning",
        BuildingEventType.RebuildingFinished => "rz-color-warning",
        BuildingEventType.Abandoned => "rz-color-dark",
        BuildingEventType.Demolished => "rz-color-danger",
        _ => "rz-color-info"
    };

    public string GetIconByEventType(BuildingEventType eventType) => eventType switch
    {
        BuildingEventType.ConstructionStarted => "build",
        BuildingEventType.ConstructionFinished => "check",
        BuildingEventType.RebuildingStarted => "edit",
        BuildingEventType.RebuildingFinished => "check",
        BuildingEventType.Abandoned => "block",
        BuildingEventType.Demolished => "close",
        _ => "block"
    };
}