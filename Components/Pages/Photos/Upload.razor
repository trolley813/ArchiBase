@page "/photos/upload"
@using MetadataExtractor.Formats.Exif
@using Microsoft.EntityFrameworkCore
@using SmartFormat
@using IronSoftware.Drawing
@using MetadataExtractor
@inject NotificationService NotificationService
@inject UserManager<ArchiBaseUser> UserManager
@inject UserResolverService UserResolverService
@inject ModelContext ModelContext
@inject IStringLocalizer<Upload> Loc
@inject IWebHostEnvironment WebHostEnvironment

<ArchibasePageTitle Title=@Loc["Upload photo"]/>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized Context="actx">
            @if (limit > 0)
            {
                <RadzenText TextStyle="TextStyle.H4">@Loc["Photo upload"]</RadzenText>
                <RadzenText TextStyle="TextStyle.Subtitle1">
                    @(Smart.Format(Loc["You can upload {Limit} more photos today."], new { Limit = limit }))
                </RadzenText>
                <RadzenFieldset Text=@Loc["Upload form"]>
                    <RadzenRow>
                        <RadzenColumn>
                            <RadzenCard>
                                <RadzenFileInput @bind-Value="model.File" @bind-FileName="model.FileName" TValue="string"
                                    @bind-FileSize="model.FileSize" class="w-100" ChooseText=@Loc["Select image"]
                                    Change="args => OnPhotoChanged(args)" />
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenColumn>
                        <RadzenRow>
                            <RadzenText TextStyle="TextStyle.Overline">@Loc["EXIF Data"]</RadzenText>
                        </RadzenRow>
                        @if (model.ExifData.PhotoDate is not null)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Photo date"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.PhotoDate)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.Cameraman?.Any() ?? false)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Camera manufacturer"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.Cameraman)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.CameraModel?.Any() ?? false)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Camera model"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.CameraModel)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.Editor?.Any() ?? false)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Photo editor software"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.Editor)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.AName?.Any() ?? false)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Author name"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.AName)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.Copy?.Any() ?? false)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Copyright"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.Copy)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.TV?.Any() ?? false)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Exposure time"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.TV)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.AV?.Any() ?? false)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Aperture"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.AV)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.ISO is not null)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["ISO"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.ISO)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.EV?.Any() ?? false)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Exposure compensation"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.EV)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.FL?.Any() ?? false)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Focal length"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.FL)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.EFL?.Any() ?? false)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Equivalent focal length"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.EFL)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.Flash is not null)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Flash"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.Flash)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.WB is not null)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["White balance"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.WB)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.EMeter is not null)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Exposure metering"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.EMeter)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.SMode is not null)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Shooting mode"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.SMode)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                        @if (model.ExifData.DZoom?.Any() ?? false)
                        {
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Caption">@Loc["Digital zoom"]</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Body1">@(model.ExifData.DZoom)</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                    </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenColumn>
                            <ImpreciseDateInput Value="@model.ShootingDate" />
                        </RadzenColumn>
                        <RadzenColumn>
                            <RadzenLabel Component="NonAuthor" Text=@Loc["I'm not the photo author"] />
                            <RadzenCheckBox Name="NonAuthor" @bind-Value="model.NonAuthor" />
                        </RadzenColumn>
                        <RadzenColumn>
                            <RadzenFormField Text=@Loc["License"]>
                                <RadzenDropDown Data="licenses" @bind-Value="model.License" TextProperty="Name" />
                            </RadzenFormField>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenFieldset Text=@Loc["Buildings"]>
                            <RadzenRow>
                                <RadzenDropDown TValue="Location" Value=@(model.Location) Data="locations"
                                    Change="args => OnLocationChanged(args as Location)" TextProperty="Name" 
                                    AllowFiltering=true FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                                <RadzenButton Icon="add" Text=@Loc["Bind a building"] Size="ButtonSize.Small"
                                    Click="AddBuilding" />
                            </RadzenRow>
                            @for (int index = 0; index < model.Binds.Count; index++)
                            {
                                int i = index;
                                <RadzenRow>
                                    <RadzenDropDown Data="filteredBuildings" @bind-Value=@(model.Binds[i].Building)
                                        TextProperty="Address" ValueProperty="Building" LoadData=@LoadData
                                        AllowFiltering=true FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                                    </RadzenDropDown>
                                    <RadzenLabel Text=@Loc["Main"] Component=@($"IsMain{i}") />
                                    <RadzenCheckBox @bind-Value=@(model.Binds[i].IsMain) Name=@($"IsMain{i}") />
                                    <RadzenText>
                                        @if(model.Binds[i].Building is not null)
                                        {
                                            var text = String.Join(" • ", model.Binds[i].Building.ActualCard?.Parts.Select(p => p.Design.Name) ?? []);
                                            if (text.Length == 0)
                                            {
                                                text = String.Join(" • ", model.Binds[i].Building.ActualCard?.Categories.Select(c => c.Name) ?? []);
                                            }
                                            @(text)
                                        }
                                    </RadzenText>
                                </RadzenRow>
                            }
                        </RadzenFieldset>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenFieldset Text=@Loc["On map"]>
                            <OpenStreetMap @ref="map" OnClick="OnMapClick" Style="height:300px; width:300px" />
                            <RadzenLabel Component="Dir" Text=@Loc["Direction"] />
                            <RadzenNumeric Name="Dir" Min="1" Max="360" Value="model.Direction" TValue="int"
                                Change="args => OnDirectionChange(args)" Format="0 °" />
                            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                                <RadzenButton Size="ButtonSize.ExtraSmall" Text="N" Icon="north"
                                    Click="args => OnDirectionChange(360)" />
                                <RadzenButton Size="ButtonSize.ExtraSmall" Text="NE" Icon="north_east"
                                    Click="args => OnDirectionChange(45)" />
                                <RadzenButton Size="ButtonSize.ExtraSmall" Text="E" Icon="east"
                                    Click="args => OnDirectionChange(90)" />
                                <RadzenButton Size="ButtonSize.ExtraSmall" Text="SE" Icon="south_east"
                                    Click="args => OnDirectionChange(135)" />
                                <RadzenButton Size="ButtonSize.ExtraSmall" Text="S" Icon="south"
                                    Click="args => OnDirectionChange(180)" />
                                <RadzenButton Size="ButtonSize.ExtraSmall" Text="SW" Icon="south_west"
                                    Click="args => OnDirectionChange(225)" />
                                <RadzenButton Size="ButtonSize.ExtraSmall" Text="W" Icon="west"
                                    Click="args => OnDirectionChange(270)" />
                                <RadzenButton Size="ButtonSize.ExtraSmall" Text="NW" Icon="north_west"
                                    Click="args => OnDirectionChange(315)" />
                            </RadzenStack>
                        </RadzenFieldset>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenButton ButtonType="ButtonType.Submit" Text=@Loc["Upload"] Click="UploadPhoto" />
                    </RadzenRow>
                </RadzenFieldset>
            }
            else
            {
                <RadzenAlert AllowClose="false" Title=@Loc["Limit exhausted"] AlertStyle="AlertStyle.Danger"
                    Variant="Variant.Flat" Shade="Shade.Lighter">
                    @Loc["You have exhausted your direct upload limit for today."]
                </RadzenAlert>
            }
        </Authorized>
        <NotAuthorized>
            <RadzenAlert AllowClose="false" Title=@Loc["Unauthorized"] AlertStyle="AlertStyle.Danger"
                Variant="Variant.Flat" Shade="Shade.Lighter">
                @Loc["To upload photos, you must be authorized."]
            </RadzenAlert>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code
{
    ArchiBaseUser? user;
    int limit = 0;

    class BuildingWithAddress
    {
        public Building Building { get; set; }
        public string Address { get; set; }
    }

    class BuildingBindModel
    {
        public Building Building { get; set; }
        public bool IsMain { get; set; } = true;
    }

    class UploadModel
    {
        public string? File { get; set; }
        public string? FileName { get; set; }
        public long? FileSize { get; set; }
        public List<BuildingBindModel> Binds { get; set; } = [];
        public ImpreciseDate ShootingDate { get; set; } = new();

        public Location Location { get; set; }
        public License License { get; set; }
        public bool NonAuthor { get; set; } = false;
        public int Direction { get; set; } = 360;

        public ExifData ExifData { get; set; } = new();

        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    UploadModel model = new();
    List<BuildingWithAddress> buildings, filteredBuildings;
    List<Location> locations;

    List<License> licenses;

    OpenStreetMap map;

    int sizeLimit = 2097152; // 2 MiB

    protected override async Task OnInitializedAsync()
    {
        var userId = UserResolverService.GetUser();
        user = await UserManager.FindByIdAsync(userId.ToString());
        var userPhotosCountToday = ModelContext.Photos.Where(p => p.AuthorId == userId && p.PublicationDate.Date ==
        DateTime.UtcNow.Date).Count();
        limit = Math.Max((user?.DirectUploadLimitOverride - userPhotosCountToday) ?? 0, 0);
        locations = ModelContext.Locations.Where(loc => loc.AllowStreets).OrderBy(loc => loc.Name).ToList();
        licenses = ModelContext.Licenses.ToList();
    }

    public void AddBuilding()
    {
        model.Binds.Add(new());
    }

    public void RemoveBuilding(int index)
    {
        model.Binds.RemoveAt(index);
    }

    public void OnLocationChanged(Location newLocation)
    {
        model.Location = newLocation;
        buildings = ModelContext.Buildings.Where(b => b.Location == newLocation)
        .Include(b => b.Cards)
        .ThenInclude(c => c.StreetAddresses)
        .ThenInclude(a => a.Street)
        .Include(b => b.Cards)
        .ThenInclude(c => c.Categories)
        .Include(b => b.Cards)
        .ThenInclude(c => c.Parts)
        .ThenInclude(p => p.Design)
        .Select(b => new BuildingWithAddress
            {
                Building = b,
                Address = String.Join(" / ", b.Cards.OrderByDescending(c => c.ActualFrom.Date).First().StreetAddresses)
            })
        .AsSplitQuery()
        .ToList();
    }

    public void OnPhotoChanged(string photo)
    {
        if (photo is null) return;
        try
        {
            var p = photo[(photo.IndexOf(",") + 1)..];
            byte[] bytes = Convert.FromBase64String(p);
            if (bytes.Length > sizeLimit) throw new ArgumentOutOfRangeException("File size", $"{bytes.Length} exceeds the limit of {sizeLimit}");
            using (MemoryStream ms = new MemoryStream(bytes))
            {
                var directories = ImageMetadataReader.ReadMetadata(ms);
                var exifIFD0 = directories.OfType<ExifIfd0Directory>().FirstOrDefault();
                foreach(var tag in exifIFD0.Tags)
                {
                    Console.WriteLine(tag);
                }
                var dateTimeTag = exifIFD0?.Tags.Where(t => t.Name == "Date/Time").FirstOrDefault();
                try
                {
                    DateTime photoDate = DateTime.ParseExact(dateTimeTag?.Description ?? "", "yyyy:MM:dd HH:mm:ss", null);
                    model.ShootingDate = new ImpreciseDate { Date = photoDate, Precision = DatePrecision.Full };
                    model.ExifData.PhotoDate = photoDate;
                }
                catch (System.FormatException ex)
                {
                    model.ShootingDate = new ImpreciseDate { Date = DateTime.MinValue, Precision = DatePrecision.None };
                }
                var makeTag = exifIFD0?.Tags.Where(t => t.Name == "Make").FirstOrDefault();
                if (makeTag is not null) model.ExifData.Cameraman = makeTag.Description;
                var modelTag = exifIFD0?.Tags.Where(t => t.Name == "Model").FirstOrDefault();
                if (modelTag is not null) model.ExifData.CameraModel = modelTag.Description;
                var editorTag = exifIFD0?.Tags.Where(t => t.Name == "Software").FirstOrDefault();
                if (editorTag is not null) model.ExifData.Editor = editorTag.Description;
                var authorTag = exifIFD0?.Tags.Where(t => t.Name == "Artist").FirstOrDefault();
                if (authorTag is not null) model.ExifData.AName = authorTag.Description;
                var copyrightTag = exifIFD0?.Tags.Where(t => t.Name == "Copyright").FirstOrDefault();
                if (copyrightTag is not null) model.ExifData.Copy = copyrightTag.Description;
                var expTimeTag = exifIFD0?.Tags.Where(t => t.Name == "Exposure Time").FirstOrDefault();
                if (expTimeTag is not null) model.ExifData.TV = expTimeTag.Description;
                var apertureTag = exifIFD0?.Tags.Where(t => t.Name == "Aperture Value").FirstOrDefault();
                if (apertureTag is not null) model.ExifData.AV = apertureTag.Description;
                var isoTag = exifIFD0?.Tags.Where(t => t.Name == "ISO Speed").FirstOrDefault();
                if (isoTag is not null) model.ExifData.ISO = Int32.Parse(isoTag.Description ?? "0");
                var evTag = exifIFD0?.Tags.Where(t => t.Name == "Exposure Compensation").FirstOrDefault();
                if (evTag is not null) model.ExifData.EV = evTag.Description;
                var flTag = exifIFD0?.Tags.Where(t => t.Name == "Focal Length").FirstOrDefault();
                if (flTag is not null) model.ExifData.FL = flTag.Description;
                var eflTag = exifIFD0?.Tags.Where(t => t.Name == "Focal Length In 35mm Format").FirstOrDefault();
                if (eflTag is not null) model.ExifData.EFL = eflTag.Description;
                var flashTag = exifIFD0?.Tags.Where(t => t.Name == "Flash").FirstOrDefault();
                if (flashTag is not null) model.ExifData.Flash = Convert.ToInt32(flashTag.Description);
                var wbTag = exifIFD0?.Tags.Where(t => t.Name == "White Balance").FirstOrDefault();
                if (wbTag is not null) model.ExifData.WB = Convert.ToInt32(wbTag.Description);
                var emTag = exifIFD0?.Tags.Where(t => t.Name == "Metering Mode").FirstOrDefault();
                if (emTag is not null) model.ExifData.EMeter = Convert.ToInt32(emTag.Description);
                var smTag = exifIFD0?.Tags.Where(t => t.Name == "Exposure Program").FirstOrDefault();
                if (smTag is not null) model.ExifData.SMode = Convert.ToInt32(smTag.Description);
                var dzoomTag = exifIFD0?.Tags.Where(t => t.Name == "Digital Zoom Ratio").FirstOrDefault();
                if (dzoomTag is not null) model.ExifData.DZoom = dzoomTag.Description;
            }

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"{ex.Message}"
                });
            model.File = null;
            model.FileName = null;
            model.FileSize = null;
            model.ExifData = new();
        }
    }

    public void UploadPhoto()
    {
        if (model.File is null) return;
        try
        {
            if (model.License is null) throw new ArgumentNullException("License");
            var p = model.File[(model.File.IndexOf(",") + 1)..];
            byte[] bytes = Convert.FromBase64String(p);
            AnyBitmap bitmap;
            using (MemoryStream ms = new MemoryStream(bytes))
            {
                bitmap = AnyBitmap.FromStream(ms);
            }
            Guid photoId = Guid.NewGuid();
            Photo photo = new Photo
                {
                    Id = photoId,
                    AuthorId = UserResolverService.GetUser(),
                    Exif = model.ExifData,
                    NonAuthor = model.NonAuthor,
                    License = model.License,
                    PublicationDate = DateTime.Now,
                    ShootingDate = model.ShootingDate,
                    Direction = model.Direction,
                    Extension = "jpg",
                    BuildingBinds = model.Binds.Select((b, idx) => new BuildingBind
                    {
                        Building = b.Building,
                        IsMain = b.IsMain,
                        Order = idx + 1
                    }).ToList(),
                    Latitude = model.Latitude,
                    Longitude = model.Longitude,
                    Description = "", // TODO: Description input
                };
            ModelContext.Photos.Add(photo);
            var wwwroot = WebHostEnvironment.WebRootPath;
            System.IO.Directory.CreateDirectory(wwwroot + photo.PhotoDir);
            bitmap.ExportFile(wwwroot + photo.PhotoLink, AnyBitmap.ImageFormat.Jpeg, 95);
            ModelContext.SaveChanges();
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Photo uploaded!",
                    Detail = $"Photo ID: {photoId}"
                });
        }
        catch (Exception e)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"{e.Message}"
                });
        }
    }

    void OnMapClick(Coordinate coordinate)
    {
        map.MarkersList.Clear();
        map.MarkersList.Add(new Marker(coordinate, "/icons/camera.svg", 800, 800, 400, 400)
            {
                Scale = 0.05,
                Rotation = Math.PI / 180.0 * model.Direction
            });
        model.Longitude = coordinate.Longitude;
        model.Latitude = coordinate.Latitude;
    }

    void OnDirectionChange(int newDirection)
    {
        model.Direction = newDirection;
        var marker = map.MarkersList.FirstOrDefault();
        if (marker is not null)
        {
            marker.Rotation = Math.PI / 180.0 * model.Direction;
            marker.UpdateShape();
        }
    }

    void LoadData(LoadDataArgs args)
    {
        var query = buildings.AsQueryable();
        if (!string.IsNullOrEmpty(args.Filter))
        {
            var filters = args.Filter.Split(" ", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
            query = query.Where(b => filters.All(f => b.Address.Contains(f, StringComparison.CurrentCultureIgnoreCase)));
        }
        filteredBuildings = query.ToList();
        InvokeAsync(StateHasChanged);
    }
}
