@page "/photos/upload"
@implements IDisposable
@using MetadataExtractor.Formats.Exif
@using Microsoft.EntityFrameworkCore
@using SmartFormat
@using IronSoftware.Drawing
@using MetadataExtractor
@inject NotificationService NotificationService
@inject UserManager<ArchiBaseUser> UserManager
@inject UserResolverService UserResolverService
@inject UploadLimitService UploadLimitService
@inject ModelContext ModelContext
@inject IStringLocalizer<Upload> Loc
@inject IWebHostEnvironment WebHostEnvironment
@inject NavigationManager NavigationManager

<ArchibasePageTitle Title=@Loc["Upload photo"]/>

<LoadingScreen Loaded=@loaded>
<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized Context="actx">
                @if (directLimit > 0 || limit > 0)
                {
                    <RadzenText TextStyle="TextStyle.H4">@Loc["Photo upload"]</RadzenText>
                    <RadzenSteps >
                        <Steps>
                            <RadzenStepsItem Text=@Loc["Select a photo"]>
                                <RadzenRadioButtonList @bind-Value="useDirectUpload">
                                    <Items>
                                        <RadzenRadioButtonListItem Text=@Loc["Suggest photo for publication"] Value="false" Disabled="limit == 0" />
                                        <RadzenRadioButtonListItem Text=@Loc["Upload photo directly"] Value="true" Disabled="directLimit == 0" />
                                    </Items>
                                </RadzenRadioButtonList>
                                <RadzenText TextStyle="TextStyle.Subtitle1">
                                    @(Smart.Format(Loc["You can upload {Limit} more photos this week."], new { Limit = useDirectUpload ? directLimit : limit }))
                                </RadzenText>
                                <RadzenCard>
                                    <RadzenFileInput @bind-Value="model.File" @bind-FileName="model.FileName" TValue="string"
                                        @bind-FileSize="model.FileSize" class="w-100" ChooseText=@Loc["Select image"]
                                        Change="args => OnPhotoChanged(args)" />
                                </RadzenCard>
                            </RadzenStepsItem>
                            <RadzenStepsItem Text=@Loc["Fill photo info"]>
                                <RadzenRow>
                                    <RadzenColumn>
                                        <ExifDisplay ExifData="model.ExifData" />
                                    </RadzenColumn>
                                </RadzenRow>
                                <RadzenFieldset>
                                    <RadzenRow>
                                        <RadzenColumn>
                                            <ImpreciseDateInput Value="@model.ShootingDate" InitialPrecision="DatePrecision.Full" />
                                        </RadzenColumn>
                                        <RadzenColumn>
                                            <RadzenLabel Component="NonAuthor" Text=@Loc["I'm not the photo author"] />
                                            <RadzenCheckBox Name="NonAuthor" @bind-Value="model.NonAuthor" />
                                        </RadzenColumn>
                                        <RadzenColumn>
                                            <RadzenFormField Text=@Loc["License"]>
                                                <RadzenDropDown Data="licenses" @bind-Value="model.License" TextProperty="Name" />
                                            </RadzenFormField>
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow>
                                        <RadzenColumn>
                                            <RadzenFormField Text=@Loc["Description"]>
                                                <RadzenHtmlEditor @bind-Value="model.Description" />
                                            </RadzenFormField>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenFieldset>
                            </RadzenStepsItem>
                            <RadzenStepsItem Text=@Loc["Bind buildings and set position on map"]>
                                <RadzenFieldset Text=@Loc["Suggested"]>
                                    <RadzenFormField Text=@Loc["Max distance"]>
                                        <RadzenNumeric Min="0" Max="2000" Step="50" @bind-Value="distanceLimit" Format="0 m"/>
                                    </RadzenFormField>
                                    <RadzenFormField Text=@Loc["Shooting angle"]>
                                        <RadzenNumeric Min="0" Max="180" Step="1" @bind-Value="shootingAngle" Format="0 °" />
                                    </RadzenFormField>
                                    <LoadingScreen Loaded=@suggestLoaded>
                                        <RadzenButton Text=@Loc["Suggest buildings"] Disabled="model.Location is null" Click="args => SuggestBuildingBinds(distanceLimit, shootingAngle)"/>
                                    </LoadingScreen>
                                </RadzenFieldset>
                                <RadzenFieldset Text=@Loc["Buildings"]>
                                    <RadzenRow RowGap="10">
                                        <RadzenDropDown TValue="Location" Value=@(model.Location) Data="locations" Placeholder=@Loc["Select a location"]
                                            Change="args => OnLocationChanged(args as Location)" TextProperty="Name" 
                                            AllowFiltering=true FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                                        <RadzenButton Icon="add" Text=@Loc["Bind a building"] Size="ButtonSize.Small"
                                            Click="AddBuilding" />
                                    </RadzenRow>
                                    @for (int index = 0; index < model.Binds.Count; index++)
                                    {
                                        int i = index;
                                            <RadzenRow>
                                                <RadzenColumn Size="6">
                                                    <RadzenDropDown Data="filteredBuildings[i]" Value=@(model.Binds[i].Building.Id) Style="width: 100%" @bind-SearchText="searchTexts[i]" TValue="Guid"
                                                        ValueProperty="Building.Id" LoadData=@(args => LoadData(i, args)) Change="args => SetBind(i, args)" Placeholder=@Loc["Select a building"] FilterPlaceholder=@Loc["Address"]
                                                        AllowFiltering=true FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Close="args => CloseDropDown(i)">
                                                        <Template Context="building">
                                                            <RadzenText>@(string.Join(" / ", building.Addresses))</RadzenText>
                                                            <RadzenText TextStyle="TextStyle.Overline">
                                                            @if (building.Building is not null)
                                                            {
                                                                var b = building.Building as Building;
                                                                var text = String.Join(" • ", b?.ActualCard?.Parts.Select(p => p.Design.Name) ?? []);
                                                                if (text.Length == 0)
                                                                {
                                                                    text = String.Join(" • ", b?.ActualCard?.Categories.Select(c => c.Name) ?? []);
                                                                }
                                                                @(text)
                                                            }
                                                            </RadzenText>
                                                        </Template>
                                                    </RadzenDropDown>
                                                </RadzenColumn>
                                                <RadzenColumn Size="1">
                                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Text" Icon="close" Click="args => RemoveBuilding(i)" />
                                                    <RadzenCheckBox @bind-Value=@(model.Binds[i].IsMain) Name=@($"IsMain{i}") />
                                                    <RadzenLabel Text=@Loc["Main"] Component=@($"IsMain{i}") />
                                                </RadzenColumn>
                                                <RadzenColumn Size="5">
                                                    <RadzenText>
                                                    @*@if (model.Binds[i].Building is not null)
                                                    {
                                                        var text = String.Join(" • ", model.Binds[i].Building.ActualCard?.Parts.Select(p => p.Design.Name) ?? []);
                                                        if (text.Length == 0)
                                                        {
                                                            text = String.Join(" • ", model.Binds[i].Building.ActualCard?.Categories.Select(c => c.Name) ?? []);
                                                        }
                                                        @(text)
                                                    }*@
                                                    </RadzenText>
                                                </RadzenColumn>
                                            </RadzenRow>
                                    }
                                </RadzenFieldset>
                                <RadzenRow>
                                    <RadzenFieldset Text=@Loc["On map"]>
                                        <RadzenRow>
                                            <RadzenFormField Text="Latitude">
                                                <RadzenNumeric ShowUpDown="false" @bind-Value="model.Latitude" />
                                            </RadzenFormField>
                                            <RadzenFormField Text="Longitude">
                                                <RadzenNumeric ShowUpDown="false" @bind-Value="model.Longitude" />
                                            </RadzenFormField>
                                        </RadzenRow>
                                        <RadzenLabel Component="Dir" Text=@Loc["Direction"] />
                                        <RadzenNumeric Name="Dir" Min="1" Max="360" Value="model.Direction" TValue="int"
                                            Change="args => OnDirectionChange(args)" Format="0 °" />
                                        <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                                            <RadzenButton Size="ButtonSize.ExtraSmall" Text="N" Icon="north"
                                                Click="args => OnDirectionChange(360)" />
                                            <RadzenButton Size="ButtonSize.ExtraSmall" Text="NE" Icon="north_east"
                                                Click="args => OnDirectionChange(45)" />
                                            <RadzenButton Size="ButtonSize.ExtraSmall" Text="E" Icon="east"
                                                Click="args => OnDirectionChange(90)" />
                                            <RadzenButton Size="ButtonSize.ExtraSmall" Text="SE" Icon="south_east"
                                                Click="args => OnDirectionChange(135)" />
                                            <RadzenButton Size="ButtonSize.ExtraSmall" Text="S" Icon="south"
                                                Click="args => OnDirectionChange(180)" />
                                            <RadzenButton Size="ButtonSize.ExtraSmall" Text="SW" Icon="south_west"
                                                Click="args => OnDirectionChange(225)" />
                                            <RadzenButton Size="ButtonSize.ExtraSmall" Text="W" Icon="west"
                                                Click="args => OnDirectionChange(270)" />
                                            <RadzenButton Size="ButtonSize.ExtraSmall" Text="NW" Icon="north_west"
                                                Click="args => OnDirectionChange(315)" />
                                        </RadzenStack>
                                    </RadzenFieldset>
                                </RadzenRow>
                            </RadzenStepsItem>
                            <RadzenStepsItem Text=@Loc["Check if everything is OK"]>
                                @{
                                    bool photoUploaded = model.File is not null;
                                    bool licenseSet = model.License is not null;
                                    bool dateSet = model.ShootingDate.Precision != DatePrecision.None;
                                    bool bindsAdded = model.Binds.Count > 0;
                                    bool hasErrors = !photoUploaded || !licenseSet;
                                    bool hasWarnings = !dateSet || !bindsAdded;
                                }
                                <RadzenStack>
                                    @if(photoUploaded)
                                    {
                                        <RadzenText class="rz-color-success" TextStyle="TextStyle.Subtitle2">
                                            <RadzenIcon Icon="check" Style="vertical-align: middle;" />
                                            @Loc["Image file is uploaded"]
                                        </RadzenText>
                                    }
                                    else
                                    {
                                        <RadzenText class="rz-color-danger" TextStyle="TextStyle.Subtitle2">
                                            <RadzenIcon Icon="close" Style="vertical-align: middle;" />
                                            @Loc["Image file is not uploaded"]
                                        </RadzenText>
                                    }
                                    @if(licenseSet)
                                    {
                                        <RadzenText class="rz-color-success" TextStyle="TextStyle.Subtitle2">
                                            <RadzenIcon Icon="check" Style="vertical-align: middle;" />
                                            @Smart.Format(Loc["You have chosen a license {License} for your photo"], new { License = model.License.Name })
                                        </RadzenText>
                                    }
                                    else
                                    {
                                        <RadzenText class="rz-color-danger" TextStyle="TextStyle.Subtitle2">
                                            <RadzenIcon Icon="close" Style="vertical-align: middle;" />
                                            @Loc["You have not chosen a license. Please choose one"]
                                        </RadzenText>
                                    }
                                    @if(dateSet)
                                    {
                                        <RadzenText class="rz-color-success" TextStyle="TextStyle.Subtitle2">
                                            <RadzenIcon Icon="check" Style="vertical-align: middle;" />
                                            @Smart.Format(Loc["You have set the date: {Date} for the photo"], new { Date = model.ShootingDate })
                                        </RadzenText>
                                    }
                                    else
                                    {
                                        <RadzenText class="rz-color-warning" TextStyle="TextStyle.Subtitle2">
                                            <RadzenIcon Icon="warning" Style="vertical-align: middle;" />
                                            @Loc["You have not set a date for the photo"]
                                        </RadzenText>
                                    }
                                    @if(bindsAdded)
                                    {
                                        <RadzenText class="rz-color-success" TextStyle="TextStyle.Subtitle2">
                                            <RadzenIcon Icon="check" Style="vertical-align: middle;" />
                                            @Smart.Format(Loc["You have bound {Count} building(s)"], new { Count = model.Binds.Count })
                                        </RadzenText>
                                    }
                                    else
                                    {
                                        <RadzenText class="rz-color-warning" TextStyle="TextStyle.Subtitle2">
                                            <RadzenIcon Icon="warning" Style="vertical-align: middle;" />
                                            @Loc["You have not bound any buildings"]
                                        </RadzenText>
                                    }
                                </RadzenStack>
                                <RadzenRow>
                                    <RadzenButton ButtonType="ButtonType.Submit" Text=@(hasWarnings ? Loc["Upload anyway"] : Loc["Upload"]) Click="UploadPhoto" Disabled=@hasErrors />
                                </RadzenRow>
                            </RadzenStepsItem>
                        </Steps>
                    </RadzenSteps>
                    <RadzenFieldset>
                        <LeafletMap @ref="map" OnMapClick="OnMapClick" Style="height: 480px; width: 100%; padding: 10px;" Zoom="16" />
                    </RadzenFieldset>
                }
                else
                {
                    <RadzenAlert AllowClose="false" Title=@Loc["Limit exhausted"] AlertStyle="AlertStyle.Danger"
                        Variant="Variant.Flat" Shade="Shade.Lighter">
                        @Loc["You have exhausted your direct upload limit for today."]
                    </RadzenAlert>
                }
        </Authorized>
        <NotAuthorized>
            <RadzenAlert AllowClose="false" Title=@Loc["Unauthorized"] AlertStyle="AlertStyle.Danger"
                Variant="Variant.Flat" Shade="Shade.Lighter">
                    @Loc["To upload photos, you must be authorized."]
            </RadzenAlert>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
</LoadingScreen>

@code
{
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid[]? Binds { get; set; }

    ArchiBaseUser? user;
    int limit = 0, directLimit = 0;

    bool loaded = false;

    bool suggestLoaded = true;

    bool useDirectUpload = true;

    class BuildingWithAddress
    {
        public Building Building { get; set; }
        public List<NamedStreetAddress> Addresses { get; set; }
    }

    class BuildingBindModel
    {
        public Building Building { get; set; }
        public bool IsMain { get; set; } = true;
    }

    class UploadModel
    {
        public string? File { get; set; }
        public string? FileName { get; set; }
        public long? FileSize { get; set; }
        public List<BuildingBindModel> Binds { get; set; } = [];
        public ImpreciseDate ShootingDate { get; set; } = new();

        public Location Location { get; set; }
        public License License { get; set; }
        public bool NonAuthor { get; set; } = false;
        public int Direction { get; set; } = 360;

        public ExifData ExifData { get; set; } = new();

        public double Latitude { get; set; }
        public double Longitude { get; set; }

        public string Description { get; set; } = "";
    }

    UploadModel model = new();
    List<BuildingWithAddress> buildings;
    List<List<BuildingWithAddress>> filteredBuildings = [];
    IQueryable<Location> locations;

    List<License> licenses;

    List<string> searchTexts = [];

    LeafletMap map;

    double distanceLimit = 500, shootingAngle = 90;

    int sizeLimit = 2097152; // 2 MiB

    int maxListSize = 20;

    protected override async Task OnInitializedAsync()
    {
        loaded = false;
        var userId = UserResolverService.GetUser();
        user = await UserManager.FindByIdAsync(userId.ToString());
        var userPhotosCountThisWeek = ModelContext.Photos.Where(p => p.AuthorId == userId &&
        (DateTime.UtcNow.Date - p.PublicationDate.Date).TotalDays < 7).Count();
        limit = Math.Max(UploadLimitService.GetUploadLimit(userId) - userPhotosCountThisWeek, 0);
        directLimit = Math.Max(UploadLimitService.GetDirectUploadLimit(userId) - userPhotosCountThisWeek, 0);
        if (directLimit == 0) useDirectUpload = false;
        locations = ModelContext.Locations.Where(loc => loc.AllowStreets).OrderBy(loc => loc.Name);
        licenses = ModelContext.Licenses.ToList();
        if (Binds is not null && Binds.Length > 0)
        {
            var buildingsToBind = ModelContext.Buildings.Include(b => b.Location).Where(b => Binds.Contains(b.Id)).ToList();
            if (buildingsToBind.Select(b => b.Location).Distinct().Count() > 1)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = "Try to bind buidings from multiple locations",
                        Detail = "Bindings not set"
                    });
            }
            else
            {
                var location = buildingsToBind.Select(b => b.Location).First();
                OnLocationChanged(location);
                model.Binds = buildingsToBind.Select(b => new BuildingBindModel 
                {
                    Building = buildings.FirstOrDefault(ba => ba.Building.Id == b.Id)?.Building, 
                    IsMain = true
                }).ToList();
                model.Binds.ForEach(b => {
                    searchTexts.Add("");
                    filteredBuildings.Add([buildings.FirstOrDefault(ba => ba.Building.Id == b.Building.Id)]);
                });
            }
        }
        loaded = true;
    }

    override protected void OnAfterRender(bool firstRender)
    {
        if (firstRender) UpdateMap();
    }

    public void Dispose()
    {
        filteredBuildings.ForEach(list => list.Clear());
        filteredBuildings.Clear();
        buildings.Clear();
        searchTexts.Clear();
    }

    public void AddBuilding()
    {
        model.Binds.Add(new() { Building = new() { Id = Guid.Empty } });
        searchTexts.Add("");
        filteredBuildings.Add([]);
    }

    public void RemoveBuilding(int index)
    {
        model.Binds.RemoveAt(index);
        if (model.Binds.Count > 0) UpdateMap();
        searchTexts.RemoveAt(index);
        filteredBuildings.RemoveAt(index);
    }

    public void OnLocationChanged(Location newLocation)
    {
        model.Location = newLocation;
        buildings = ModelContext.Buildings.Where(b => b.Location == newLocation)
        .AsNoTracking()
        .Include(b => b.ActualCard)
        .ThenInclude(c => c.Categories)
        .Include(b => b.ActualCard)
        .ThenInclude(c => c.StreetAddresses)
        .ThenInclude(a => a.Street)
        .Include(b => b.ActualCard)
        .ThenInclude(c => c.Parts)
        .ThenInclude(p => p.Design)
        .Join(ModelContext.CardAddressMappings, b => b.ActualCard.Id, m => m.BuildingCardId,
            (b, m) => new BuildingWithAddress
            {
                Building = b,
                Addresses = m.Addresses
            }
        ).ToList();
        if (model.Latitude == 0 && model.Longitude == 0) map?.SetCenter((newLocation.Latitude, newLocation.Longitude));
    }

    public void OnPhotoChanged(string photo)
    {
        if (photo is null) return;
        try
        {
            var p = photo[(photo.IndexOf(",") + 1)..];
            byte[] bytes = Convert.FromBase64String(p);
            if (bytes.Length > sizeLimit) throw new ArgumentOutOfRangeException("File size", $"{bytes.Length} exceeds the limit of {sizeLimit}");
            (model.ExifData, model.ShootingDate, model.Latitude, model.Longitude) = PhotoExifReader.ReadExif(bytes);
            if (model.Latitude != 0 || model.Longitude != 0)
            {
                SetCameraMarkerAndCenter((model.Latitude, model.Longitude));
            }

        }
        catch (ArgumentException ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"{ex.Message}"
                });
            model.File = null;
            model.FileName = null;
            model.FileSize = null;
            model.ExifData = new();
        }
    }

    public void UploadPhoto()
    {
        if (model.File is null) return;
        try
        {
            if (model.License is null) throw new ArgumentNullException("License");
            var p = model.File[(model.File.IndexOf(",") + 1)..];
            byte[] bytes = Convert.FromBase64String(p);
            Guid photoId = Guid.NewGuid();
            Photo photo = new Photo
                {
                    Id = photoId,
                    AuthorId = UserResolverService.GetUser(),
                    Exif = model.ExifData,
                    NonAuthor = model.NonAuthor,
                    License = model.License,
                    PublicationDate = DateTime.UtcNow,
                    ShootingDate = model.ShootingDate,
                    Direction = model.Direction,
                    Extension = Path.GetExtension(model.FileName)?.TrimStart('.') ?? "jpg",
                    BuildingBinds = model.Binds.Select((b, idx) => new BuildingBind
                    {
                        Building = ModelContext.Buildings.FirstOrDefault(bg => bg.Id == b.Building.Id),
                        IsMain = b.IsMain,
                        Order = idx + 1
                    }).ToList(),
                    Latitude = model.Latitude,
                    Longitude = model.Longitude,
                    Description = model.Description,
                    Status = useDirectUpload ? PhotoStatus.Published : PhotoStatus.Pending
                };
            ModelContext.Photos.Add(photo);
            var wwwroot = WebHostEnvironment.WebRootPath;
            System.IO.Directory.CreateDirectory(wwwroot + photo.PhotoDir);
            File.WriteAllBytes(wwwroot + photo.PhotoLink, bytes);
            ModelContext.SaveChanges();
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Photo uploaded!",
                    Detail = $"Photo ID: {photoId}"
                });
            model.Binds = [];
            model.ExifData = new();
            NavigationManager.NavigateTo($"/photos/{photoId}", true);
        }
        catch (ArgumentException e)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"{e.Message}"
                });
        }
    }

    void OnMapClick((double, double) coordinate)
    {
        model.Latitude = coordinate.Item1;
        model.Longitude = coordinate.Item2;
        map.CameraMarker = new CameraMarker { Latitude = model.Latitude, Longitude = model.Longitude, Direction = model.Direction };
        StateHasChanged();
    }

    void SetCameraMarkerAndCenter((double, double) coordinate)
    {
        model.Latitude = coordinate.Item1;
        model.Longitude = coordinate.Item2;
        map.CameraMarker = new CameraMarker { Latitude = model.Latitude, Longitude = model.Longitude, Direction = model.Direction };
        map.SetCenter(coordinate);
        StateHasChanged();
    }

    void OnDirectionChange(int newDirection)
    {
        model.Direction = newDirection;
        map.CameraMarker = new CameraMarker { Latitude = model.Latitude, Longitude = model.Longitude, Direction = model.Direction };
    }

    void LoadData(int index, LoadDataArgs args)
    {
        var query = buildings.AsQueryable();
        if (!string.IsNullOrEmpty(args.Filter))
        {
            var filters = args.Filter.Split(" ", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .Select(f => f.ToLower()).ToArray();
            query = query.Where(
                b => filters.All(
                    f => b.Addresses.Any(
                        a => a.StreetName.ToLower().Contains(f) ||
                             a.HouseNumber.ToLower().Contains(f)
                    )
                )
            );
        }
        filteredBuildings[index] = query.Take(maxListSize).ToList();
        InvokeAsync(StateHasChanged);
    }

    void UpdateMap()
    {
        var binds = model.Binds.Where(b => b.Building != null && b.Building.Id != Guid.Empty);
        if (binds.Count() > 0)
        {
            var avgLat = binds.Select(b => b.Building.Latitude).Average();
            var avgLon = binds.Select(b => b.Building.Longitude).Average();
            if(model.Latitude == 0 && model.Longitude == 0) map?.SetCenter((avgLat, avgLon));
            if (map is not null) map.BuildingMarkers = binds.Select(
                b => new BuildingMarker(buildings.Where(bu => bu.Building.Id == b.Building.Id).First().Building)
            ).ToList();
        }
    }

    void SetBind(int index, object value)
    {
        if (value is null) return;
        var id = value as Guid?;
        model.Binds[index].Building = ModelContext.Buildings.FirstOrDefault(b => b.Id == id);
        UpdateMap();
    }

    void CloseDropDown(int index)
    {
        if (index < filteredBuildings.Count && filteredBuildings[index].Count > 0)
        {
            var id = filteredBuildings[index][0].Building.Id;
            model.Binds[index].Building = ModelContext.Buildings.FirstOrDefault(b => b.Id == id);
        }
    }

    double Distance(double lat1, double lon1, double lat2, double lon2)
    {
        const double earthRadius = 6371000;
        double phi1 = lat1 * Math.PI / 180;
        double phi2 = lat2 * Math.PI / 180;
        double deltaPhi = (lat2 - lat1) * Math.PI / 180;
        double deltaTheta = (lon2 - lon1) * Math.PI / 180;
        double c = 2 * Math.Acos(Math.Sin(phi1) * Math.Sin(phi2) + Math.Cos(phi1) * Math.Cos(phi2) * Math.Cos(deltaTheta));
        return c * earthRadius;
    }

    double Bearing(double lat1, double lon1, double lat2, double lon2)
    {
        double phi1 = lat1 * Math.PI / 180;
        double phi2 = lat2 * Math.PI / 180;
        double theta1 = lon1 * Math.PI / 180;
        double theta2 = lon2 * Math.PI / 180;
        double y = Math.Sin(theta2 - theta1) * Math.Cos(phi2);
        double x = Math.Cos(phi1) * Math.Sin(phi2) -
                Math.Sin(phi1) * Math.Cos(phi2) * Math.Cos(theta2 - theta1);
        double b = Math.Atan2(y, x);
        return (b * 180 / Math.PI + 360) % 360;
    }


    async Task SuggestBuildingBinds(double distanceLimit, double shootingAngle)
    {
        suggestLoaded = false;
        await Task.Yield();
        var suggestedBuildings = buildings.Select(b => b.Building).AsEnumerable()
        .Where(b => Distance(model.Latitude, model.Longitude, b.Latitude, b.Longitude) <= distanceLimit
            && Math.Abs(((Bearing(model.Latitude, model.Longitude, b.Latitude, b.Longitude) - model.Direction) % 360.0 + 180.0) % 360.0 - 180.0) <= shootingAngle / 2)
        .Select(b => b.Id)
        .ToList();
        //Console.WriteLine($"SUGGESTED {suggestedBuildings.Count} buildings");
        model.Binds.Clear();
        searchTexts.Clear();
        filteredBuildings.Clear();
        model.Binds = buildings
        .Where(b => suggestedBuildings.Contains(b.Building.Id))
        .GroupBy(b => b.Building.Id)
        .Select(g => g.FirstOrDefault())
        .Select(b => new BuildingBindModel { Building = b.Building })
        .OrderBy(b => ((Bearing(model.Latitude, model.Longitude, b.Building.Latitude, b.Building.Longitude) - model.Direction) % 360.0 + 180.0) % 360.0 - 180.0)
        .ToList();
        model.Binds.ForEach(b => {
            searchTexts.Add("");
            filteredBuildings.Add([buildings.FirstOrDefault(ba => ba.Building.Id == b.Building.Id)]);
        });
        UpdateMap();
        suggestLoaded = true;
    }
}
