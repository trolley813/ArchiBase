@page "/comments/{id:guid}/edit"
@using Humanizer
@inject ModelContext ModelContext
@inject UserResolverService UserResolverService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Loc

@if (canEdit)
{
    <RadzenText TextStyle="TextStyle.H5">@Loc["Edit comment"]</RadzenText>
    <RadzenTemplateForm Data="comment">
        <RadzenStack>
            <RadzenFormField Text=@Loc["Comment text"]>
                <RadzenHtmlEditor @bind-Value="@(comment.Text)"></RadzenHtmlEditor>
            </RadzenFormField>
            <RadzenFormField>
                <RadzenButton ButtonType="ButtonType.Submit" Text=@Loc["Save comment"] Click="OnSubmit" />
            </RadzenFormField>
        </RadzenStack>
    </RadzenTemplateForm>
}
else
{
    <RadzenText TextStyle="TextStyle.H5">@Loc["Cannot edit comment"]</RadzenText>
    <RadzenAlert AllowClose="false" Title="Comment cannot be edited" AlertStyle="AlertStyle.Danger" Variant="Variant.Flat"
        Shade="Shade.Lighter">
        @Loc["Either you are not the author of the comment, or it was written long time (24 hours or more) ago, or somebody has already responded to it."]
    </RadzenAlert>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }

    Comment? comment;

    bool canEdit;

    override protected void OnInitialized()
    {
        comment = ModelContext.Comments.FirstOrDefault(c => c.Id == Id);
        var userId = UserResolverService.GetUser();
        if (comment is null || userId != comment.AuthorId || (DateTime.UtcNow - comment.PublicationDate) > 24.Hours())
        {
            canEdit = false;
        }
        else
        {
            canEdit = ModelContext.Comments.Where(c => c.EntityId == comment.EntityId).ToList().MaxBy(c => c.PublicationDate)?.Id ==
            comment.Id;
        }
    }

    void OnSubmit()
    {
        try
        {
            ModelContext.SaveChanges();
            string? redirectLink = comment?.EntityType switch
            {
                "DesignCategory" => $"/categories/{comment.EntityId}",
                "Design" => $"/series/{comment.EntityId}",
                "Photo" => $"/photos/{comment.EntityId}",
                "Building" => $"/buildings/{comment.EntityId}",
                _ => null
            };
            if (redirectLink is not null)
            {
                NavigationManager.NavigateTo(redirectLink, true);
            }
        }
        catch (Exception e)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"{e.Message}"
                });
        }
    }
}
