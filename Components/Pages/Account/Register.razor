@page "/register"
@inject NavigationManager NavigationManager
@inject ModelContext ModelContext
@inject UserManager<ArchiBaseUser> UserManager
@inject NotificationService NotificationService
@inject IStringLocalizer<Register> Loc
@inject IConfiguration Configuration

<ArchibasePageTitle Title=@Loc["Register"] />

@if (!Configuration.GetValue<bool>("DisableRegistration", true))
{
    <RadzenCard>
    <RadzenText TextStyle="TextStyle.H4">Register</RadzenText>
    <RadzenTemplateForm TItem="Model" Data="@model" Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
        <RadzenStack>
            <RadzenFormField Text="User name">
                <RadzenTextBox @bind-Value="@model.UserName" Name="UserName" />
                <RadzenRequiredValidator Component="UserName" Text="User name is required" Style="position: absolute" />
            </RadzenFormField>
            <RadzenFormField Text="E-mail address">
                <RadzenTextBox @bind-Value="@model.Email" Name="Email" />
                <RadzenRequiredValidator Component="Email" Text="E-mail is required" Style="position: absolute" />
            </RadzenFormField>
            <RadzenFormField Text="Password">
                <ChildContent>
                    <RadzenTextBox Name="Password" @bind-Value="@model.Password" Visible="@showPassword" />
                    <RadzenPassword Name="Password" @bind-Value="@model.Password" Visible="@(!showPassword)" />
                    <RadzenRequiredValidator Component="Password" Text="Password is required"
                        Style="position: absolute" />
                </ChildContent>
                <End>
                    <RadzenButton Icon="@(showPassword ? "visibility" : "visibility_off")"
                        Click="args => showPassword = !showPassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                </End>
            </RadzenFormField>
            <RadzenFormField Text="Date of birth (optional)">
                <RadzenDatePicker @bind-Value="@model.DateOfBirth" DateFormat="dd.MM.yyyy" YearRange="1900:2024"
                    ShowCalendarWeek AllowClear="true" />
            </RadzenFormField>
            <RadzenFormField Text="Bio (optional)">
                <RadzenHtmlEditor Style="height: 300px" @bind-Value="@model.Bio" />
            </RadzenFormField>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Register"></RadzenButton>
        </RadzenStack>

    </RadzenTemplateForm>
</RadzenCard>
}
else
{
    <RadzenAlert AllowClose="false" Title=@Loc["Registration is temporarily disabled"] AlertStyle="AlertStyle.Danger"
    Variant="Variant.Flat" Shade="Shade.Lighter">
    @Loc["If you have had an account, please use the reset password form"]
    <RadzenLink Text=@Loc["Reset password"] Path="resetpassword" />
</RadzenAlert>
}

@code
{
    class Model
    {
        public string UserName { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public DateTime? DateOfBirth { get; set; }

        public Location? Location { get; set; }

        public string? Bio { get; set; }
    }

    Model model = new();

    bool showPassword = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    async Task OnSubmit(Model data)
    {
        var user = new ArchiBaseUser
            {
                UserName = data.UserName,
                Email = data.Email,
                DateOfBirth = data.DateOfBirth,
                Bio = model.Bio ?? "",
                EmailConfirmed = true,
                PhoneNumberConfirmed = true,
            };

        var result = await UserManager.CreateAsync(user, model.Password);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Registration failed",
                    Detail = $"Error: {result}"
                });
        }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Registration failed",
                Detail = $"Invalid input: {args}"
            });
    }
}