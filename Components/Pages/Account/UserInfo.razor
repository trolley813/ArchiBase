@page "/users/{id:guid}"
@using Microsoft.EntityFrameworkCore
@inject UserManager<ArchiBaseUser> UserManager
@inject ModelContext ModelContext
@inject IStringLocalizer<UserInfo> Loc
@inject ITreeRepository<Location, Guid> TreeRepo

@if (user != null)
{
    <ArchibasePageTitle Title=@Loc["User information"] />
    <LoadingScreen Loaded=@loaded>
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H4">@Loc["User information"] @(user.UserName)</RadzenText>
            @if (!user.IsEnabled)
            {
                <RadzenBadge Text="Disabled account" />
            }

            <RadzenRow>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Username"]</RadzenText>
                    <RadzenText>@(user.UserName)</RadzenText>
                    @if (myLocation is not null)
                    {
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="3">
                            @foreach (var flag in myLocationFlags)
                            {
                                <img src=@($"flags/{flag ?? "xx"}.svg") width="16px" />
                            }
                            <RadzenLink Text="@(myLocation.Name)" Path=@($"locations/{myLocation.Id}") />
                        </RadzenStack>
                    }
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Date of birth"]</RadzenText>
                    <RadzenText>@(user.DateOfBirth?.ToString("dd.MM.yyyy") ?? @Loc["not specified"])</RadzenText>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Roles"]</RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal">
                        @foreach (var role in roles)
                        {
                            <RadzenBadge Text="@Loc[role]" IsPill=true BadgeStyle=@(role.ToBadgeStyle()) />
                        }
                        @if (roles.Count == 0)
                        {
                            <RadzenText>No roles.</RadzenText>
                        }

                    </RadzenStack>
                </RadzenColumn>
                @if (roles.Contains("Local Editor"))
                {
                    <RadzenColumn>
                        <RadzenText TextStyle="TextStyle.Overline">@Loc["Locations"]</RadzenText>
                        <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Gap="8">
                            @foreach (var location in locations)
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="3">
                                    @foreach (var flag in locationFlags[location])
                                    {
                                        <img src=@($"flags/{flag ?? "xx"}.svg") width="16px" />
                                    }
                                    <RadzenLink Text="@(location.Name)" Path=@($"locations/{location.Id}") />
                                </RadzenStack>
                            }
                        </RadzenStack>

                    </RadzenColumn>
                }
            </RadzenRow>
            <RadzenRow Gap="8">
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Bio"]</RadzenText>
                    <RadzenText>@((MarkupString)user.Bio)</RadzenText>
                </RadzenColumn>

            </RadzenRow>
            <RadzenRow Gap="12">
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Photos published"]</RadzenText>
                    <RadzenText TextStyle="TextStyle.H4">
                        <RadzenLink Path=@($"/photos?authorid={user.Id}")>
                            @(photosCount)
                        </RadzenLink>
                    </RadzenText>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="12">
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Overline">@Loc["By location"]</RadzenText>
                    @foreach (var p in photosByLocation.OrderBy(pbl => pbl.Key.Name))
                    {
                        <RadzenText>
                            <RadzenLink Text=@(p.Key.Name) Path=@($"/locations/{p.Key.Id}") />:
                            <RadzenLink Text=@(p.Value.ToString()) Path=@($"/photos?authorid={user.Id}&locid={p.Key.Id}") />
                        </RadzenText>
                    }
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </LoadingScreen>
}
else
{
    <RadzenAlert AllowClose="false" Title="User not found" AlertStyle="AlertStyle.Danger" Variant="Variant.Flat"
    Shade="Shade.Lighter">User with specified ID not found.</RadzenAlert>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }

    bool loaded = false;

    ArchiBaseUser? user;
    List<String> roles = [];
    List<Location> locations = [];
    Dictionary<Location, List<string?>> locationFlags = [];
    List<string?> myLocationFlags = [];
    Location? myLocation;

    Dictionary<Location, int> photosByLocation = [];

    int photosCount = 0;
    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.FindByIdAsync(Id.ToString());
        loaded = false;
        await Task.Yield();
        if (user is not null)
        {
            roles = (await UserManager.GetRolesAsync(user)).ToList() ?? [];
            locations = await ModelContext.Locations.Where(loc => user.Locations.Contains(loc.Id)).ToListAsync();
            myLocation = await ModelContext.Locations.FirstOrDefaultAsync(loc => loc.Id == user.MyLocation);
            if (myLocation is not null)
            {
                myLocationFlags = (await TreeRepo.GetPathFromRootAsync(myLocation))
                .Select(loc => loc.Flag).Where(f => f is not null && f != "xx").ToList();
                myLocationFlags.Add(myLocation.Flag);
            }
            foreach (var loca in locations)
            {
                locationFlags[loca] = (await TreeRepo.GetPathFromRootAsync(loca))
                .Select(loc => loc.Flag).Where(f => f is not null && f != "xx").ToList();
                locationFlags[loca].Add(loca.Flag);
            }
            photosCount = await ModelContext.ActivePhotos.Where(p => p.AuthorId == Id).CountAsync();
            photosByLocation = await ModelContext.PhotoLocationMappings
            .Include(m => m.Photo)
            .Include(m => m.Location)
            .Where(m => !m.Photo.IsHidden && m.Photo.Status == PhotoStatus.Published && m.Photo.AuthorId == Id)
            .GroupBy(m => m.Location)
            .ToDictionaryAsync(g => g.Key, g => g.Count());

        }
        loaded = true;
        await base.OnInitializedAsync();
    }
}