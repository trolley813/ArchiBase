@page "/account/login"
@using Microsoft.AspNetCore.Authentication
@inject NavigationManager NavigationManager
@inject UserManager<ArchiBaseUser> UserManager
@inject SignInManager<ArchiBaseUser> SignInManager
@inject ILogger<ActualLogin> Log
@inject StateContainer StateContainer

@if (HttpContext is null)
{
    <RadzenText>Logging in...</RadzenText>
}
else
{
    <RadzenText>You have successfully logged in. Redirecting back to home page...</RadzenText>
}

@code
{
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid Key { get; set; } = new();


    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private LoginModel loginModel;

    protected override async Task OnParametersSetAsync()
    {
        if (HttpContext is null)
        {
            Log.LogInformation("Refreshing");
            NavigationManager.Refresh(forceReload: true);
        }
        else
        {
            Log.LogInformation("Loaded with HttpContext");
            loginModel = StateContainer[Key];
            await LoginUser(loginModel);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await base.OnAfterRenderAsync(firstRender);
    }
    protected override async Task OnInitializedAsync()
    {
        //if (HttpMethods.IsGet(HttpContext.Request.Method))
        //{
        // await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        //}
    }

    private async Task LoginUser(LoginModel model)
    {
        SignInResult? result = await SignInManager.PasswordSignInAsync(model.Username, model.Password, model.RememberMe, false);
        if (result.Succeeded)
        {
            Log.LogInformation("Login success!");
            NavigationManager.NavigateTo("/", true);
        }
        else
        {
            Log.LogInformation("Login failed!");
            NavigationManager.NavigateTo("/login?loginfailed=true", true);
        }
    }
}