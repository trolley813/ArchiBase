@page "/admin/users"
@inject UserManager<ArchiBaseUser> UserManager
@inject RoleManager<ArchiBaseRole> RoleManager
@inject ModelContext ModelContext
@inject UsersContext UsersContext
@inject IStringLocalizer<ManageUsers> Loc

<ArchibasePageTitle Title=@Loc["Manage users"] />

<AdminOnly AlertText="To access admin page, you must be logged in as admin.">
    @if (dataLoaded)
    {
        <RadzenText TextStyle="TextStyle.H3">Manage users</RadzenText>
        <RadzenDataGrid Data="users" AllowPaging=true AllowSorting=true AllowFiltering=true PageSize="50" ShowPagingSummary=true>
            <Columns>
                <RadzenDataGridColumn Title="Username" Property="UserName" Sortable=true></RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Date of birth" Property="DateOfBirth"
                    Sortable=true FormatString="{0:dd.MM.yyyy}" />
                <RadzenDataGridColumn Title="Admin?" Width="10%">
                    <Template Context="user">
                        <RadzenCheckBox TValue="bool" Value="@(userRoles[user].Admin)"
                            Change="args => SetAdmin(user, args)" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Editor?" Width="10%">
                    <Template Context="user">
                        <RadzenCheckBox TValue="bool" Value="@(userRoles[user].Editor)"
                            Change="args => SetEditor(user, args)" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Local Editor?" Width="10%">
                    <Template Context="user">
                        <RadzenCheckBox TValue="bool" Value="@(userRoles[user].LocalEditor)"
                            Change="args => SetLocalEditor(user, args)" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Enabled?">
                    <Template Context="user">
                        @if (user.IsEnabled)
                        {
                            <RadzenText class="rz-color-success-dark">User is enabled.
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Disable"
                                    Click="args => user.IsEnabled = false" />
                            </RadzenText>

                        }
                        else
                        {
                            <RadzenText class="rz-color-danger-dark">User is disabled.
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Text="Enable"
                                    Click="args => user.IsEnabled = true" />
                            </RadzenText>

                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Locations to edit">
                    <Template Context="user">
                        @if (user.Locations.Count > 0)
                        {
                            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                            @foreach (var locId in user.Locations)
                            {
                                <RadzenLink Path=@($"/locations/{locId}") 
                                Text=@(locations.FirstOrDefault(loc => loc.Id == locId)?.Name) />
                            }
                            </RadzenStack>
                        }
                        else
                        {
                            <RadzenText>No locations.</RadzenText>
                        }
                        <RadzenLink Path=@($"/admin/user/{user.Id}/access") Text="Manage" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
    else
    {
        <RadzenText TextStyle="TextStyle.H4">Loading data...</RadzenText>
    }
</AdminOnly>

@code
{
    List<ArchiBaseUser> users = [];

    class Roles
    {
        public bool Admin { get; set; }
        public bool Editor { get; set; }
        public bool LocalEditor { get; set; }
    }
    Dictionary<ArchiBaseUser, Roles> userRoles = [];

    IEnumerable<Location> locations = [];

    bool dataLoaded = false;
    protected override async Task OnInitializedAsync()
    {
        users = UserManager.Users.ToList().OrderBy(u => u.UserName,
        StringComparison.OrdinalIgnoreCase.WithNaturalSort()).ToList();
        var admins = await UserManager.GetUsersInRoleAsync("Admin");
        var editors = await UserManager.GetUsersInRoleAsync("Editor");
        var localEditors = await UserManager.GetUsersInRoleAsync("Local Editor");
        foreach (var user in users)
        {
            userRoles[user] = new()
                {
                    Admin = admins.Contains(user),
                    Editor = editors.Contains(user),
                    LocalEditor = localEditors.Contains(user),
                };
        }
        locations = ModelContext.Locations.ToList();
        dataLoaded = true;
        await base.OnInitializedAsync();
    }

    public async Task SetAdmin(ArchiBaseUser user, bool value)
    {
        if (value)
        {
            await UserManager.AddToRoleAsync(user, "Admin");
        }
        else
        {
            await UserManager.RemoveFromRoleAsync(user, "Admin");
        }
        userRoles[user].Admin = value;
    }

    public async Task SetEditor(ArchiBaseUser user, bool value)
    {
        if (value)
        {
            await UserManager.AddToRoleAsync(user, "Editor");
        }
        else
        {
            await UserManager.RemoveFromRoleAsync(user, "Editor");
        }
        userRoles[user].Editor = value;
    }

    public async Task SetLocalEditor(ArchiBaseUser user, bool value)
    {
        if (value)
        {
            await UserManager.AddToRoleAsync(user, "Local Editor");
        }
        else
        {
            await UserManager.RemoveFromRoleAsync(user, "Local Editor");
        }
        userRoles[user].LocalEditor = value;
    }

    
}