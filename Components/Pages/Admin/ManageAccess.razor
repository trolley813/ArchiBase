@page "/admin/user/{id:guid}/access"
@using SmartFormat
@inject UserManager<ArchiBaseUser> UserManager
@inject RoleManager<ArchiBaseRole> RoleManager
@inject ModelContext ModelContext
@inject UsersContext UsersContext
@inject IStringLocalizer<ManageAccess> Loc

<ArchibasePageTitle Title=@(Smart.Format(Loc["Managing access for user: {UserName}"], new {UserName =
    user?.UserName})) />
<AdminOnly AlertText="To access admin page, you must be logged in as admin.">
    @if (user != null)
    {
        <RadzenText TextStyle="TextStyle.H4">
            @(Smart.Format(Loc["Managing access for user: {UserName}"], new
            {
                UserName =
                user?.UserName
            }))
        </RadzenText>
        <RadzenStack>
            <RadzenFormField Text=@Loc["Locations available to edit"]>
                <RadzenDropDown @bind-Value="user.Locations" Data="locations" ValueProperty="Id" TextProperty="Name" Chips=true
                    Multiple=true AllowFiltering=true FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    MaxSelectedLabels="20">
                </RadzenDropDown>
            </RadzenFormField>
            <RadzenButton Text="Save" Click="args => Save()"/>
        </RadzenStack>
    }
</AdminOnly>



@code
{
    [Parameter]
    public Guid Id { get; set; }

    public ArchiBaseUser? user { get; set; }

    public List<Location> locations { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = UsersContext.Users.FirstOrDefault(u => u.Id == Id);
        locations = ModelContext.Locations.ToList();
    }

    public void Save()
    {
        try
        {

            UsersContext.SaveChanges();
        }
        catch (Exception e)
        {
            ///
        }
    }
}
