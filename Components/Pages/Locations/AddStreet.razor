@page "/locations/addstreet"
@using ArchiBase.Components.Utils
@using Microsoft.EntityFrameworkCore
@inject ModelContext ModelContext
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject LocalEditorService LocalEditorService
@inject UserResolverService UserResolverService
@inject UserManager<ArchiBaseUser> UserManager


<EditorOnly Location=@LocId>
    <RadzenFormField Text="Name">
        <RadzenTextBox @bind-Value="@name" />
    </RadzenFormField>
    <RadzenFormField Text="Location">
        <RadzenDropDown @bind-Value="@location" Data="locations" TextProperty="Name" AllowFiltering=true
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            Change="args => OnLocationChanged(args as Location)">
        </RadzenDropDown>
    </RadzenFormField>
    <RadzenFormField Text="Actual street (optional)">
        <RadzenDropDown @bind-Value="@actualStreet" Data="streets" TextProperty="Name" AllowFiltering=true
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear=true
            Change="args => OnActualStreetChanged(args as Street)">
        </RadzenDropDown>
    </RadzenFormField>
    <RadzenText TextStyle="TextStyle.H5">Add Buildings</RadzenText>
    <RadzenButton Text="Add Building" Icon="add_circle_outline" Click="@AddBuildingEntry"
        Disabled="actualStreet is not null" />
    <RadzenFieldset>
        @foreach (var buildingEntry in buildingsToAdd.Select((item, index) => (Item: item, Index: index)))
        {
            <RadzenRow>
                <RadzenColumn>
                    <RadzenFormField Text="Number">
                        <RadzenTextBox @bind-Value="buildingEntry.Item.Number" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField Text="Design">
                        <RadzenDropDown Data="designs" AllowFiltering=true @bind-Value="buildingEntry.Item.Design"
                            TextProperty="Name" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField Text="Categories">
                        <RadzenDropDown Data="categories" AllowFiltering=true Multiple=true
                            @bind-Value="buildingEntry.Item.Categories" TextProperty="Name" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField Text="Built">
                        <RadzenNumeric @bind-Value="buildingEntry.Item.ConstructionYear" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField Text="Demolished">
                        <RadzenNumeric @bind-Value="buildingEntry.Item.DemolitionYear" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField Text="Latitude">
                        <RadzenNumeric @bind-Value="buildingEntry.Item.Latitude" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField Text="Longitude">
                        <RadzenNumeric @bind-Value="buildingEntry.Item.Longitude" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField>
                        <RadzenButton Icon="pin_drop" Text="On map" Click="args => OpenMapDialog(buildingEntry.Item)" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField>
                        <RadzenButton Icon="delete" Click="args => RemoveBuildingEntry(buildingEntry.Index)" />
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenRow>
        }
    </RadzenFieldset>
    <RadzenButton Text="Add street" Icon="add_circle_outline" Click="@Add" />
</EditorOnly>



@code
{
    List<Location> locations;
    List<Design> designs;
    List<DesignCategory> categories;

    List<Street> streets;

    Location? location;

    Street? actualStreet;

    public class BuildingInputModel
    {
        public string Number { get; set; } = "";
        public Design? Design { get; set; }

        public List<DesignCategory> Categories { get; set; } = [];
        public int? ConstructionYear { get; set; }
        public int? DemolitionYear { get; set; }

        public double? Latitude { get; set; }
        public double? Longitude { get; set; }
    }

    List<BuildingInputModel> buildingsToAdd = [];
    protected override void OnInitialized()
    {
        locations = ModelContext.Locations.Where(loc => loc.AllowStreets).ToList();
        designs = ModelContext.Designs.ToList();
        categories = ModelContext.DesignCategories.ToList();
        location = locations.FirstOrDefault(loc => loc.Id == LocId);
        streets = ModelContext.Streets.Include(s => s.Location).Where(s => s.Location == location).ToList();
    }

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? LocId { get; set; }

    string name = "";

    public void AddBuildingEntry()
    {
        buildingsToAdd.Add(new());
    }

    public void RemoveBuildingEntry(int index)
    {
        buildingsToAdd.RemoveAt(index);
    }

    public async Task Add()
    {
        var user = UserManager.Users.FirstOrDefault(u => u.Id == UserResolverService.GetUser());
        var isEditor = user is not null && (await UserManager.IsInRoleAsync(user, "Admin") || await
        UserManager.IsInRoleAsync(user, "Editor"));
        if (!isEditor && !LocalEditorService.CanEdit(user, location?.Id ?? default))
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = "As a local editor, you cannot add a street to this location."
                });
            return;
        }
        if (buildingsToAdd.Any(b => b.Design is null && !b.Categories.Any()))
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"Please specify design or category for all the buildings added."
                });
            return;
        }
        Street street = new()
            {
                Id = Guid.NewGuid(),
                Location = location,
                Name = name,
                ActualStreet = actualStreet
            };
        ModelContext.Streets.Add(street);
        foreach (var buildingEntry in buildingsToAdd)
        {
            List<BuildingEvent> events = [];
            if (buildingEntry.ConstructionYear is int cYear) events.Add(new BuildingEvent
                {
                    Date = new() { Date = new DateTime(cYear, 1, 1), Precision = DatePrecision.YearOnly },
                    Type = BuildingEventType.ConstructionFinished
                });
            if (buildingEntry.DemolitionYear is int dYear) events.Add(new BuildingEvent
                {
                    Date = new() { Date = new DateTime(dYear, 1, 1), Precision = DatePrecision.YearOnly },
                    Type = BuildingEventType.Demolished
                });
            BuildingCard card = new()
                {
                    ActualFrom = events.FirstOrDefault(e => e.Type == BuildingEventType.ConstructionFinished)?.Date.Clone() ?? new(),
                    Name = name,
                    Parts = buildingEntry.Design is not null ? [new BuildingPart() { Design = buildingEntry.Design }] : [],
                    Categories = buildingEntry.Categories,
                    StreetAddresses = [new StreetAddress { Street = street, HouseNumber = buildingEntry.Number }],
                    Builder = "",
                    Customer = "",
                };
            Building building = new()
                {
                    Cards = [card],
                    Events = events,
                    Latitude = buildingEntry.Latitude ?? 0.0,
                    Longitude = buildingEntry.Longitude ?? 0.0,
                    Description = String.Empty,
                    Location = location
                };
            ModelContext.Add(building);
        }
        try
        {
            await ModelContext.SaveChangesAsync();
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Street added",
                    Detail = $"ID: {street.Id}"
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"{ex.Message} {ex.InnerException?.Message}"
                });
        }
    }

    public async Task OpenMapDialog(BuildingInputModel model)
    {
        var result = await DialogService.OpenAsync<MapDialog>("Select the location on map",
        new Dictionary<string, object> { ["Model"] = model, ["Location"] = location });
    }

    void OnLocationChanged(Location? newLocation)
    {
        if (newLocation is not null)
        {
            location = newLocation;
            streets = ModelContext.Streets.Include(s => s.Location).Where(s => s.Location == location).ToList();
        }
    }

    void OnActualStreetChanged(Street? street)
    {
        if (street is not null)
        {
            buildingsToAdd.Clear();
        }
    }
}