@page "/locations/addstreet"
@using ArchiBase.Components.Utils
@inject ModelContext ModelContext
@inject NotificationService NotificationService


<EditorOnly>
    <RadzenFormField Text="Name">
        <RadzenTextBox @bind-Value="@name" />
    </RadzenFormField>
    <RadzenFormField Text="Location">
        <RadzenDropDown @bind-Value="@location" Data="Locations" TextProperty="Name">
        </RadzenDropDown>
    </RadzenFormField>
    <RadzenText TextStyle="TextStyle.H5">Add Buildings</RadzenText>
    <RadzenButton Text="Add Building" Icon="add_circle_outline" Click="@AddBuildingEntry" />
    <RadzenFieldset>
        @foreach (var buildingEntry in buildingsToAdd.Select((item, index) => (Item: item, Index: index)))
        {
            <RadzenRow>
                <RadzenColumn>
                    <RadzenFormField Text="Number">
                        <RadzenTextBox @bind-Value="buildingEntry.Item.Number" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField Text="Design">
                        <RadzenDropDown Data="Designs" AllowFiltering=true @bind-Value="buildingEntry.Item.Design"
                            TextProperty="Name" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField Text="Built">
                        <RadzenNumeric @bind-Value="buildingEntry.Item.ConstructionYear" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField Text="Demolished">
                        <RadzenNumeric @bind-Value="buildingEntry.Item.DemolitionYear" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField Text="Latitude">
                        <RadzenNumeric @bind-Value="buildingEntry.Item.Latitude" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField Text="Longitude">
                        <RadzenNumeric @bind-Value="buildingEntry.Item.Longitude" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField>
                        <RadzenButton Icon="pin_drop" Text="On map" Disabled=true />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenFormField>
                        <RadzenButton Icon="delete" Click="args => RemoveBuildingEntry(buildingEntry.Index)" />
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenRow>
        }
    </RadzenFieldset>
    <RadzenButton Text="Add street" Icon="add_circle_outline" Click="@Add" />
</EditorOnly>



@code
{
    IEnumerable<Location> Locations { get; set; }
    IEnumerable<Design> Designs { get; set; }

    Location? location;

    class BuildingInputModel
    {
        public string Number { get; set; } = "";
        public Design? Design { get; set; }
        public int? ConstructionYear { get; set; }
        public int? DemolitionYear { get; set; }

        public double? Latitude { get; set; }
        public double? Longitude { get; set; }
    }

    List<BuildingInputModel> buildingsToAdd = [];
    protected override void OnInitialized()
    {
        Locations = ModelContext.Locations;
        Designs = ModelContext.Designs;
        location = Locations.FirstOrDefault(loc => loc.Id == LocId);
    }

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? LocId { get; set; }

    string name = "";

    public void AddBuildingEntry()
    {
        buildingsToAdd.Add(new());
    }

    public void RemoveBuildingEntry(int index)
    {
        buildingsToAdd.RemoveAt(index);
    }

    public void Add()
    {
        if (buildingsToAdd.Any(b => b.Design is null))
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"Please specify design or category for all the buildings added."
                });
            return;
        }
        Street street = new()
            {
                Id = Guid.NewGuid(),
                Location = location,
                Name = name
            };
        ModelContext.Streets.Add(street);
        foreach (var buildingEntry in buildingsToAdd)
        {
            List<BuildingEvent> events = [];
            if (buildingEntry.ConstructionYear is int cYear) events.Add(new BuildingEvent
                {
                    Date = new() { Date = new DateTime(cYear, 1, 1), Precision = DatePrecision.YearOnly },
                    Type = BuildingEventType.ConstructionFinished
                });
            if (buildingEntry.DemolitionYear is int dYear) events.Add(new BuildingEvent
                {
                    Date = new() { Date = new DateTime(dYear, 1, 1), Precision = DatePrecision.YearOnly },
                    Type = BuildingEventType.Demolished
                });
            BuildingCard card = new()
                {
                    ActualFrom = events.FirstOrDefault(e => e.Type == BuildingEventType.ConstructionFinished)?.Date.Clone() ?? new(),
                    Name = name,
                    Design = buildingEntry.Design,
                    StreetAddresses = [new StreetAddress { Street = street, HouseNumber = buildingEntry.Number }]
                };
            Building building = new()
                {
                    Cards = [card],
                    Events = events,
                    Latitude = buildingEntry.Latitude ?? 0.0,
                    Longitude = buildingEntry.Longitude ?? 0.0,
                    Description = String.Empty,
                    Location = location
                };
            ModelContext.Add(building);
        }
        try
        {
            ModelContext.SaveChanges();
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Street added",
                    Detail = $"ID: {street.Id}"
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"{ex.Message} {ex.InnerException?.Message}"
                });
        }
    }
}