@page "/locations/{id:guid?}"
@using Microsoft.EntityFrameworkCore
@inject ModelContext ModelContext
@inject UsersContext UsersContext
@inject IStringLocalizer<Index> Loc
@inject ITreeRepository<Location, Guid> TreeRepo
@inject ThumbnailService ThumbnailService
@inject IJSRuntime JSRuntime

<LoadingScreen Loaded=@loaded>
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text=@Loc["Locations"] Path="/locations" />
        @foreach (Location loc in HierarchyPath)
        {
            <RadzenBreadCrumbItem Text="@(loc.Name)" Path=@($"/locations/{loc.Id}") />
        }
        @if (location != null)
        {
            <RadzenBreadCrumbItem Text=@Loc["Add"] Path=@($"locations/add?parentid={location.Id}")
                Icon="add_circle_outline" />
        }
        else
        {
            <RadzenBreadCrumbItem Text=@Loc["Add"] Path=@($"locations/add") Icon="add_circle_outline" />
        }

    </RadzenBreadCrumb>

    @if (location != null)
    {
        <ArchibasePageTitle Title=@(location.Name) />
        <RadzenRow>
            <img src=@($"flags/{location.Flag ?? "xx"}.svg") width="48px" />
            <RadzenText TextStyle="TextStyle.H3">@(location.Name)</RadzenText>
        </RadzenRow>
        <RadzenRow>
            @{
                var localEditorText = LocalEditors.Count switch
                {
                    0 => Loc["No local editors."],
                    1 => Loc["Local editor:"],
                    _ => Loc["Local editors:"],
                };
            }
            <RadzenText>@localEditorText</RadzenText>
            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Gap="8">
                @foreach (var editor in LocalEditors)
                {
                    <RadzenLink Text=@(editor.UserName) Path=@($"/users/{editor.Id}") />
                }
            </RadzenStack>
        </RadzenRow>
        <RadzenRow>
            <RadzenLink Path=@($"locations/{Id}/map") Text=@Loc["Large map"] Icon="map" Target="_blank" />
        </RadzenRow>
        <RadzenRow>
            <RadzenLink Path=@($"locations/{Id}/edit") Text=@Loc["Edit"] Icon="edit" Target="_blank" />
            <RadzenLink Path=@($"locations/{Id}/delete") Text=@Loc["Delete"] Icon="delete" Target="_blank" />
        </RadzenRow>

        <RadzenRow>

            <RadzenColumn SizeLG="6" SizeSM="12">
                <LeafletMap @ref="map" Style="height: 480px; width: 640px; max-width: 100%;"
                    Zoom="ChildLocations.Count > 0 ? 8 : 10"
                    Center="(avgLat ?? location.Latitude, avgLon ?? location.Longitude)"
                    PrincipalMarker="new PrincipalMarker { Latitude = location.Latitude, Longitude = location.Longitude }"
                    SublocationMarkers="ChildLocations.Select(loc => new SublocationMarker(loc)).ToList()"
                    OnSublocationMarkerClick="args => OpenChildLocation(args)">
                </LeafletMap>
            </RadzenColumn>

            <RadzenColumn SizeLG="6" SizeSM="12">
                <RadzenText>@((MarkupString)(location?.Description ?? "<i>(no description)</i>"))</RadzenText>
            </RadzenColumn>


            @if (ChildLocations.Any())
            {
                <RadzenColumn SizeLG="6" SizeSM="12">
                    <RadzenText TextStyle="TextStyle.DisplayH5">@Loc["Sub-locations"]</RadzenText>


                    <RadzenDataGrid Data="ChildLocations.OrderBy(loc => loc.Name)" Density="Density.Compact">
                        <Columns>
                            <RadzenDataGridColumn Title=@Loc["Name"] Width="80%">
                                <Template Context="loc">
                                    <RadzenStack Orientation="Orientation.Horizontal" Style="white-space: pre-wrap;">
                                        <img src=@($"flags/{loc.Flag ?? "xx"}.svg") width="24px" />
                                        <RadzenLink Text="@(loc.Name)" Path=@($"/locations/{loc.Id}") />
                                    </RadzenStack>

                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title=@Loc["Count"] Width="20%">
                                <Template Context="loc">
                                    <RadzenText>@(SublocationCounts.GetValueOrDefault(loc, 0))</RadzenText>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenColumn>
            }


        </RadzenRow>

        if (recentPhotos.Any())
        {
            <RadzenText TextStyle="TextStyle.H4" class="mx-4 my-4">@Loc["Recent photos"]</RadzenText>
            <RadzenRow>
                <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                    @foreach (var photo in recentPhotos)
                    {
                        <RadzenLink Path=@($"/photos/{photo.Id}")>
                            <RadzenImage Path=@($"data:image/webp;base64,{ThumbnailService.GetThumbnail(photo)}")
                                Style="height:200px;max-width:400px" />
                        </RadzenLink>
                    }
                </RadzenStack>
            </RadzenRow>
        }
        else
        {
            <RadzenText TextStyle="TextStyle.H4" class="mx-4 my-4">@Loc["No recent photos"]</RadzenText>
        }

        <RadzenLink Path=@($"/photos?locid={location.Id}") Text=@Loc["Show all photos"] Icon="select_all" />

        if (galleries.Any())
        {
            <RadzenText TextStyle="TextStyle.DisplayH5">@Loc["Galleries"]</RadzenText>
            <RadzenDataList Data="@galleries" Density="Density.Compact" WrapItems=true>
                <Template Context="gallery">
                    <RadzenText TextStyle="TextStyle.H6" Style="width: max(25%, 300px); max-width: 100%;">
                        <RadzenLink Text="@(gallery.Name)" Path=@($"/galleries/{gallery.Id}") />
                    </RadzenText>
                </Template>
            </RadzenDataList>

        }

        if (location.AllowStreets)
        {
            <RadzenText TextStyle="TextStyle.DisplayH5">@Loc["Streets"]</RadzenText>
            <RadzenRow>
                <RadzenLabel Component="ShowActualOnly" Text=@Loc["Show actual streets only"] />
                <RadzenCheckBox Name="ShowActualOnly" @bind-Value="showActualStreetsOnly" />
                <RadzenLink Text=@Loc["Add Street"] Path=@($"locations/addstreet?locid={location.Id}")
                    Icon="add_circle_outline" />
                <RadzenLink Text=@Loc["Add Building"] Path=@($"buildings/add?locid={location.Id}") Icon="add_circle_outline" />
                <RadzenLink Text=@Loc["List of all buildings in the location"] Path=@($"locations/{location.Id}/buildings")
                    Icon="list" />
                <RadzenLink Text=@Loc["Stats by designs and categories"] Path=@($"locations/{location.Id}/designstats")
                    Icon="analytics" />
                <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                    <RadzenButton Text=@Loc["Show all"] Click="args => currentStartingChar = null"
                        Variant="currentStartingChar == null ? Variant.Outlined : Variant.Filled" />
                    @foreach (var c in startingChars)
                    {
                        <RadzenButton Text=@(c.ToString()) Click="args => currentStartingChar = c"
                            Variant="currentStartingChar == c ? Variant.Outlined : Variant.Filled" />
                    }
                </RadzenStack>

                <RadzenDataList WrapItems=true
                    Data="streets.Where(s => (s.Street.IsActual || !showActualStreetsOnly) && (s.StartsWith == currentStartingChar || currentStartingChar == null))">
                    <Template Context="street">
                        <RadzenText TextStyle="TextStyle.H6" Style="width: max(25%, 300px); max-width: 100%;">
                            @if(street.Street.ActualStreet is null)
                            {
                                <RadzenLink Text="@(street.Street.Name)" Path="@($"buildings/by-street/{street.Street.Id}")" />
                            }
                            else
                            {
                                <i><RadzenLink Text="@(street.Street.Name)" Path="@($"buildings/by-street/{street.Street.Id}")" /></i>
                            }
                        </RadzenText>
                    </Template>
                </RadzenDataList>
            </RadzenRow>
        }

    }
    else
    {
        <ArchibasePageTitle Title=@Loc["Locations"] />
        <RadzenText TextStyle="TextStyle.DisplayH3">@Loc["Locations"]</RadzenText>
        <RadzenDataGrid Data="ChildLocations?.OrderByDescending(loc => SublocationCounts.GetValueOrDefault(loc, 0))"
            Density="Density.Compact">
            <Columns>
                <RadzenDataGridColumn Title=@Loc["Name"]>
                    <Template Context="loc">
                        <img src=@($"flags/{loc.Flag ?? "xx"}.svg") width="32px" />
                        <RadzenLink Text="@(loc.Name)" Path=@($"/locations/{loc.Id}") />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title=@Loc["Count"]>
                    <Template Context="loc">
                        <RadzenText>@(SublocationCounts.GetValueOrDefault(loc, 0))</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

    }
    </LoadingScreen>

    @code
    {

    [Parameter]
    public Guid? Id { get; set; }

    class StreetDisplay
    {
        public Street Street { get; set; }
        public string SortKey { get; set; }
        public char StartsWith { get; set; }
    }

    bool loaded = false;

    Location? location;

    public List<Location> ChildLocations { get; set; }
    public Dictionary<Location, int> SublocationCounts { get; set; }

    public List<Location> HierarchyPath { get; set; } = [];
    public List<ArchiBaseUser> LocalEditors { get; set; } = [];

    List<Photo> recentPhotos = [];
    List<Gallery> galleries = [];
    List<StreetDisplay> streets = [];

    List<char> startingChars = [];

    char? currentStartingChar;

    bool showActualStreetsOnly = true;

    LeafletMap map = null!;

    double? avgLat = null, avgLon = null;

    protected override async Task OnParametersSetAsync()
    {
        loaded = false;
        location = await ModelContext.Locations.Include(loc => loc.Streets).ThenInclude(s => s.ActualStreet).FirstOrDefaultAsync(loc => loc.Id == Id);
        ChildLocations = await (location is null ? TreeRepo.QueryRoots() : TreeRepo.QueryChildren(location)).ToListAsync();
        SublocationCounts = ChildLocations.Where(loc => loc is not null)
        .Select(loc => (loc!, TreeRepo.QueryDescendants(loc!).Count())).ToDictionary();
        if (location is not null)
        {
            HierarchyPath = (await TreeRepo.GetPathFromRootAsync(location)).ToList();
            HierarchyPath.Add(location);
        }
        else
        {
            HierarchyPath.Clear();
        }
        if (location is not null)
        {
            LocalEditors = UsersContext.Users
            .Where(u => u.Locations.Any(id => HierarchyPath.Select(loc => loc.Id).Contains(id)))
            .ToList();
            recentPhotos = ModelContext.ActivePhotos.Include(p => p.BuildingBinds).ThenInclude(b => b.Building)
            .Where(p => p.BuildingBinds.Any(b => b.Building.Location == location))
            .OrderByDescending(p => p.PublicationDate).Take(10).ToList();
            galleries = ModelContext.Galleries
            .Where(g => g.EntityId == location.Id && g.EntityType == "Location")
            .OrderBy(g => g.Name).ToList();
            streets = location.Streets.Select(s =>
            {
                var key = StreetSortKey(s.Name);
                var start = key != "" ? key[0] : s.Name[0];
                if (!Char.IsLetter(start)) start = '-';
                if (Char.IsDigit(start)) start = '#';
                return new StreetDisplay { Street = s, SortKey = key, StartsWith = start };
            }).OrderBy(s => s.SortKey)
            .ThenBy(s => s.Street.Name, StringComparison.OrdinalIgnoreCase.WithNaturalSort())
            .ToList();
            startingChars = streets.Select(s => s.StartsWith).Distinct().ToList();
        }
        await base.OnParametersSetAsync();
        if (ChildLocations.Count > 0)
        {
            avgLat = ChildLocations.Select(loc => loc.Latitude).Average();
            avgLon = ChildLocations.Select(loc => loc.Longitude).Average();
        }
        loaded = true;
    }

    string StreetSortKey(string streetName)
    {
        var components = streetName.Split().Where(c => c.Length > 0);
        var droppedWords = components.Where(c => Char.IsLower(c[0]) || Char.IsDigit(c[0]));
        string sortKey;
        if (droppedWords.Any())
        {
            sortKey = components.Where(c => !droppedWords.Contains(c)).Aggregate("", (a, c) => a + c);
        }
        else
        {
            sortKey = components.Skip(components.Count() > 1 ? 1 : 0).Aggregate("", (a, c) => a + c);
        }
        return sortKey;
    }

    void OpenChildLocation(SublocationMarker marker)
    {
        var location = ChildLocations.FirstOrDefault(loc => loc.Latitude == marker.Latitude && loc.Longitude ==
        marker.Longitude);
        if (location is not null)
        {
            JSRuntime.InvokeVoidAsync("open", $"/locations/{location.Id}", "_blank");
        }

    }

}