@page "/locations/add"
@inject ModelContext ModelContext
@inject NotificationService NotificationService
@inject ITreeRepository<Location, Guid> TreeRepo


<EditorOnly Location=@ParentId>
    <RadzenText TextStyle="TextStyle.H3">Add location</RadzenText>
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenFormField Text="Name">
            <RadzenTextBox @bind-Value="@name" />
        </RadzenFormField>
        <RadzenFormField Text="Flag (ISO 3166-2)">
            <RadzenTextBox @bind-Value="@flag" />
        </RadzenFormField>
        <RadzenFormField Text="Parent">
            <RadzenDropDown @bind-Value="@parentLocation" Data="Locations" TextProperty="Name">
            </RadzenDropDown>
        </RadzenFormField>
        <RadzenFormField Text="Description">
            <RadzenHtmlEditor @bind-Value="@description" />
        </RadzenFormField>
        <RadzenRow>
            <RadzenFormField Text="Latitude">
                <RadzenNumeric ShowUpDown="false" @bind-Value="latitude" />
            </RadzenFormField>
            <RadzenFormField Text="Longitude">
                <RadzenNumeric ShowUpDown="false" @bind-Value="longitude" />
            </RadzenFormField>
        </RadzenRow>
        <RadzenRow>
            <RadzenLabel Text="Allow streets" Component="AllowStreets" />
            <RadzenCheckBox Name="AllowStreets" @bind-Value="allowStreets" />
        </RadzenRow>
        <OpenStreetMap @ref="map" Style="height:480px; width:640px" OnClick="OnMapClick">
        </OpenStreetMap>
        <RadzenFormField>
            <RadzenButton Text="Submit" Icon="add_circle_outline" Click="@AddNew" />
        </RadzenFormField>
    </RadzenStack>
</EditorOnly>



@code
{
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? ParentId { get; set; }
    string name = "";

    string? flag, description;

    Location? parentLocation;

    double latitude, longitude;

    bool allowStreets;

    Map map = null!;

    List<Location> Locations { get; set; }

    protected override void OnInitialized()
    {
        Locations = ModelContext.Locations.ToList();
        parentLocation = Locations.FirstOrDefault(loc => loc.Id == ParentId);
        map?.SetCenter(new Coordinate(parentLocation?.Longitude ?? 0.0, parentLocation?.Latitude ?? 0.0));
    }

    public async Task AddNew()
    {
        Location location = new Location
            {
                Id = Guid.NewGuid(),
                Name = name,
                Latitude = latitude,
                Longitude = longitude,
                Flag = flag,
                Description = description,
                AllowStreets = allowStreets
            };
        ModelContext.Locations.Add(location);
        await TreeRepo.SetParentAsync(location, parentLocation);
        try
        {
            await ModelContext.SaveChangesAsync();
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Location added",
                    Detail = $"ID: {location.Id}"
                });
        }
        catch (Exception e)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"{e.Message}"
                });
        }
    }

    void OnMapClick(Coordinate coordinate)
    {
        map.MarkersList.Clear();
        map.MarkersList.Add(new Marker(OpenLayers.Blazor.MarkerType.MarkerPin, coordinate));
        longitude = coordinate.Longitude;
        latitude = coordinate.Latitude;
    }
}
