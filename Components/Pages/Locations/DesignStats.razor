@page "/locations/{id:guid}/designstats"
@using Microsoft.EntityFrameworkCore
@inject ModelContext ModelContext
@inject IStringLocalizer<DesignStats> Loc

<LoadingScreen Loaded=@loaded>
    @if (location is not null)
    {
        <ArchibasePageTitle Title=@(Loc["Stats by category"] + " — " + location.Name) />
        <RadzenText TextStyle="TextStyle.H5">@Loc["Stats by category"] — @(location.Name)</RadzenText>
        <RadzenDataGrid Data="byCategory" AllowFiltering=true AllowSorting=true>
            <Template Context="row">
                <RadzenDataGrid Data="byDesign.Where(ds => ds.Item1.Categories.Contains(row.Item1))" AllowFiltering=true
                    AllowSorting=true>
                    <Columns>
                        <RadzenDataGridColumn FilterProperty="Item1.Name" SortProperty="Item1.Name"
                            SortOrder="SortOrder.Ascending">
                            <Template Context="entry">
                                @(entry.Item1.Name)
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn FilterProperty="Item2" SortProperty="Item2">
                            <Template Context="entry">
                                <RadzenLink Path=@($"/locations/{location.Id}/buildings?designids={entry.Item1.Id}")>
                                    @(entry.Item2)</RadzenLink>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </Template>
            <Columns>
                <RadzenDataGridColumn FilterProperty="Item1.Name" SortProperty="Item1.Name" SortOrder="SortOrder.Ascending">
                    <Template Context="entry">
                        @(entry.Item1.Name)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn FilterProperty="Item2" SortProperty="Item2">
                    <Template Context="entry">
                        <RadzenLink Path=@($"/locations/{location.Id}/buildings?categoryids={entry.Item1.Id}")>
                            @(entry.Item2 + byDesign.Where(ds => ds.Item1.Categories.Contains(entry.Item1)).Select(x =>
                            x.Item2).Sum())
                        </RadzenLink>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }

</LoadingScreen>

@code
{
    [Parameter]
    public Guid Id { get; set; }

    Location? location;

    List<(DesignCategory, int)> byCategory;
    List<(Design, int)> byDesign;

    bool loaded;


    protected override async Task OnInitializedAsync()
    {
        loaded = false;
        await Task.Yield();
        location = ModelContext.Locations.FirstOrDefault(loc => loc.Id == Id);
        if (location is not null)
        {
            byCategory = ModelContext.Buildings
            .Include(b => b.ActualCard)
            .ThenInclude(c => c.Categories)
            .Where(b => b.Location == location)
            .SelectMany(b => b.ActualCard.Categories.Select(c => new { BuildingId = b.Id, Category = c }))
            .GroupBy(x => x.Category, (c, bs) => new { Category = c, Count = bs.Count() })
            .AsEnumerable()
            .Select(x => (x.Category, x.Count))
            .ToList();

            byDesign = ModelContext.Set<BuildingPart>()
            .Include(p => p.Design)
            .ThenInclude(d => d.Categories)
            .Include(p => p.BuildingCard)
            .ThenInclude(c => c.Building)
            .ThenInclude(b => b.Location)
            .Where(p => p.BuildingCard.Building.Location == location)
            .AsEnumerable()
            .GroupBy(p => p.Design, (d, ps) => new { Design = d, Count = ps.DistinctBy(p => p.BuildingCard.Building).Count() })
            .AsEnumerable()
            .Select(x => (x.Design, x.Count))
            .ToList();

        }
        loaded = true;
    }
}
