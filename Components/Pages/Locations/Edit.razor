@page "/locations/{id:guid}/edit"
@inject ModelContext ModelContext
@inject NotificationService NotificationService
@inject ITreeRepository<Location, Guid> TreeRepo



@if (location is not null)
{
    <EditorOnly Location=@(location.Id)>
    <RadzenText TextStyle="TextStyle.H3">Edit location</RadzenText>
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenFormField Text="Name">
            <RadzenTextBox @bind-Value="@location.Name" />
        </RadzenFormField>
        <RadzenFormField Text="Flag (ISO 3166-2)">
            <RadzenTextBox @bind-Value="@location.Flag" />
        </RadzenFormField>
        <RadzenFormField Text="Parent">
            <RadzenDropDown @bind-Value="@parent" Data="Locations" TextProperty="Name">
            </RadzenDropDown>
        </RadzenFormField>
        <RadzenFormField Text="Description">
            <RadzenHtmlEditor @bind-Value="@location.Description" />
        </RadzenFormField>
        <RadzenRow>
            <RadzenFormField Text="Latitude">
                <RadzenNumeric ShowUpDown="false" @bind-Value="location.Latitude" />
            </RadzenFormField>
            <RadzenFormField Text="Longitude">
                <RadzenNumeric ShowUpDown="false" @bind-Value="location.Longitude" />
            </RadzenFormField>
        </RadzenRow>
        <RadzenRow>
            <RadzenLabel Text="Allow streets" Component="AllowStreets" />
            <RadzenCheckBox Name="AllowStreets" @bind-Value="location.AllowStreets" />
        </RadzenRow>
        <OpenStreetMap @ref="map" Style="height:480px; width:640px" OnClick="OnMapClick">
        </OpenStreetMap>
        <RadzenFormField>
            <RadzenButton Text="Save" Icon="add_circle_outline" Click="@Save" />
        </RadzenFormField>
    </RadzenStack>
</EditorOnly>


}


@code
{
    [Parameter]
    public Guid Id { get; set; }
    Location? location;

    Location? parent;

    Map map = null!;

    List<Location> Locations { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Locations = ModelContext.Locations.ToList();
        location = await TreeRepo.GetByIdAsync(Id);
        if (location is not null)
        {
            parent = await TreeRepo.GetParentAsync(location);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            map?.SetCenter(new Coordinate(location?.Longitude ?? 0.0, location?.Latitude ?? 0.0));
        }
    }

    public async Task Save()
    {
        //try
        //{
        await TreeRepo.SetParentAsync(location, parent);
        ModelContext.SaveChanges();
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Location saved",
                Detail = $"ID: {location.Id}"
            });
        //}
        @* catch (Exception e)
{
NotificationService.Notify(new NotificationMessage
{
Severity = NotificationSeverity.Error,
Summary = "Error occured",
Detail = $"{e.Message}"
});
} *@
    }

    void OnMapClick(Coordinate coordinate)
    {
        map.MarkersList.Clear();
        map.MarkersList.Add(new Marker(OpenLayers.Blazor.MarkerType.MarkerPin, coordinate));
        location!.Longitude = coordinate.Longitude;
        location!.Latitude = coordinate.Latitude;
    }
}