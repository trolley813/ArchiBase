@page "/"
@using ArchiBase.Components.Utils
@using Microsoft.EntityFrameworkCore
@inject IStringLocalizer<Home> Loc
@inject ModelContext ModelContext
@inject UsersContext UsersContext
@inject UserResolverService UserResolverService

<ArchibasePageTitle Title=@Loc["Home"] />

<RadzenText TextStyle="TextStyle.H3" class="mx-4 my-4">@Loc["Welcome to USSR (and other countries) Architectural Database"]</RadzenText>

<RadzenRow>
    <CascadingAuthenticationState>
        <AuthorizeView Context="actx">
            <Authorized>
                <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                    @if (myLocation is not null)
                    {
                        <RadzenCard Variant="Variant.Text" Style="font-weight:bold">
                            <RadzenLink Text=@(myLocation.Name) Path=@($"/locations/{myLocation.Id}") />
                        </RadzenCard>
                    }
                @foreach(var loc in ModelContext.Locations.Where(loc => user.Locations.Contains(loc.Id)))
                {
                    <RadzenCard Variant="Variant.Text">
                        <RadzenLink Text=@(loc.Name) Path=@($"/locations/{loc.Id}") />
                    </RadzenCard>
                }
                </RadzenStack>
            </Authorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</RadzenRow>

<RadzenRow>
    <RadzenColumn SizeSM="12" SizeMD="4" SizeLG="3">
        <RadzenCard>
            <RadzenRow>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Total locations"]</RadzenText>
                    <RadzenText TextStyle="TextStyle.H1">
                        <RadzenIcon Icon="location_on" Style="font-size:36px" />
                        @locationsCount
                    </RadzenText>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </RadzenColumn>

    <RadzenColumn SizeSM="12" SizeMD="4" SizeLG="3">
        <RadzenCard>
            <RadzenRow>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Total buildings"]</RadzenText>
                    <RadzenText TextStyle="TextStyle.H1">
                        <RadzenIcon Icon="apartment" Style="font-size:36px" />
                        @buildingsCount
                    </RadzenText>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </RadzenColumn>

    <RadzenColumn SizeSM="12" SizeMD="4" SizeLG="3">
        <RadzenCard>
            <RadzenRow>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Total designs"]</RadzenText>
                    <RadzenText TextStyle="TextStyle.H1">
                        <RadzenIcon Icon="architecture" Style="font-size:36px" />
                        @designsCount
                    </RadzenText>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </RadzenColumn>

    <RadzenColumn SizeSM="12" SizeMD="4" SizeLG="3">
        <RadzenCard>
            <RadzenRow>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Total photos"]</RadzenText>
                    <RadzenText TextStyle="TextStyle.H1">
                        <RadzenIcon Icon="photo_camera" Style="font-size:36px" />
                        @photosCount
                    </RadzenText>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </RadzenColumn>

    <RadzenColumn SizeSM="12" SizeMD="4" SizeLG="3">
        <RadzenCard>
            <RadzenRow>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Active users"]</RadzenText>
                    <RadzenText TextStyle="TextStyle.H1">
                        <RadzenIcon Icon="person" Style="font-size:36px" />
                        @activeUsersCount
                    </RadzenText>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>


<RadzenText TextStyle="TextStyle.H4" class="mx-4 my-4">@Loc["News"]</RadzenText>
<RadzenLink Path="news" Text=@Loc["All news"] />
@foreach(var n in news)
{
    <RadzenText>
        <b><LocalTime DateTime="n.PublicationDate"/></b>
        @((MarkupString)n.Text)
    </RadzenText>
}
<RadzenText TextStyle="TextStyle.H4" class="mx-4 my-4">@Loc["Recent photos"]</RadzenText>
<RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
@foreach(var photo in recentPhotos)
{
    <RadzenLink Path=@($"/photos/{photo.Id}")>
        <RadzenImage Path=@(photo.PhotoLink) Style="max-height:200px;width:300px" onerror="this.src='/images/unavailable.png'" />
    </RadzenLink>
}
</RadzenStack>
<RadzenText TextStyle="TextStyle.H4" class="mx-4 my-4">@Loc["Random photos"]</RadzenText>
<RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
@foreach(var photo in randomPhotos)
{
    <RadzenLink Path=@($"/photos/{photo.Id}")>
        <RadzenImage Path=@(photo.PhotoLink) Style="max-height:200px;width:300px" onerror="this.src='/images/unavailable.png'" />
    </RadzenLink>
}
</RadzenStack>

@code
{
    int locationsCount, designsCount, buildingsCount, photosCount, activeUsersCount;

    List<Photo> recentPhotos = [];
    List<Photo> randomPhotos = [];

    List<NewsItem> news = [];

    ArchiBaseUser? user;
    Location? myLocation;

    // TEMP
    List <BuildingMarker> markers;

    protected override void OnInitialized()
    {
        locationsCount = ModelContext.Locations.Count();
        designsCount = ModelContext.Designs.Count();
        buildingsCount = ModelContext.Buildings.Count();
        photosCount = ModelContext.ActivePhotos.Count();
        activeUsersCount = UsersContext.Users.Where(u => u.PasswordHash != null).Count();
        news = ModelContext.NewsItems.OrderByDescending(n => n.PublicationDate).Take(5).ToList();
        recentPhotos = ModelContext.ActivePhotos.OrderByDescending(p => p.PublicationDate).Take(10).ToList();
        randomPhotos = ModelContext.ActivePhotos.OrderBy(p => EF.Functions.Random()).Take(10).ToList();
        user = UsersContext.Users.FirstOrDefault(u => u.Id == UserResolverService.GetUser());
        myLocation = user is not null ? ModelContext.Locations.FirstOrDefault(loc => loc.Id == user.MyLocation) : null;
    }
}