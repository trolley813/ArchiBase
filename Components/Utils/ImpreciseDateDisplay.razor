@using SmartFormat
@inject IStringLocalizer<ImpreciseDateDisplay> Loc

<span>@DisplayedString</span>

@code
{
    [Parameter]
    public ImpreciseDate Value { get; set; } = new();


    public string DisplayedString => Value.Precision switch
    {
        DatePrecision.None => @Loc["Unknown"],
        DatePrecision.Full => Value.Date.ToString("dd.MM.yyyy"),
        DatePrecision.YearAndMonthOnly => Value.Date.ToString("MM.yyyy"),
        DatePrecision.YearOnly => Value.Date.ToString("yyyy"),
        DatePrecision.Circa => Smart.Format(Loc["ca. {Year}"], new { Year = Value.Date.ToString("yyyy") }),
        DatePrecision.Decade => Smart.Format(Loc["{EML} {Decade}s"], new
        {
            EML = Value.Date.GetEarlyMidLate(useCentury: false).GetRepresentation(),
            Decade = Value.Date.Year / 10 * 10
        }),
        DatePrecision.DecadeOnly => Smart.Format(Loc["{Decade}s"], new { Decade = Value.Date.Year / 10 * 10 }),
        DatePrecision.Century => Smart.Format(Loc["{EML} {Century} century"], new
        {
            EML = Value.Date.GetEarlyMidLate(useCentury: true).GetRepresentation(),
            Century = Value.Date.GetCentury()
        }),
        DatePrecision.CenturyOnly => Smart.Format(Loc["{Century} century"], new { Century = Value.Date.GetCentury() }),
        DatePrecision.YearOrEarlier => Smart.Format(Loc["{Year} or earlier"], new { Year = Value.Date.ToString("yyyy") }),
        DatePrecision.YearOrLater => Smart.Format(Loc["{Year} or later"], new { Year = Value.Date.ToString("yyyy") }),
        _ => throw new NotImplementedException()
    };
}
