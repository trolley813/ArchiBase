@using Microsoft.EntityFrameworkCore
@inject ModelContext ModelContext
@inject UsersContext UsersContext
@inject UserManager<ArchiBaseUser> UserManager
@inject IStringLocalizer<CommentView> Loc
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject UserResolverService UserResolverService
@inject CommentService CommentService
@inject NavigationManager NavigationManager

<LoadingScreen Loaded="loaded">
    <RadzenText TextStyle="TextStyle.H5">@Loc["Comments"] (@(count))</RadzenText>

    @if (ShowMode == CommentShowMode.New)
    {
        <RadzenText TextStyle="TextStyle.Body1">@Loc["New comments written after:"]</RadzenText>
        <RadzenText>
            <b>
                <LocalTime DateTime=lastReadTime />
            </b>
        </RadzenText>
        <RadzenButton Text=@Loc["Mark all as read"] Icon="done_all" Click="args => OnMark()" />
    }
    @if (ShowMode == CommentShowMode.Responses)
    {
        <RadzenText TextStyle="TextStyle.Body1">@Loc["New responses written after:"]</RadzenText>
        <RadzenText>
            <b>
                <LocalTime DateTime=lastReadTime />
            </b>
        </RadzenText>
        <RadzenText>@Loc["To mark responses as read, use the new comments page."]</RadzenText>
    }

    @if(ShowMode != CommentShowMode.ByEntity)
    {
        <RadzenPager ShowPagingSummary="true" PagingSummaryFormat=@Loc["Page {0} of {1} (total comments: {2})"] HorizontalAlign="HorizontalAlign.Right" Count="count" PageSize="@pageSize" PageChanged="@PageChanged" AlwaysVisible=true />
    }

    <RadzenDataList Data="comments" @ref="commentsList" Style="max-width: 100%">
        <Template Context="comment">
            <RadzenCard>
                <RadzenRow>
                    @if(ShowMode != CommentShowMode.ByEntity)
                    {
                        <RadzenImage Style="height: 200px; max-width: 100%; display: flex;" Path=@(commentPhotos.GetValueOrDefault(comment.EntityId, "/images/arch.png"))
                                AlternateText="Photo not available" onerror="this.src='/images/unavailable.png'" >
                        </RadzenImage>
                    }
                    <RadzenColumn>
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenLink Path=@($"/users/{comment.AuthorId}") >
                                @(commentAuthors.GetValueOrDefault(comment.AuthorId, Loc["(unknown author)"]))
                            </RadzenLink>
                            @if(ShowMode != CommentShowMode.ByEntity)
                            {
                                @if(comment.EntityType == "Building")
                                {
                                    <RadzenLink Path=@($"/buildings/{comment.EntityId}")>
                                        @Loc["Building"]: @(buildingAddresses.GetValueOrDefault(comment.EntityId))
                                    </RadzenLink>
                                }
                                @if(comment.EntityType == "Design")
                                {
                                    <RadzenLink Path=@($"/series/{comment.EntityId}")>
                                        @Loc["Design"]: @(designNames.GetValueOrDefault(comment.EntityId))
                                    </RadzenLink>
                                }
                                @if(comment.EntityType == "DesignCategory")
                                {
                                    <RadzenLink Path=@($"/categories/{comment.EntityId}")>
                                        @Loc["Category"]: @(designNames.GetValueOrDefault(comment.EntityId))
                                    </RadzenLink>
                                }
                                @if(comment.EntityType == "Photo")
                                {
                                    <RadzenLink Path=@($"/photos/{comment.EntityId}")>
                                        @Loc["Photo"]: @(photoDescriptions.GetValueOrDefault(comment.EntityId))
                                    </RadzenLink>
                                }
                            }
                        </RadzenStack>
                        <RadzenText TextStyle="TextStyle.Subtitle2">
                            <LocalTime DateTime="comment.PublicationDate" />
                        </RadzenText>
                        <RadzenText>@((MarkupString)comment.Text)</RadzenText>
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenButton Icon="keyboard_arrow_up" Size="ButtonSize.ExtraSmall" Disabled="!CanUpvote(comment)" 
                                Click="args => Upvote(comment)" />
                            <RadzenText TextStyle="TextStyle.Body2" MouseEnter="args => ShowVotesTooltip(args, comment)">
                                @(comment.VotesCount)</RadzenText>
                            <RadzenButton Icon="keyboard_arrow_down" Size="ButtonSize.ExtraSmall" Disabled="!CanDownvote(comment)"
                                Click="args => Downvote(comment)" />
                        </RadzenStack>
                        @if (ShowMode == CommentShowMode.New)
                        {
                            <RadzenButton Text=@Loc["Mark up to this comment as read"] Icon="check" Size="ButtonSize.Small"
                                Click="args => OnMark(comment.PublicationDate)" />
                        }
                        @if (comment.IsRecorded)
                        {
                            <RadzenText class="rz-color-success" TextStyle="TextStyle.Subtitle2">
                                <RadzenIcon Icon="check" />
                                @Loc["Thank you! Comment was recorded."]
                            </RadzenText>
                        }
                        <CascadingAuthenticationState>
                            <AuthorizeView Roles="Admin, Editor, Local Editor">
                                <RadzenToggleButton @bind-Value="comment.IsRecorded" 
                                    Text=@(comment.IsRecorded ? Loc["Unmark as recorded"] : Loc["Mark as recorded"])
                                    ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small"
                                    Click="args => OnRecord(comment)" ToggleShade="Shade.Darker" Shade="Shade.Lighter" Icon="toggle_off"
                                    ToggleIcon="toggle_on" />
                            </AuthorizeView>
                        </CascadingAuthenticationState>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </Template>
    </RadzenDataList>

    @if (ShowMode == CommentShowMode.ByEntity)
    {
        <CascadingAuthenticationState>
        <AuthorizeView Context="actx">
            <RadzenTemplateForm Data="commentText" Style="width:90%;">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFormField>
                        <RadzenHtmlEditor @bind-Value="commentText" Style="height: 300px" />
                    </RadzenFormField>
                    <RadzenFormField>
                        <RadzenButton ButtonType="ButtonType.Submit" Icon="add" Text=@Loc["Add comment"]
                            Click="args => AddComment()" Disabled="!loaded" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenTemplateForm>
        </AuthorizeView>
    </CascadingAuthenticationState>
    }
</LoadingScreen>

@code
{
    bool loaded = false;
    public enum CommentShowMode
    {
        ByEntity,
        All,
        New,
        Responses
    }

    [Parameter]
    public Guid EntityId { get; set; }

    [Parameter]
    public string EntityType { get; set; }

    [Parameter]
    public CommentShowMode ShowMode { get; set; } = CommentShowMode.ByEntity;

    List<Comment> comments = [];

    Dictionary<Guid, string> commentPhotos = [];

    Dictionary<Guid, string> commentAuthors = [];

    Dictionary<Guid, string> buildingAddresses = [];
    Dictionary<Guid, string> designNames = [];
    Dictionary<Guid, string> designCategoryNames = [];
    Dictionary<Guid, string> photoDescriptions = [];

    RadzenDataList<Comment> commentsList;

    string commentText = "";

    DateTime? lastReadTime;

    int pageSize = 20;

    int count = 200;

    ArchiBaseUser? user;

    protected override async Task OnInitializedAsync()
    {
        user = UserManager.Users.FirstOrDefault(u => u.Id == UserResolverService.GetUser());
        if (ShowMode == CommentShowMode.New || ShowMode == CommentShowMode.Responses)
        {
            lastReadTime = CommentService.GetLastReadTimeForCurrentUser();
        }
        count = ShowMode switch
        {
            CommentShowMode.ByEntity =>  await ModelContext.Comments.CountAsync(c => c.EntityId == EntityId),
            CommentShowMode.All => await ModelContext.Comments.CountAsync(),
            CommentShowMode.New => await ModelContext.Comments.CountAsync(c => c.PublicationDate > lastReadTime),
            CommentShowMode.Responses => await ModelContext.Comments.CountAsync(
                c => c.PublicationDate > user.LastReadCommentTime 
                && c.AuthorId != user.Id
                && ModelContext.Comments.Where(com => com.AuthorId == user.Id && com.EntityId == c.EntityId).DefaultIfEmpty().Max(com => com.PublicationDate) < c.PublicationDate),
            _ => 0
        };
        await LoadComments(0, pageSize);
        loaded = true;
        this.StateHasChanged();
    }

    async Task LoadComments(int skip, int take)
    {
        comments = ShowMode switch
        {
            CommentShowMode.ByEntity => await ModelContext.Comments.Where(c => c.EntityId == EntityId).OrderBy(c
            => c.PublicationDate).Include(c => c.Votes).ToListAsync(),
            CommentShowMode.All => await ModelContext.Comments.OrderByDescending(c
            => c.PublicationDate).Include(c => c.Votes).Skip(skip).Take(take).ToListAsync(),
            CommentShowMode.New => await ModelContext.Comments.Where(c => c.PublicationDate > lastReadTime)
            .OrderBy(c => c.PublicationDate).Include(c => c.Votes).Skip(skip).Take(take).ToListAsync(),
            CommentShowMode.Responses => await ModelContext.Comments
            .Where(c => c.PublicationDate > lastReadTime && c.AuthorId != user.Id
            && ModelContext.Comments.Where(com => com.AuthorId == user.Id && com.EntityId == c.EntityId).DefaultIfEmpty().Max(com => com.PublicationDate) < c.PublicationDate)
            .OrderBy(c => c.PublicationDate).Include(c => c.Votes).Skip(skip).Take(take).ToListAsync(),
            //_ => []
        };
        var authorIds = comments.Select(c => c.AuthorId).Distinct();
        var entityIds = comments.Select(c => c.EntityId).Distinct();
        var buildingsWithCommentedPhotos = await ModelContext.BuildingBinds
        .Include(b => b.Building)
        .Include(b => b.Photo)
        .Where(b => entityIds.Contains(b.Photo.Id))
        .Select(b => b.Building.Id).Distinct()
        .ToListAsync();
        commentAuthors = await UserManager.Users.Where(u => authorIds.Contains(u.Id))
        .Select(u => new { u.Id, u.UserName }).ToDictionaryAsync(x => x.Id, x => x.UserName ?? "(unnamed)");
        if (ShowMode != CommentShowMode.ByEntity)
        {
            designNames = await ModelContext.Designs.Where(d => entityIds.Contains(d.Id))
            .Select(d => new { d.Id, d.Name }).ToDictionaryAsync(p => p.Id, p => p.Name);
            designCategoryNames = await ModelContext.DesignCategories.Where(c => entityIds.Contains(c.Id))
            .Select(d => new { d.Id, d.Name }).ToDictionaryAsync(p => p.Id, p => p.Name);
            buildingAddresses = await ModelContext.Buildings
            .Where(b => entityIds.Contains(b.Id) || buildingsWithCommentedPhotos.Contains(b.Id))
            .Include(b => b.Location)
            .Include(b => b.Cards)
            .ThenInclude(c => c.StreetAddresses)
            .ThenInclude(a => a.Street)
            .Select(
                b => new { b.Id, Address = b.ActualAddressWithLocation  }
            ).AsSplitQuery().ToDictionaryAsync(p => p.Id, p => p.Address);
            photoDescriptions = await ModelContext.Photos.Where(p => entityIds.Contains(p.Id))
            .Include(p => p.BuildingBinds)
            .ThenInclude(b => b.Building)
            .Select(p => new { p.Id, p.BuildingBinds })
            .ToDictionaryAsync(p => p.Id, p => String.Join("; ", p.BuildingBinds.Select(b => buildingAddresses.GetValueOrDefault(b.Building.Id, "Address"))));
            commentPhotos = (await ModelContext.Photos.Where(p => entityIds.Contains(p.Id))
            .ToListAsync())
            .ToDictionary(p => p.Id, p => p.PhotoLink);
            
        }
    }

    void AddComment()
    {
        if (user is not null)
        {
            var comment = new Comment()
                {
                    AuthorId = user.Id,
                    PublicationDate = DateTime.UtcNow,
                    EntityId = EntityId,
                    EntityType = EntityType,
                    Text = commentText
                };
            ModelContext.Comments.Add(comment);
            try
            {
                ModelContext.SaveChanges();
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Comment added",
                        Detail = $"Your comment was saved!"
                    });
                this.StateHasChanged();
            }
            catch (Exception e)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error occured",
                        Detail = $"{e.Message}"
                    });
            }
        }

    }

    bool CanUpvote(Comment comment)
    {
        if (comment.AuthorId == user?.Id || (DateTime.UtcNow - comment.PublicationDate).Days > 30) return false;
        if (comment.Votes?.Values?.Any(v => v.Author == user?.Id && v.VoteValue > 0) ?? false) return false;
        return true;
    }

    bool CanDownvote(Comment comment)
    {
        if (comment.AuthorId == user?.Id || (DateTime.UtcNow - comment.PublicationDate).Days > 30) return false;
        if (comment.Votes?.Values?.Any(v => v.Author == user?.Id && v.VoteValue < 0) ?? false) return false;
        return true;
    }

    void Upvote(Comment comment)
    {
        if (user is not null)
        {
            comment.Votes.Values ??= [];
            if (!comment.Votes.Values.Any(v => v.Author == user.Id))
                comment.Votes.Values.Add(new Vote { Author = user.Id, VoteValue = +1 });
            else
                comment.Votes.Values.RemoveAll(v => v.Author == user.Id);
            ModelContext.SaveChanges();
        }
    }

    void Downvote(Comment comment)
    {
        if (user is not null)
        {
            comment.Votes.Values ??= [];
            if (!comment.Votes.Values.Any(v => v.Author == user.Id))
                comment.Votes.Values.Add(new Vote { Author = user.Id, VoteValue = -1 });
            else
                comment.Votes.Values.RemoveAll(v => v.Author == user.Id);
            ModelContext.SaveChanges();
        }
    }

    void ShowVotesTooltip(ElementReference elementReference, Comment comment)
    {
        TooltipService.Open(elementReference, $"+{comment.UpvotesCount}/-{comment.DownvotesCount}");
    }

    void OnMark(DateTime? dateTime = null)
    {
        if (user is not null)
        {
            user.LastReadCommentTime = dateTime ?? DateTime.UtcNow;
            try
            {
                UsersContext.SaveChanges();
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Comments read",
                        Detail = $"Comments are marked as read!"
                    });
                NavigationManager.Refresh(forceReload: true);
            }
            catch (Exception e)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error occured",
                        Detail = $"{e.Message}"
                    });
            }
        }
    }

    async Task PageChanged(PagerEventArgs args)
    {
        await LoadComments(args.Skip, args.Top);
    }

    void OnRecord(Comment comment)
    {
        ModelContext.SaveChanges();
    }
}
