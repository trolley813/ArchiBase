@using Microsoft.EntityFrameworkCore
@inject ModelContext ModelContext
@inject UsersContext UsersContext
@inject UserManager<ArchiBaseUser> UserManager
@inject IStringLocalizer<CommentView> Loc
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject UserResolverService UserResolverService
@inject CommentService CommentService
@inject NavigationManager NavigationManager

<RadzenText TextStyle="TextStyle.H5">@Loc["Comments"] (@(comments.Count()))</RadzenText>

@if (ShowMode == CommentShowMode.New)
{
    <RadzenText TextStyle="TextStyle.Body1">@Loc["New comments written after:"]</RadzenText>
    <RadzenText>
        <b>
            <LocalTime DateTime=lastReadTime />
        </b>
    </RadzenText>
    <RadzenButton Text=@Loc["Mark all as read"] Icon="done_all" Click="args => OnMark()" />
}

<RadzenDataList Data="comments" AllowPaging=@(ShowMode != CommentShowMode.ByEntity) ShowPagingSummary=@(ShowMode !=
    CommentShowMode.ByEntity) PageSize="20" PagerAlwaysVisible=@(ShowMode != CommentShowMode.ByEntity)
    @ref="commentsList">
    <Template Context="comment">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.Subtitle1">
                @(commentAuthors.GetValueOrDefault(comment.AuthorId, Loc["(unknown author)"])):
                <LocalTime DateTime="comment.PublicationDate" />
            </RadzenText>
            <RadzenText>@((MarkupString)comment.Text)</RadzenText>
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Icon="keyboard_arrow_up" Size="ButtonSize.ExtraSmall" />
                <RadzenText TextStyle="TextStyle.Body2" MouseEnter="args => ShowVotesTooltip(args, comment)">
                    @(comment.VotesCount)</RadzenText>
                <RadzenButton Icon="keyboard_arrow_down" Size="ButtonSize.ExtraSmall" />
            </RadzenStack>
            @if (ShowMode == CommentShowMode.New)
            {
                <RadzenButton Text=@Loc["Mark up to this comment as read"] Icon="check" Size="ButtonSize.Small"
                    Click="args => OnMark(comment.PublicationDate)" />
            }
            @if (comment.IsRecorded)
            {
                <RadzenText class="rz-color-success" TextStyle="TextStyle.Subtitle2">
                    <RadzenIcon Icon="check" />
                    @Loc["Thank you! Comment was recorded."]
                </RadzenText>
            }
            <CascadingAuthenticationState>
                <AuthorizeView Roles="Admin, Editor, Local Editor">
                    <RadzenToggleButton @bind-Value="comment.IsRecorded" 
                        Text=@(comment.IsRecorded ? Loc["Unmark as recorded"] : Loc["Mark as recorded"])
                        ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small"
                        Click="args => OnRecord(comment)" ToggleShade="Shade.Darker" Shade="Shade.Lighter" Icon="toggle_off"
                        ToggleIcon="toggle_on" />
                </AuthorizeView>
            </CascadingAuthenticationState>
        </RadzenCard>
    </Template>
</RadzenDataList>

@if (ShowMode == CommentShowMode.ByEntity)
{
    <CascadingAuthenticationState>
    <AuthorizeView Context="actx">
        <RadzenTemplateForm Data="commentText">
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenFormField Text=@Loc["Add comment"]>
                    <RadzenHtmlEditor @bind-Value="commentText" Style="height: 300px" />
                </RadzenFormField>
                <RadzenFormField>
                    <RadzenButton ButtonType="ButtonType.Submit" Icon="add" Text=@Loc["Add comment"]
                        Click="args => AddComment()" />
                </RadzenFormField>
            </RadzenStack>
        </RadzenTemplateForm>
    </AuthorizeView>
</CascadingAuthenticationState>
}

@code
{
    public enum CommentShowMode
    {
        ByEntity,
        All,
        New
    }

    [Parameter]
    public Guid EntityId { get; set; }

    [Parameter]
    public CommentShowMode ShowMode { get; set; } = CommentShowMode.ByEntity;

    IEnumerable<Comment> comments = [];

    Dictionary<Guid, string> commentAuthors = [];

    RadzenDataList<Comment> commentsList;

    string commentText = "";

    DateTime? lastReadTime;

    protected override void OnParametersSet()
    {
        if (ShowMode == CommentShowMode.New)
        {
            lastReadTime = CommentService.GetLastReadTimeForCurrentUser();
        }
        comments = ShowMode switch
        {
            CommentShowMode.ByEntity => ModelContext.Comments.Where(c => c.EntityId == EntityId).OrderBy(c
            => c.PublicationDate).Include(c => c.Votes),
            CommentShowMode.All => ModelContext.Comments.OrderByDescending(c
            => c.PublicationDate).Include(c => c.Votes),
            CommentShowMode.New => ModelContext.Comments.Where(c => c.PublicationDate > lastReadTime)
            .OrderBy(c => c.PublicationDate).Include(c => c.Votes),
            _ => []
        };
        var authorIds = comments.Select(c => c.AuthorId).Distinct();
        commentAuthors = UserManager.Users.Where(u => authorIds.Contains(u.Id))
        .Select(u => new { u.Id, u.UserName }).ToDictionary(x => x.Id, x => x.UserName ?? "(unnamed)");

    }

    void AddComment()
    {
        var userGuid = UserResolverService.GetUser();
        var user = UserManager.Users.FirstOrDefault(u => u.Id == userGuid);
        if (user is not null)
        {
            var comment = new Comment()
                {
                    AuthorId = userGuid,
                    PublicationDate = DateTime.UtcNow,
                    EntityId = EntityId,
                    Text = commentText
                };
            ModelContext.Comments.Add(comment);
            try
            {
                ModelContext.SaveChanges();
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Comment added",
                        Detail = $"Your comment was saved!"
                    });
                //this.StateHasChanged();
            }
            catch (Exception e)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error occured",
                        Detail = $"{e.Message}"
                    });
            }
        }

    }

    void ShowVotesTooltip(ElementReference elementReference, Comment comment)
    {
        TooltipService.Open(elementReference, $"+{comment.UpvotesCount}/-{comment.DownvotesCount}");
    }

    void OnMark(DateTime? dateTime = null)
    {
        var user = UserManager.Users.FirstOrDefault(u => u.Id == UserResolverService.GetUser());
        if (user is not null)
        {
            user.LastReadCommentTime = dateTime ?? DateTime.UtcNow;
            try
            {
                UsersContext.SaveChanges();
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Comments read",
                        Detail = $"Comments are marked as read!"
                    });
                NavigationManager.Refresh(forceReload: true);
            }
            catch (Exception e)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error occured",
                        Detail = $"{e.Message}"
                    });
            }
        }
    }

    void OnRecord(Comment comment)
    {
        ModelContext.SaveChanges();
    }
}
