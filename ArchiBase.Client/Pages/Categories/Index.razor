@page "/categories/{id:guid?}"
@using Microsoft.EntityFrameworkCore
@inject IHttpClientFactory ClientFactory
@inject IStringLocalizer<Index> Loc

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
<RadzenBreadCrumb>

    <RadzenBreadCrumbItem Text="Categories" Path=@($"/categories") />
    @foreach (DesignCategoryOutputModel cat in HierarchyPath)
    {
        <RadzenBreadCrumbItem Text="@(cat.Name)" Path=@($"/categories/{cat.Id}") />
    }
    @if (category != null)
    {
        <RadzenBreadCrumbItem Text="Add" Path=@($"categories/add?parentid={category.Id}") Icon="add_circle_outline" />
    }
    else
    {
        <RadzenBreadCrumbItem Text="Add" Path=@($"categories/add") Icon="add_circle_outline" />
    }

</RadzenBreadCrumb>
@if (category is not null)
{
    <ArchibasePageTitle Title=@(category.Name) />
    <RadzenLink Text="Edit" Icon="edit" Path="@($"categories/{category.Id}/edit")" />
    <RadzenLink Text="Delete" Icon="delete" Path="@($"categories/{category.Id}/delete")" />
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.H4">@category.Name</RadzenText>
        <RadzenText>@((MarkupString)(category.Description ?? ""))</RadzenText>
    </RadzenCard>
}

@if (ChildCategories.Any())
{

    <RadzenRow>
    <RadzenDataList Data="ChildCategories.OrderBy(c => c.Name, StringComparison.OrdinalIgnoreCase.WithNaturalSort())">
        <Template Context="cat">
            <RadzenLink Text="@(cat.Name)" Path=@($"/categories/{cat.Id}") />
        </Template>
    </RadzenDataList>
</RadzenRow>

}

@if (category != null)
{
    if (galleries.Any())
    {
        <RadzenText TextStyle="TextStyle.DisplayH6">@Loc["Galleries"]</RadzenText>
        <RadzenDataList Data="@galleries" Density="Density.Compact">
            <Template Context="gallery">
                <RadzenLink Text="@(gallery.Name)" Path=@($"/galleries/{gallery.Id}") />
            </Template>
        </RadzenDataList>

    }

    <RadzenDataGrid AllowFiltering="true" Density="Density.Compact" Responsive=true
    Data="@(category.Designs.OrderBy(d => d.Name, StringComparison.OrdinalIgnoreCase.WithNaturalSort()))"
    AllowPaging=true PageSize="50">
    <Columns>
        <RadzenDataGridColumn Title="Design" Width="60%">
            <Template Context="design">
                <RadzenLink style="white-space:pre-wrap" Text="@(design.Name)" Path="@($"/series/{design.Id}")" />
            </Template>
            <FooterTemplate>
                <RadzenText>Total designs in this category: <b>@(category.Designs.Count)</b></RadzenText>
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Codes in catalogues" Width="30%">
            <Template Context="design">
                <RadzenText>
                    @(String.Join(", ", codesInCatalogues.GetValueOrDefault(design.Id, [])))
                </RadzenText>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

    <CommentView EntityId="category.Id" EntityType="DesignCategory" />
}

@code
{

    [Parameter]
    public Guid? Id { get; set; }

    List<DesignCategoryOutputModel> HierarchyPath = [];
    List<DesignCategoryOutputModel> ChildCategories = [];

    DesignCategoryOutputModel? category;

    List<BuildingOutputModel> buildings = [];


    Dictionary<Guid, List<string>> codesInCatalogues;
    List<GalleryOutputModel> galleries = [];

    protected override async Task OnParametersSetAsync()
    {
        using var client = ClientFactory.CreateClient();
        if (Id is not null) category = await
        client.GetFromJsonAsyncExtended<DesignCategoryOutputModel>($"/api/categories/{Id}");
        ChildCategories = await (category is null
        ? client.GetFromJsonAsyncExtended<List<DesignCategoryOutputModel>>("/api/categories/roots")
        : client.GetFromJsonAsyncExtended<List<DesignCategoryOutputModel>>($"/api/categories/{Id}/subcategories")) ?? [];
        if (category is not null)
        {
            HierarchyPath = await client.GetFromJsonAsyncExtended<List<DesignCategoryOutputModel>>($"/api/categories/{Id}/path") ??
                [];
            HierarchyPath.Add(category);
            galleries = await client.GetFromJsonAsyncExtended<List<GalleryOutputModel>>($"/api/categories/{Id}/galleries") ?? [];
            codesInCatalogues = await client.GetFromJsonAsyncExtended<Dictionary<Guid,
            List<string>>>($"/api/categories/{Id}/designcodes") ?? [];
        }
    }
}