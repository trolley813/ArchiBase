@page "/series/{id:guid}/edit"
@using ArchiBase.Components.Utils
@using Microsoft.EntityFrameworkCore
@inject IHttpClientFactory ClientFactory
@inject IStringLocalizer<Edit> Loc
@inject NotificationService NotificationService

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
<EditorOnly>
    @if (design is not null)
    {
        <RadzenText TextStyle="TextStyle.H3">@Loc["Edit design"]</RadzenText>
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenFormField Text=@Loc["Name"]>
                <RadzenTextBox @bind-Value="design.Name" />
            </RadzenFormField>
            <RadzenFormField Text=@Loc["Description"]>
                <RadzenHtmlEditor Style="height: 300px" @bind-Value="@design.Description" />
            </RadzenFormField>
            <RadzenText TextStyle="TextStyle.H6">@Loc["Technical data"]</RadzenText>
            <RadzenFormField Text=@Loc["Building area"]>
                <RadzenNumeric @bind-Value="design.BuildingArea" Format="0 m²" />
            </RadzenFormField>
            <RadzenFormField Text=@Loc["Total area"]>
                <RadzenNumeric @bind-Value="design.TotalArea" Format="0 m²" />
            </RadzenFormField>
            <RadzenFormField Text=@Loc["Cubage"]>
                <RadzenNumeric @bind-Value="design.Cubage" Format="0 m³" />
            </RadzenFormField>
            <RadzenRow>
                <RadzenText>Catalogue Entries</RadzenText>
                <RadzenFormField>
                    <RadzenButton Icon="add" Click="AddEntry"></RadzenButton>
                </RadzenFormField>
            </RadzenRow>
            @for (int index = 0; index < design.CatalogueEntries.Count; index++)
            {
                var i = index;
                <RadzenRow Gap="10">
                    <RadzenColumn Size="3">
                        <RadzenFormField Text=@Loc["Catalogue"]>
                            <RadzenDropDown Data="@designCatalogues" @bind-Value="design.CatalogueEntries[i].CatalogueId"
                                TextProperty="Name" ValueProperty="Id" Style="width: 350px;">
                            </RadzenDropDown>
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="2">
                        <RadzenFormField Text=@Loc["Code"]>
                            <RadzenTextBox @bind-Value="@design.CatalogueEntries[i].Code" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenFormField Text=@Loc["Description"]>
                            <RadzenTextBox @bind-Value="@design.CatalogueEntries[i].Description" Style="width: 550px;" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="1">
                        <RadzenFormField>
                            <RadzenButton Icon="delete" Click="args => RemoveEntry(i)"></RadzenButton>
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>
            }

            <RadzenFormField Text=@Loc["Select categories"]>
                <RadzenDropDown Data="categories" @bind-Value="design.CategoryIds" Chips=true Multiple=true AllowClear=true
                    AllowFiltering=true @bind-SearchText="categorySearchText" TextProperty="Name" ValueProperty="Id" />
            </RadzenFormField>

            <RadzenFormField>
                <RadzenButton Text=@Loc["Save"] Icon="save" Click="@Save" />
            </RadzenFormField>

        </RadzenStack>
    }
    </EditorOnly>

    @code
    {
    [Parameter]
    public Guid Id { get; set; }

    DesignInputModel? design;
    List<DesignCatalogueOutputModel> designCatalogues = [];
    List<DesignCategoryOutputModel> categories = [];

    string categorySearchText = "";


    protected override async Task OnInitializedAsync()
    {
        using var client = ClientFactory.CreateClient();
        designCatalogues = await client.GetFromJsonAsyncExtended<List<DesignCatalogueOutputModel>>("/api/catalogues") ?? [];
        categories = await client.GetFromJsonAsyncExtended<List<DesignCategoryOutputModel>>("/api/categories") ?? [];
        var designOutputModel = await client.GetFromJsonAsyncExtended<DesignOutputModel>($"/api/designs/{Id}");
        if (designOutputModel is not null)
        {
            design = new DesignInputModel()
                {
                    Id = designOutputModel.Id,
                    BuildingArea = designOutputModel.BuildingArea,
                    CatalogueEntries = designOutputModel.CatalogueEntries.Select(e => new DesignCatalogueEntryInputModel()
                    {
                        Id = e.Id,
                        CatalogueId = e.Catalogue.Id,
                        Code = e.Code,
                        Description = e.Description,
                        DesignId = e.Design.Id
                    }).ToList(),
                    CategoryIds = designOutputModel.Categories.Select(cat => cat.Id).ToList(),
                    Cubage = designOutputModel.Cubage,
                    Description = designOutputModel.Description,
                    Name = designOutputModel.Name,
                    TotalArea = designOutputModel.TotalArea
                };
        }
    }

    public void AddEntry()
    {
        design.CatalogueEntries.Add(new());
    }
    public void RemoveEntry(int index)
    {
        design.CatalogueEntries.RemoveAt(index);
    }

    public async void Save()
    {
        if (design.CategoryIds.Count == 0)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = $"You must add at least one category"
                });
            return;
        }
        using var client = ClientFactory.CreateClient();
        var response = await client.PutAsJsonAsyncExtended<DesignInputModel>($"/api/designs/{design.Id}", design);
        if (response.IsSuccessStatusCode)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Design saved",
                    Detail = $"ID: {design.Id}"
                });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"{response}"
                });
        }
    }
}