@page "/catalogues/{id:guid}/edit"
@using ArchiBase.Models
@using Microsoft.EntityFrameworkCore
@inject IHttpClientFactory ClientFactory
@inject NotificationService NotificationService
@inject IStringLocalizer<Edit> Loc

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
<EditorOnly>
    @if (designCatalogue != null)
    {
        <RadzenText TextStyle="TextStyle.H3">@Loc["Edit catalogue"]: @(designCatalogue.Name)</RadzenText>
        <RadzenStack Orientation="Orientation.Vertical">

            <RadzenFormField Text=@Loc["Name"]>
                <RadzenTextBox @bind-Value="@name" />
            </RadzenFormField>
            <RadzenFormField Text=@Loc["Description"]>
                <RadzenHtmlEditor @bind-Value="@description" style="height: 300px;" />
            </RadzenFormField>
            <RadzenFormField Text=@Loc["Abbreviated format"]>
                <RadzenTextBox Name="Abbr" @bind-Value="@abbreviatedFormat" />
                <RadzenRegexValidator Component="Abbr" Text=@Loc["Format must include {Code} placeholder"] Pattern="{Code}">
                </RadzenRegexValidator>
            </RadzenFormField>
            <RadzenDataGrid @ref="entriesGrid" Data="@designCatalogue.Entries" EditMode="DataGridEditMode.Multiple"
                TItem="DesignCatalogueEntryInputModel" RowUpdate="OnUpdateRow" RowCreate="OnCreateRow">
                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text=@Loc["Add new entry"]
                        Click="@InsertRow" Disabled="@(entriesToInsert.Count > 0)" />
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn Title=@Loc["Code"] Property="Code">
                        <EditTemplate Context="entry">
                            <RadzenTextBox @bind-Value="entry.Code" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title=@Loc["Description"] Property="Description">
                        <Template Context="entry">
                            <RadzenText style="white-space: pre-wrap;">
                                @entry.Description
                            </RadzenText>
                        </Template>
                        <EditTemplate Context="entry">
                            <RadzenTextArea @bind-Value="entry.Description" Style="width: 100%" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title=@Loc["Design"] Property="Design">
                        <Template Context="entry">
                            <RadzenText style="white-space: pre-wrap;">
                                @designs.FirstOrDefault(des => des.Id == entry.DesignId)?.Name
                            </RadzenText>
                        </Template>
                        <EditTemplate Context="entry">
                            <RadzenDropDown Data="designs" @bind-Value=@(entry.DesignId) TextProperty="Name"
                                AllowFiltering=true AllowClear=true />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Context="entry" Filterable="false" Sortable="false" TextAlign="TextAlign.Right"
                        Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="entry">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                                Size="ButtonSize.Medium" Click="@(args => EditRow(entry))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                                Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                                Click="@(args => DeleteRow(entry))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="entry">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                                Size="ButtonSize.Medium" Click="@((args) => SaveRow(entry))">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                                Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(entry))">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                                Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                                Click="@(args => DeleteRow(entry))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <RadzenFormField>
                <RadzenButton Text=@Loc["Save"] Icon="save" Click="@Save" />
            </RadzenFormField>
        </RadzenStack>
    }
    else
    {
        <RadzenAlert AllowClose="false" Title="Error" AlertStyle="AlertStyle.Danger" Variant="Variant.Flat"
            Shade="Shade.Lighter">Catalogue with id @(Id) not found</RadzenAlert>
    }
    </EditorOnly>

    @code
    {
    [Parameter]
    public Guid Id { get; set; }

    DesignCatalogueInputModel? designCatalogue;

    List<DesignCatalogueEntryInputModel> entriesToInsert = [], entriesToUpdate = [];

    RadzenDataGrid<DesignCatalogueEntryInputModel> entriesGrid;

    List<DesignOutputModel> designs;

    string name = "", description = "", abbreviatedFormat = "";

    protected override async Task OnInitializedAsync()
    {
        using var client = ClientFactory.CreateClient();
        var designCatalogueOutputModel = await
        client.GetFromJsonAsyncExtended<DesignCatalogueOutputModel>($"/api/catalogues/{Id}");
        designCatalogue = new DesignCatalogueInputModel()
            {
                Id = designCatalogueOutputModel.Id,
                AbbreviatedFormat = designCatalogueOutputModel.AbbreviatedFormat,
                Description = designCatalogueOutputModel.Description,
                Entries = designCatalogueOutputModel.Entries.Select(e => new DesignCatalogueEntryInputModel()
                {
                    Id = e.Id,
                    CatalogueId = e.Catalogue.Id,
                    Code = e.Code,
                    Description = e.Description,
                    DesignId = e.Design.Id
                }).ToList(),
                Name = designCatalogueOutputModel.Name
            };
        designs = await client.GetFromJsonAsyncExtended<List<DesignOutputModel>>("/api/designs") ?? [];
        name = designCatalogue?.Name ?? "";
        description = designCatalogue?.Description ?? "";
        abbreviatedFormat = designCatalogue?.AbbreviatedFormat ?? "";

    }

    async void Save()
    {
        if (designCatalogue != null)
        {
            using var client = ClientFactory.CreateClient();
            designCatalogue.Name = name;
            designCatalogue.Description = description;
            designCatalogue.AbbreviatedFormat = abbreviatedFormat;
            var response = await client.PutAsJsonAsyncExtended<DesignCatalogueInputModel>($"/api/catalogues/{designCatalogue.Id}",
            designCatalogue);
            if (response.IsSuccessStatusCode)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Catalogue saved",
                        Detail = $"ID: {designCatalogue.Id}"
                    });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error occured",
                        Detail = $"{response}"
                    });
            }
        }
    }

    async Task EditRow(DesignCatalogueEntryInputModel entry)
    {
        //if (!entriesGrid.IsValid) return;

        entriesToUpdate.Add(entry);
        await entriesGrid.EditRow(entry);
    }

    async Task SaveRow(DesignCatalogueEntryInputModel entry)
    {
        await entriesGrid.UpdateRow(entry);
    }

    async Task DeleteRow(DesignCatalogueEntryInputModel entry)
    {
        Reset(entry);

        if (designCatalogue.Entries.Contains(entry))
        {
            designCatalogue.Entries.Remove(entry);

            await entriesGrid.Reload();
        }
        else
        {
            entriesGrid.CancelEditRow(entry);
            await entriesGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        //if (!entriesGrid.IsValid) return;

        var entry = new DesignCatalogueEntryInputModel { CatalogueId = designCatalogue.Id };
        entriesToInsert.Add(entry);
        await entriesGrid.InsertRow(entry);
    }

    void CancelEdit(DesignCatalogueEntryInputModel entry)
    {
        Reset(entry);

        entriesGrid.CancelEditRow(entry);
    }

    void Reset()
    {
        entriesToInsert.Clear();
        entriesToUpdate.Clear();
    }

    void Reset(DesignCatalogueEntryInputModel entry)
    {
        entriesToInsert.Remove(entry);
        entriesToUpdate.Remove(entry);
    }

    void OnCreateRow(DesignCatalogueEntryInputModel entry)
    {
        designCatalogue.Entries.Add(entry);

        entriesToInsert.Remove(entry);
    }

    void OnUpdateRow(DesignCatalogueEntryInputModel entry)
    {
        // TODO: ???
    }
}