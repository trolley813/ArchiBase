@page "/architects/"
@using Microsoft.EntityFrameworkCore
@using System.Linq.Dynamic.Core
@inject IHttpClientFactory ClientFactory
@inject IStringLocalizer<Index> Loc

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
<ArchibasePageTitle Title=@Loc["Architects"] />

<RadzenText TextStyle="TextStyle.H4">@Loc["Architects"]</RadzenText>

<EditorOnly>
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenLink Path="architects/add" Text=@Loc["Add"] Icon="add_circle_outline" />
    </RadzenStack>
</EditorOnly>

<RadzenDataGrid @ref="grid" Responsive=true AllowPaging=true PageSize=20 PagerAlwaysVisible=true ShowPagingSummary=true
    Data="architects" Count="count" AllowSorting=true AllowFiltering=true LoadData="@LoadData" IsLoading=@(!loaded)>
    <Columns>
        <RadzenDataGridColumn Property="AbbreviatedName" Title=@Loc["Abbreviated name"] SortOrder="SortOrder.Ascending">
            <Template Context="architect">
                <RadzenLink Path=@($"architects/{architect.Id}") Text=@(architect.AbbreviatedName) />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="FullName" Title=@Loc["Full name"]>

        </RadzenDataGridColumn>
        <RadzenDataGridColumn Sortable=false Filterable=false Title=@Loc["Lifespan"]>
            <Template Context="architect">
                @if (architect.DateOfBirth is not null && architect.DateOfDeath is null)
                {
                    <RadzenText TextStyle="TextStyle.H5">@Loc["born"]
                        <ImpreciseDateDisplay Value="architect.DateOfBirth" />
                    </RadzenText>
                }
                @if (architect.DateOfBirth is null && architect.DateOfDeath is not null)
                {
                    <RadzenText TextStyle="TextStyle.H5">@Loc["died"]
                        <ImpreciseDateDisplay Value="architect.DateOfDeath" />
                    </RadzenText>
                }
                @if (architect.DateOfBirth is not null && architect.DateOfDeath is not null)
                {
                    <RadzenText TextStyle="TextStyle.H5">
                        <ImpreciseDateDisplay Value="architect.DateOfBirth" /> â€”
                        <ImpreciseDateDisplay Value="architect.DateOfDeath" />
                    </RadzenText>
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code
{

    List<ArchitectOutputModel> architects;
    List<ArchitectOutputModel> allArchitects;

    RadzenDataGrid<ArchitectOutputModel> grid;

    int count;

    bool loaded;

    async Task LoadData(LoadDataArgs args)
    {
        loaded = false;

        await Task.Yield();
        using var client = ClientFactory.CreateClient();
        // TODO: Maybe set filters in API?
        if (allArchitects is null)
        {
            allArchitects = await client.GetFromJsonAsyncExtended<List<ArchitectOutputModel>>("/api/architects") ?? [];
        }
        var query = allArchitects.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        count = query.Count();

        architects = query.Skip(args.Skip ?? 0).Take(args.Top ?? Int32.MaxValue).ToList();

        loaded = true;
    }


}