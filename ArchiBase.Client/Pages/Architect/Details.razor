@page "/architects/{id:guid}"
@using Microsoft.EntityFrameworkCore
@inject IHttpClientFactory ClientFactory
@inject IStringLocalizer<Details> Loc

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
@if (architect is not null)
{
    <ArchibasePageTitle Title="@(architect.AbbreviatedName)" />
    <RadzenText TextStyle="TextStyle.H4">@(architect.AbbreviatedName)</RadzenText>
    <EditorOnly>
        <RadzenLink Path=@($"architects/{architect.Id}/edit") Text=@Loc["Edit"] Icon="edit" />
    </EditorOnly>
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.H5">@(architect.FullName)</RadzenText>
        <RadzenRow>
            <RadzenColumn>
                @if (architect.DateOfBirth is not null || architect.DateOfDeath is not null)
                {
                    <RadzenText TextStyle="TextStyle.Overline">@Loc["Lifespan"]</RadzenText>
                }
                @if (architect.DateOfBirth is not null && architect.DateOfDeath is null)
                {
                    <RadzenText TextStyle="TextStyle.H5">@Loc["born"] @(architect.DateOfBirth)</RadzenText>
                }
                @if (architect.DateOfBirth is null && architect.DateOfDeath is not null)
                {
                    <RadzenText TextStyle="TextStyle.H5">@Loc["died"] @(architect.DateOfDeath)</RadzenText>
                }
                @if (architect.DateOfBirth is not null && architect.DateOfDeath is not null)
                {
                    <RadzenText TextStyle="TextStyle.H5">@(architect?.DateOfBirth) — @(architect?.DateOfDeath)</RadzenText>
                }
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>

    <RadzenText TextStyle="TextStyle.H5">@Loc["Designs"]</RadzenText>
    <RadzenDataGrid Data="architect.Designs" Responsive=true AllowPaging="true" AllowSorting="true" PageSize="100">

    </RadzenDataGrid>

    <RadzenText TextStyle="TextStyle.H5">@Loc["Buildings"]</RadzenText>
    <RadzenDataGrid Data="architect.Buildings" Responsive=true AllowPaging="true" AllowSorting="true" PageSize="100">
        <Columns>
            <RadzenDataGridColumn Title=@Loc["Address"] SortOrder="SortOrder.Ascending">
                <Template Context="building">
                    <RadzenLink style="white-space: pre-wrap" Path=@($"buildings/{building.Id}")>
                        @(building.Location.Name + ", " + String.Join(" / ", (building.ActualCard?.StreetAddresses ?? [])))
                    </RadzenLink>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Design"] Sortable=false>
                <Template Context="building">
                    <RadzenText Style="white-space: pre-wrap">
                        @(String.Join(" ⋅ ", building.ActualCard?.Parts?.Select(p => p.Design.Name).Distinct() ??
                    []))
                    </RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                        @foreach (var c in building.ActualCard?.Categories ?? [])
                        {
                            <RadzenBadge Text=@(c.Name) Shade="Shade.Darker" BadgeStyle="BadgeStyle.Info"
                                Style="white-space: normal" />
                        }
                        @foreach (var c in building.ActualCard?.CategoriesOfDesigns ?? [])
                        {
                            <RadzenBadge Text=@(c.Name) Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Info"
                                Style="white-space: normal" />
                        }
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Floor count"] Width="10%" Property="FloorCount">
                <Template Context="building">
                    <RadzenText Style="white-space: pre-wrap">@(String.Join("; ", building.ActualCard?.FloorCount ?? []))
                    </RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Name"] Property="Name">
                <Template Context="building">
                    <RadzenText Style="white-space: pre-wrap">@((MarkupString)(building.ActualCard?.Name ?? ""))
                    </RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Built"] Width="10%" Property="Built" Visible=@(architect.Buildings.Any(b =>
            b.GetDateOfStatus(BuildingEventType.ConstructionFinished) != null))>
                <Template Context="building">
                    <RadzenText>@(building.GetDateOfStatus(BuildingEventType.ConstructionFinished))</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title=@Loc["Demolished"] Width="10%" Property="Demolished"
                Visible=@(architect.Buildings.Any(b => b.GetDateOfStatus(BuildingEventType.Demolished) != null))>
                <Template Context="building">
                    <RadzenText>@(building.GetDateOfStatus(BuildingEventType.Demolished))</RadzenText>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

}

@code
{
    [Parameter]
    public Guid Id { get; set; }
    ArchitectOutputModel? architect;

    protected override async Task OnParametersSetAsync()
    {
        using var client = ClientFactory.CreateClient();
        architect = await client.GetFromJsonAsyncExtended<ArchitectOutputModel>($"/api/architects/{Id}");
    }
}