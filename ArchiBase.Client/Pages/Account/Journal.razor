@page "/journal"
@using Microsoft.EntityFrameworkCore
@inject IHttpClientFactory ClientFactory
@inject IStringLocalizer<Journal> Loc

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
<ArchibasePageTitle Title=@Loc["Journal"] />

<RadzenText TextStyle="TextStyle.H4">@Loc["Journal (photos submitted last 60 days)"]</RadzenText>

<RadzenDataList Data="photos" AllowPaging=true PageSize=16 WrapItems=true>
    <Template Context="photo">
        <RadzenCard Style="width: 20%; max-width: 20%;">
            <RadzenLink Path=@($"/photos/{photo.Id}")>
                @* <RadzenImage Path=@($"data:image/webp;base64,{ThumbnailService.GetThumbnail(photo)}")
                    Style="display:block;margin:auto;max-height:150px;max-width:300px;height:auto;width:auto;"
                    AlternateText=@Loc["Photo not available"] onerror="this.src='/images/unavailable.png'" /> *@
            </RadzenLink>
            <RadzenStack>
                @foreach (var b in photo.BuildingBinds)
                {
                    <RadzenText TextStyle="TextStyle.Body1">
                    <RadzenLink Path=@($"/buildings/{b.Building.Id}") 
                    Text=@($"{b.Building.Location.Name}, {String.Join(" / ", b.Building.ActualCard.StreetAddresses)}") />
                    </RadzenText>
                }
            </RadzenStack>
            <RadzenStack>
                @foreach (var g in photo.Galleries)
                {
                    <RadzenText TextStyle="TextStyle.Body1">
                    <RadzenLink Path=@($"/galleries/{g.Id}") Text=@(g.Name) />
                    </RadzenText>
                }
            </RadzenStack>
            @switch (photo.Status)
            {
                case PhotoStatus.Published:
                    <RadzenAlert AllowClose="false" Title=@Loc["Published"] AlertStyle="AlertStyle.Success">
                        @Loc["Photo was published."]
                    </RadzenAlert>
                    break;
                case PhotoStatus.Pending:
                    <RadzenAlert AllowClose="false" Title=@Loc["Pending"] AlertStyle="AlertStyle.Warning">
                        @Loc["Photo is pending publication."]
                    </RadzenAlert>
                    break;
                case PhotoStatus.Rejected:
                    <RadzenAlert AllowClose="false" Title=@Loc["Rejected"] AlertStyle="AlertStyle.Danger">
                        @Loc["Photo was rejected."]
                    </RadzenAlert>
                    break;
            }
        </RadzenCard>
    </Template>
</RadzenDataList>

@code
{
    UserOutputModel? user;
    IQueryable<PhotoOutputModel> photos;

    override protected async Task OnInitializedAsync()
    {
        @* var userId = UserResolverService.GetUser();
        user = await UserManager.FindByIdAsync(userId.ToString());
        photos = ModelContext.Photos
        .Include(p => p.BuildingBinds)
        .ThenInclude(b => b.Building)
        .ThenInclude(b => b.Location)
        .Include(p => p.BuildingBinds)
        .ThenInclude(b => b.Building)
        .ThenInclude(b => b.Cards)
        .ThenInclude(c => c.StreetAddresses)
        .ThenInclude(a => a.Street)
        .Where(p => p.AuthorId == userId &&
        (DateTime.UtcNow - p.PublicationDate).TotalDays < 60)
        .OrderByDescending(p => p.PublicationDate); *@
    }
}