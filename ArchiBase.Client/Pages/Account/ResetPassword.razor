@page "/resetpassword"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject IStringLocalizer<ResetPassword> Loc

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
<ArchibasePageTitle Title=@Loc["Reset password"] />
<RadzenText TextStyle="TextStyle.H4">@Loc["Reset password"]</RadzenText>
<RadzenText>
    @Loc["Enter your new password."]
    @Loc["After clicking the \"Submit\" button, you'll be redirected to the main page and can log in with your new password."]
</RadzenText>
<RadzenTemplateForm Data=@model>
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenFormField Text=@Loc["Paste the code you have received"]>
            <RadzenTextBox @bind-Value=@model.Code />
        </RadzenFormField>
        <RadzenFormField Text=@Loc["Enter new password"]>
            <RadzenPassword Name="Password" @bind-Value=@model.Password />
            <RadzenRequiredValidator Component="Password" Text=@Loc["Enter your new password"] Popup=true />
        </RadzenFormField>
        <RadzenFormField Text=@Loc["Repeat new password"]>
            <RadzenPassword Name="RepeatPassword" @bind-Value=@model.RepeatPassword />
            <RadzenRequiredValidator Component="RepeatPassword" Text=@Loc["Repeat your new password"] Popup=true />
            <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(model.RepeatPassword)) Value=@model.Password
                Component="RepeatPassword" Text=@Loc["Passwords should be the same"] Popup=true
                Style="position: absolute" />
        </RadzenFormField>
        <RadzenButton ButtonType="ButtonType.Submit" Text=@Loc["Submit"] Click="OnSubmit" />
    </RadzenStack>
</RadzenTemplateForm>

@foreach (var e in errors)
{
        <RadzenText />
        <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter"
            Title=@Loc["Error"]>
        @e
        </RadzenAlert>
}

@code
{
    [Parameter]
    [SupplyParameterFromQuery]
    public string Email { get; set; }

    class RestoreAccessModel
    {
        public string Code { get; set; }
        public string Password { get; set; }
        public string RepeatPassword { get; set; }
    }

    RestoreAccessModel model = new();

    List<string> errors = [];

    public async Task OnSubmit()
    {
        using var client = ClientFactory.CreateClient();
        var response = await client.PostAsJsonAsync("/api/account/resetpassword", new {
            Email = Email,
            ResetCode = model.Code,
            NewPassword = model.Password
        });
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/account/login");
        }
    }
}