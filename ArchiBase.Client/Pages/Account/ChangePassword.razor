@page "/changepassword"
@using SmartFormat
@inject IHttpClientFactory ClientFactory
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<ChangePassword> Loc

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized Context="actx">
            <RadzenTemplateForm Data=@model>
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFormField Text=@Loc["Enter old password"]>
                        <RadzenPassword Name="Password" @bind-Value=@model.OldPassword />
                        <RadzenRequiredValidator Component="Password" Text=@Loc["Enter your old password"] Popup=true />
                    </RadzenFormField>
                    <RadzenFormField Text=@Loc["Enter new password"]>
                        <RadzenPassword Name="Password" @bind-Value=@model.Password />
                        <RadzenRequiredValidator Component="Password" Text=@Loc["Enter your new password"] Popup=true />
                    </RadzenFormField>
                    <RadzenFormField Text=@Loc["Repeat new password"]>
                        <RadzenPassword Name="RepeatPassword" @bind-Value=@model.RepeatPassword />
                        <RadzenRequiredValidator Component="RepeatPassword" Text=@Loc["Repeat your new password"] Popup=true />
                        <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(model.RepeatPassword)) Value=@model.Password
                            Component="RepeatPassword" Text=@Loc["Passwords should be the same"] Popup=true
                            Style="position: absolute" />
                    </RadzenFormField>
                    <RadzenButton ButtonType="ButtonType.Submit" Text=@Loc["Submit"] Click="OnSubmit" />
                </RadzenStack>
            </RadzenTemplateForm>
        </Authorized>
        <NotAuthorized>
            <RadzenAlert AllowClose="false" Title=@Loc["Unauthorized"] AlertStyle="AlertStyle.Danger" Variant="Variant.Flat"
                Shade="Shade.Lighter">
                @Loc["To change your password, you must be authorized."]
            </RadzenAlert>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>


@code
{
    class ChangePasswordModel
    {
        public string OldPassword { get; set; }
        public string Password { get; set; }
        public string RepeatPassword { get; set; }
    }

    ChangePasswordModel model = new();

    async Task OnSubmit()
    {
        @* using var client = ClientFactory.CreateClient();
        var user = await UserManager.FindByIdAsync(UserResolverService.GetUser().ToString());
        if (user != null)
        {
            var result = await UserManager.ChangePasswordAsync(user, model.OldPassword, model.Password);
            if (result?.Succeeded ?? false)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Change password success",
                    Detail = $"""<a href="/">Return to main page</a>"""
                });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Change password failed",
                    Detail = $"Error: {result}"
                });
            }
        } *@
    }
}