@page "/buildings/by-street/{id:guid}"
@using ArchiBase.Shared.Output
@using Microsoft.EntityFrameworkCore
@using SmartFormat
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JSRuntime

@inject IStringLocalizer<ByStreet> Loc

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
<LoadingScreen Loaded=@loaded>
    @if (street is not null)
    {
        if (street.ActualStreet is null)
        {
                    <ArchibasePageTitle Title=@($"{Loc["List of buildings at the street"]}: {street.Name}") />
                    <RadzenText TextStyle="TextStyle.H4">@Loc["List of buildings at the street"]: @(street.Name)</RadzenText>
                    <RadzenLink Text="@(street.Location.Name)" Path=@($"locations/{street.Location.Id}") />
        }
        else
        {
                    <ArchibasePageTitle Title=@($"{street.Name} ({Loc["now renamed"]})") />
                    <RadzenText TextStyle="TextStyle.H4">@(street.Name)</RadzenText>
                    <RadzenText TextStyle="TextStyle.H6">
                @Loc["This street is now renamed into"]:
                        <RadzenLink Path=@($"/buildings/by-street/{street.ActualStreet.Id}") Text=@(street.ActualStreet.Name) />
                    </RadzenText>
        }
            <RadzenRow>
                <RadzenLink Path=@($"streets/{Id}/edit") Text=@Loc["Edit"] Icon="edit" />
                <RadzenLink Path=@($"streets/{Id}/delete") Text=@Loc["Delete"] Icon="delete" />
            </RadzenRow>
        @if (street.From is null && street.To is not null)
        {
                    <RadzenText>
                <b>@(Smart.Format(Loc["Until {ToDate}"], new { ToDate = street.To })) </b>
            </RadzenText>
        }
        @if (street.From is not null && street.To is null)
        {
                    <RadzenText>
                <b>@(Smart.Format(Loc["Since {FromDate}"], new { FromDate = street.From })) </b>
            </RadzenText>
        }
        @if (street.From is not null && street.To is not null)
        {
                    <RadzenText>
                <b>@(Smart.Format(Loc["{FromDate} — {ToDate}"], new { FromDate = street.From, ToDate = street.To })) </b>
            </RadzenText>
        }

        @if (oldStreetNames.Count > 0)
        {
                    <RadzenText TextStyle="TextStyle.H6">@Loc["Former names"]</RadzenText>
                    <RadzenStack>
                @foreach (var s in oldStreetNames)
                {
                    @if (s.From is null && s.To is not null)
                    {
                                        <RadzenText>
                                            <b>@(Smart.Format(Loc["Until {ToDate}"], new { ToDate = s.To })) </b> &mdash;
                                            <i><RadzenLink Text=@(s.Name) Path=@($"/buildings/by-street/{s.Id}") /></i>
                                        </RadzenText>
                    }
                    else if (s.From is not null && s.To is null)
                    {
                                        <RadzenText>
                                            <b>@(Smart.Format(Loc["Since {FromDate}"], new { FromDate = s.From })) </b> &mdash;
                                            <i><RadzenLink Text=@(s.Name) Path=@($"/buildings/by-street/{s.Id}") /></i>
                                        </RadzenText>
                    }
                    else if (s.From is not null && s.To is not null)
                    {
                                        <RadzenText>
                                            <b>@(Smart.Format(Loc["{FromDate} — {ToDate}"], new { FromDate = s.From, ToDate = s.To })) </b> &mdash;
                                            <i><RadzenLink Text=@(s.Name) Path=@($"/buildings/by-street/{s.Id}") /></i>
                                        </RadzenText>
                    }
                    else
                    {
                                        <RadzenText>
                                            <i><RadzenLink Text=@(s.Name) Path=@($"/buildings/by-street/{s.Id}") /></i>
                                        </RadzenText>
                    }
                }
                    </RadzenStack>
        }

            <RadzenRow>
                <RadzenText>
                @((MarkupString)(street.Description ?? Loc["(no description)"]))
                </RadzenText>
            </RadzenRow>

            <RadzenCheckBox @bind-Value=@showPhotos Name="ShowPhotos" />
            <RadzenLabel Text=@Loc["Show photos"] Component="ShowPhotos" />

            <LeafletMap @ref="map" Style="width: 100%; min-height: 250px;" OnMarkerClick="args => OnMarkerClick(args)"
                BuildingMarkers="buildings.Select(b => new BuildingMarker(b.Building) { HasPhotos = photoLinks.ContainsKey(b.Building.Id) }).ToList()">

            </LeafletMap>

            <RadzenDataGrid Data="buildings" AllowPaging="true" AllowSorting="true" PageSize="100" CellRender="@CellRender" Responsive=true>
                <Columns>
                    <RadzenDataGridColumn Title=@Loc["Photo"] Sortable=false Visible="showPhotos">
                        <Template Context="building">
                            <RadzenImage Path=@(photoLinks.GetValueOrDefault(building.Building.Id, "/images/unavailable.png"))
                                Style="display:block;margin:auto;max-height:150px;max-width:300px;height:auto;width:auto;"
                                AlternateText=@Loc["Photo not available"] onerror="this.src='/images/unavailable.png'" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title=@Loc["Address"] Property="HouseNumber" SortOrder="SortOrder.Ascending">
                        <Template Context="building">
                            <RadzenLink Style="white-space: pre-wrap" Text="@(String.Join(" / ", building.LastCardWithAddress.StreetAddresses
                        .OrderBy(a => a.Street != street)
                        .ThenByDescending(a => a.HouseNumber, StringComparison.OrdinalIgnoreCase.WithNaturalSort())
                            .Select(a => $"{a.Street?.Name}, {a.HouseNumber}") ?? []))"
                                Path=@($"buildings/{building.Building.Id}")>
                            </RadzenLink>
                        @if (building.ActualCard.Id != building.LastCardWithAddress.Id)
                        {
                                    <RadzenText Style="white-space: pre-wrap" TextStyle="TextStyle.Body2">
                                @(Loc["Current address"] + ": " + String.Join(" / ", building.Addresses
                                .OrderBy(a => a.Street != street)
                                .ThenByDescending(a => a.HouseNumber, StringComparison.OrdinalIgnoreCase.WithNaturalSort())
                                .Select(a => $"{a.Street?.Name}, {a.HouseNumber}") ?? []))
                                    </RadzenText>
                        }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title=@Loc["Design"] Sortable=false Width="30%">
                        <Template Context="building">
                            <RadzenText Style="white-space: pre-wrap">
                            @(String.Join(" ⋅ ", building.Building.ActualCard?.Parts?.Select(p => p.Design.Name).Distinct()
                            ??
                            []))
                            </RadzenText>
                            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                            @foreach (var c in building.Building.ActualCard?.Categories ?? [])
                            {
                                        <RadzenLink Path=@($"/categories/{c.Id}")>
                                            <RadzenBadge Style="white-space: normal;" Text=@(c.Name) Shade="Shade.Darker" BadgeStyle="BadgeStyle.Info" />
                                        </RadzenLink>
                            }
                            @foreach (var c in building.Building.ActualCard?.CategoriesOfDesigns ?? [])
                            {
                                        <RadzenLink Path=@($"/categories/{c.Id}")>
                                            <RadzenBadge Style="white-space: normal;" Text=@(c.Name) Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Info" />
                                        </RadzenLink>
                            }
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title=@Loc["Floor count"] Property="FloorCount" Width="10%">
                        <Template Context="building">
                            <RadzenText>@(building.FloorCount)</RadzenText>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title=@Loc["Name"] Property="Name">
                        <Template Context="building">
                            <RadzenText Style="white-space: normal">@((MarkupString)building.Name)</RadzenText>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title=@Loc["Built"] Property="Built" Width="10%" Visible=@(buildings.Any(b => b.Built != null))>
                        <Template Context="building">
                            <ImpreciseDateDisplay Value="@(building.Built)"/>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title=@Loc["Demolished"] Property="Demolished" Width="10%" Visible=@(buildings.Any(b => b.Demolished != null))>
                        <Template Context="building">
                            <ImpreciseDateDisplay Value="@(building.Demolished)"/>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
    }
    else if (street?.ActualStreet is not null)
    {

    }
    else
    {

    }
    </LoadingScreen>


    @code
    {
    [Parameter]
    public Guid Id { get; set; }

    bool loaded = false;

    StreetOutputModel? street = null;

    List<BuildingInfoOutputModel> buildings = [];

    List<StreetOutputModel> oldStreetNames = [];

    bool showPhotos;

    Dictionary<Guid, string> photoLinks = [];

    LeafletMap map;

    protected override async Task OnInitializedAsync()
    {
        loaded = false;
        await Task.Yield();
        using var client = ClientFactory.CreateClient();
        street = await client.GetFromJsonAsyncExtended<StreetOutputModel>($"/api/streets/{Id}");
        if (street != null)
        {
            oldStreetNames = await client.GetFromJsonAsyncExtended<List<StreetOutputModel>>($"/api/streets/{street.Id}/oldnames") ?? [];
            var result = await client.GetFromJsonAsyncExtended<ExtendedBuildingListPage>($"/api/buildings/extended?strid={street.Id}&limit=10000");
            buildings = result?.Buildings ?? [];
            photoLinks = result?.PhotoData ?? [];
        }
        loaded = true;
    }

    void CellRender(DataGridCellRenderEventArgs<BuildingInfoOutputModel> args)
    {
        var actualAddress = args.Data.ActualCard == args.Data.LastCardWithAddress;
        var color = args.Data.Building.Events.OrderBy(e => (e.Date.Date)).ThenBy(e => e.Type).LastOrDefault()?.Type switch
        {
            BuildingEventType.ConstructionStarted => "--rz-success-lighter",
            BuildingEventType.RebuildingStarted => "--rz-warning-lighter",
            BuildingEventType.Abandoned => "--rz-base",
            BuildingEventType.Demolished => "--rz-danger-lighter",
            _ => "--rz-base-background-color"
        };
        if (!actualAddress) color = "--rz-info-lighter";
        string style = $"background-color: var({color});";
        if (args.Column.Property == "HouseNumber" && photoLinks.ContainsKey(args.Data.Building.Id)) style += "font-weight: bold;";
        args.Attributes.Add("style", style);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            double avgLat = 0.0, avgLon = 0.0;
            foreach (var b in buildings)
            {
                avgLat += b.Building.Latitude;
                avgLon += b.Building.Longitude;
            }
            if (buildings.Count != 0)
            {
                avgLat /= buildings.Count;
                avgLon /= buildings.Count;
                map.Center = (avgLat, avgLon);
            }
            else
            {
                map.Center = (street.Location.Latitude, street.Location.Longitude);
            }
            map.Zoom = 16;
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    async Task OnMarkerClick(BuildingMarker marker)
    {
        var lat = marker.Latitude;
        var lon = marker.Longitude;
        Guid? buildingId = buildings
        .FirstOrDefault(b => b.Building.Latitude == lat && b.Building.Longitude == lon)?.Building.Id;
        if (buildingId is not null)
        {
            await JSRuntime.InvokeVoidAsync("open", $"/buildings/{buildingId}", "_blank");
        }
    }
}