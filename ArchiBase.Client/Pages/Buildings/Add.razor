@page "/buildings/add"
@inject IHttpClientFactory ClientFactory
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<BuildingEvent> ELoc
@using ArchiBase.Components.Utils
@using System.Text.RegularExpressions

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
<EditorOnly Location=@LocId>
    <RadzenText TextStyle="TextStyle.H4">Add building</RadzenText>

    <RadzenFormField Text="Location">
        <RadzenDropDown @bind-Value="@location" Data="Locations" TextProperty="Name" Change="SelectStreets" />
    </RadzenFormField>

    <RadzenRow>
        <RadzenFormField Text="Latitude">
            <RadzenNumeric ShowUpDown="false" @bind-Value="latitude" />
        </RadzenFormField>
        <RadzenFormField Text="Longitude">
            <RadzenNumeric ShowUpDown="false" @bind-Value="longitude" />
        </RadzenFormField>
    </RadzenRow>
    <LeafletMap @ref="map" Style="height:480px; width:640px" OnMapClick="OnMapClick">
    </LeafletMap>

    <RadzenText TextStyle="TextStyle.H6">Timeline</RadzenText>
    <RadzenFormField>
        <RadzenButton Icon="add" Click="AddEvent"></RadzenButton>
    </RadzenFormField>
    @for (int index = 0; index < events.Count; index++)
    {
        var i = index;
            <RadzenRow>
                <ImpreciseDateInput @bind-Value="events[i].Date" FieldName="Date" />
                <RadzenDropDown @bind-Value="events[i].Type" Data="eventTypes">
                    <Template Context="type">
                    @(ELoc[ArchiBase.Utils.EnumExtensions.GetDisplayName(type)])
                    </Template>
                </RadzenDropDown>
                <RadzenFormField>
                    <RadzenButton Icon="delete" Click="args => RemoveEvent(i)"></RadzenButton>
                </RadzenFormField>
            </RadzenRow>
    }

    <RadzenText TextStyle="TextStyle.H6">Addresses</RadzenText>
    <RadzenFormField>
        <RadzenButton Icon="add" Click="AddAddress"></RadzenButton>
    </RadzenFormField>

    @for (int index = 0; index < addresses.Count; index++)
    {
        var i = index;
            <RadzenRow>
                <RadzenFormField Text="Street name">
                    <RadzenDropDown AllowFiltering="true" @bind-SearchText="searchText"
                        @bind-Value="addresses[i].StreetId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Data="Streets" TextProperty="Name" ValueProperty="Id" />
                </RadzenFormField>
                <RadzenFormField Text="House number">
                    <RadzenTextBox @bind-Value="addresses[i].HouseNumber" />
                </RadzenFormField>
                <RadzenFormField>
                    <RadzenButton Icon="delete" Click="args => RemoveAddress(i)"></RadzenButton>
                </RadzenFormField>

            </RadzenRow>
    }


    <RadzenText TextStyle="TextStyle.H6">Details</RadzenText>
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenFormField Text="Name">
            <RadzenTextBox @bind-Value="@name" />
        </RadzenFormField>
        <RadzenFormField Text="Description">
            <RadzenHtmlEditor @bind-Value="@description" style="height: 300px;" />
        </RadzenFormField>
        <RadzenRow>
            <RadzenFormField Text="Design">
                <RadzenDropDown @bind-Value="design" Data="Designs" TextProperty="Name"
                    AllowClear=true AllowFiltering=true />
            </RadzenFormField>
            <RadzenFormField Text="Categories">
                <RadzenDropDown @bind-Value="selectedCategories" Data="Categories" TextProperty="Name"
                    AllowClear=true AllowFiltering=true Multiple=true />
            </RadzenFormField>
            <RadzenFormField Text="Floor count">
                <RadzenTextBox @bind-Value="@floorCount" />
            </RadzenFormField>
        </RadzenRow>
        <RadzenFormField>
            <RadzenButton Text="Submit" Icon="add_circle_outline" Click="@AddBuilding" />
        </RadzenFormField>

    </RadzenStack>

</EditorOnly>




@code
{
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? LocId { get; set; }

    public List<LocationOutputModel> Locations { get; set; }

    LocationOutputModel? location = null;

    LeafletMap map;

    double latitude, longitude;

    public List<StreetOutputModel> Streets { get; set; } = [];

    public List<DesignOutputModel> Designs { get; set; } = [];
    public List<DesignCategoryOutputModel> Categories { get; set; } = [];
    List<BuildingEvent> events = [];
    List<StreetAddressInputModel> addresses = [];

    string searchText = "";

    string name = "", description = "", floorCount = "", builder = "", customer = "";

    DesignOutputModel? design;

    List<DesignCategoryOutputModel> selectedCategories = [];

    List<BuildingEventType> eventTypes = Enum.GetValues(typeof(BuildingEventType)).Cast<BuildingEventType>().ToList();

    protected override async Task OnInitializedAsync()
    {
        using var client = ClientFactory.CreateClient();
        Locations = await client.GetFromJsonAsyncExtended<List<LocationOutputModel>>("/api/locations") ?? [];
        Designs = await client.GetFromJsonAsyncExtended<List<DesignOutputModel>>("/api/designs") ?? []; ;
        Categories = await client.GetFromJsonAsyncExtended<List<DesignCategoryOutputModel>>("/api/categories") ?? [];
        location = Locations.FirstOrDefault(loc => loc.Id == LocId);
        SelectStreets();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            SelectStreets();
        }
    }

    void OnMapClick((double, double) coordinate)
    {
        latitude = coordinate.Item1;
        longitude = coordinate.Item2;
        map.PrincipalMarker = new PrincipalMarker { Latitude = latitude, Longitude = longitude };
    }

    public async void SelectStreets()
    {
        using var client = ClientFactory.CreateClient();
        if (map != null && location != null) map.Center = (location.Latitude, location.Longitude);
        Streets = await client.GetFromJsonAsyncExtended<List<StreetOutputModel>>($"/api/locations/{location?.Id}/streets") ?? [];
        addresses.Clear();
    }
    public void AddEvent()
    {
        events.Add(new());
    }

    public void RemoveEvent(int index)
    {
        events.RemoveAt(index);
    }

    public void AddAddress()
    {
        addresses.Add(new());
    }

    public void RemoveAddress(int index)
    {
        addresses.RemoveAt(index);
    }

    public async void AddBuilding()
    {
        if (addresses.Count == 0)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = "Building must have at least one address"
                });
            return;
        }
        using var client = ClientFactory.CreateClient();
        List<BuildingPartInputModel> parts = [];
        if (design is not null)
        {
            parts.Add(new() { DesignId = design.Id });
        }
        BuildingCardInputModel card = new()
            {
                ActualFrom = events.FirstOrDefault(e => e.Type == BuildingEventType.ConstructionFinished)?.Date.Clone() ?? new(),
                Name = name,
                Parts = parts,
                CategoryIds = selectedCategories.Select(cat => cat.Id).ToList(),
                FloorCount = Array.ConvertAll(Regex.Matches(floorCount ?? "", "\\d+").Select(m => m.Value).ToArray(), Int32.Parse).ToList(),
                StreetAddresses = addresses,
                Builder = builder,
                Customer = customer
            };
        BuildingInputModel building = new()
            {
                Cards = [card],
                Events = events,
                Latitude = latitude,
                Longitude = longitude,
                Description = description,
                LocationId = location.Id,
            };
        var response = await client.PostAsJsonAsyncExtended<BuildingInputModel>("/api/buildings/create", building);
        if (response.IsSuccessStatusCode)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Building added",
                    Detail = $"ID: {building.Id}"
                });
            //NavigationManager.NavigateTo("buildings/{building.Id}");
            NavigationManager.Refresh(forceReload: true);
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error occured",
                    Detail = $"{response}"
                });
        }

    }
}